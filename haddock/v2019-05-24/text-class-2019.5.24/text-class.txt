-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Extra helpers to convert data-types to and from Text
--   
--   Extra helpers to convert data-types to and from Text
@package text-class
@version 2019.5.8


-- | Extend the <a>Text</a> module with an extra abstraction to encode and
--   decode values safely to and from <a>Text</a>. It's very similar to
--   <tt>FromJSON</tt> and <tt>ToJSON</tt> from <a>Aeson</a>.
module Data.Text.Class

-- | Defines a textual encoding for a type.
class ToText a

-- | Encode the specified value as text.
toText :: ToText a => a -> Text

-- | Defines a textual decoding for a type.
class FromText a

-- | Decode the specified text as a value.
fromText :: FromText a => Text -> Either TextDecodingError a

-- | Indicates an error that occurred while decoding from text.
newtype TextDecodingError
TextDecodingError :: String -> TextDecodingError
[getTextDecodingError] :: TextDecodingError -> String

-- | Decode the specified text with a <a>Maybe</a> result type.
fromTextMaybe :: FromText a => Text -> Maybe a
instance Formatting.Buildable.Buildable Data.Text.Class.TextDecodingError
instance GHC.Show.Show Data.Text.Class.TextDecodingError
instance GHC.Classes.Eq Data.Text.Class.TextDecodingError
instance Data.Text.Class.FromText Data.Text.Internal.Text
instance Data.Text.Class.FromText GHC.Types.Int
instance Data.Text.Class.FromText GHC.Natural.Natural
instance Data.Text.Class.ToText Data.Text.Internal.Text
instance Data.Text.Class.ToText GHC.Types.Int
instance Data.Text.Class.ToText GHC.Natural.Natural

module Test.Text.Roundtrip

-- | Constructs a test to check that roundtrip textual encoding and
--   decoding is possible for values of the given type.
textRoundtrip :: forall a. (Arbitrary a, Eq a, Show a, ToText a, FromText a, Typeable a) => Proxy a -> Spec
