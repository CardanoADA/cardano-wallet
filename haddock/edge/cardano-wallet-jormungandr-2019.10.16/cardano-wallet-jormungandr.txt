-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Wallet backend protocol-specific bits implemented using Jörmungandr
--   
--   Please see README.md
@package cardano-wallet-jormungandr
@version 2019.10.16


-- | This module contains static configuration parameters. Rather than
--   providing and carrying around a configuration file through the
--   application, we resolve configuration data at runtime using the
--   available environment.
--   
--   This gives us a flexible and portable approach to software
--   configuration, and remove some pain from the development perspective.
--   Prior to starting, the wallet is expected to have a few configuration
--   parameter available. One may rely on a `.env` file to bundle
--   configuration settings together for a given target environment.
module Cardano.Wallet.Jormungandr.Environment

-- | Available network options.
data Network
Mainnet :: Network
Testnet :: Network

-- | Embed some constants into a network type.
class KnownNetwork (n :: Network)
networkVal :: KnownNetwork n => Network
hrp :: KnownNetwork n => HumanReadablePart
single :: KnownNetwork n => Word8
grouped :: KnownNetwork n => Word8
instance GHC.Enum.Enum Cardano.Wallet.Jormungandr.Environment.Network
instance GHC.Enum.Bounded Cardano.Wallet.Jormungandr.Environment.Network
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Environment.Network
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Environment.Network
instance GHC.Generics.Generic Cardano.Wallet.Jormungandr.Environment.Network
instance Cardano.Wallet.Jormungandr.Environment.KnownNetwork 'Cardano.Wallet.Jormungandr.Environment.Mainnet
instance Cardano.Wallet.Jormungandr.Environment.KnownNetwork 'Cardano.Wallet.Jormungandr.Environment.Testnet
instance Data.Text.Class.FromText Cardano.Wallet.Jormungandr.Environment.Network
instance Data.Text.Class.ToText Cardano.Wallet.Jormungandr.Environment.Network


-- | Declaration of primitive types that are specific to a particular
--   backend. Likely, the shape of all types is similar and will eventually
--   converge to one unified design. Though, in the meantime, we have to
--   support different primitive representations for some of them.
--   
--   In the case of <tt>Jormungandr</tt> at the moment, inputs also holds
--   their corresponding resolved value as <a>Coin</a>.
module Cardano.Wallet.Jormungandr.Primitive.Types
data Tx
Tx :: Hash "Tx" -> ![(TxIn, Coin)] -> ![TxOut] -> Tx

-- | Jörmungandr computes transaction id by hashing the full content of the
--   transaction, which includes witnesses. Therefore, we need either to
--   keep track of the witnesses to be able to re-compute the tx id every
--   time, or, simply keep track of the id itself.
[txid] :: Tx -> Hash "Tx"

-- | NOTE: Order of inputs matters in the transaction representation. The
--   transaction id is computed from the binary representation of a tx, for
--   which inputs are serialized in a specific order.
[inputs] :: Tx -> ![(TxIn, Coin)]

-- | NOTE: Order of outputs matter in the transaction representations.
--   Outputs are used as inputs for next transactions which refer to them
--   using their indexes. It matters also for serialization.
[outputs] :: Tx -> ![TxOut]
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Primitive.Types.Tx
instance GHC.Classes.Ord Cardano.Wallet.Jormungandr.Primitive.Types.Tx
instance GHC.Generics.Generic Cardano.Wallet.Jormungandr.Primitive.Types.Tx
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Primitive.Types.Tx
instance Control.DeepSeq.NFData Cardano.Wallet.Jormungandr.Primitive.Types.Tx
instance Formatting.Buildable.Buildable Cardano.Wallet.Jormungandr.Primitive.Types.Tx


-- | The format is for the Shelley era as implemented by the Jörmungandr
--   node. It is described <a>here</a>
--   
--   The module to some extent defines its own Jörmungandr-specific types,
--   different from <a>Cardano.Wallet.Primitive.Types</a>. Here,
--   transactions are just one of many possible <a>Message</a>s that can be
--   included in a block.
--   
--   In some cases it also leads us to <i>throw exceptions</i> when
--   integers would otherwise overflow (look for uses of <a>toEnum</a>).
module Cardano.Wallet.Jormungandr.Binary
data Block
Block :: BlockHeader -> [Message] -> Block
[header] :: Block -> BlockHeader
[messages] :: Block -> [Message]
data BlockHeader
BlockHeader :: Word16 -> Word32 -> SlotId -> Word32 -> Hash "content" -> Hash "BlockHeader" -> Hash "BlockHeader" -> Maybe PoolId -> BlockHeader
[version] :: BlockHeader -> Word16
[contentSize] :: BlockHeader -> Word32
[slot] :: BlockHeader -> SlotId
[chainLength] :: BlockHeader -> Word32
[contentHash] :: BlockHeader -> Hash "content"
[headerHash] :: BlockHeader -> Hash "BlockHeader"
[parentHeaderHash] :: BlockHeader -> Hash "BlockHeader"

-- | Will contain the VRFPubKey of the stake pool for non-genesis
--   Genesis/Praos blocks.
[producedBy] :: BlockHeader -> Maybe PoolId
data ConfigParam

-- | The official start time of the blockchain, in seconds since the Unix
--   epoch.
Block0Date :: StartTime -> ConfigParam

-- | Address discrimination. Testnet / Mainnet.
Discrimination :: Network -> ConfigParam

-- | Consensus version. BFT / Genesis Praos.
Consensus :: ConsensusVersion -> ConfigParam

-- | Number of slots in an epoch.
SlotsPerEpoch :: EpochLength -> ConfigParam

-- | Slot duration in seconds.
SlotDuration :: NominalDiffTime -> ConfigParam

-- | The length of the suffix of the chain (in blocks) considered unstable.
EpochStabilityDepth :: Quantity "block" Word32 -> ConfigParam

-- | Determines maximum probability of a stakeholder being elected as
--   leader in a slot.
ConsensusGenesisPraosParamF :: Milli -> ConfigParam

-- | Maximum number of transactions in a block.
MaxNumberOfTransactionsPerBlock :: Word32 -> ConfigParam

-- | Fraction of blocks to be created by BFT leaders.
BftSlotsRatio :: Milli -> ConfigParam

-- | Add a BFT Leader
AddBftLeader :: LeaderId -> ConfigParam

-- | Remove a BFT Leader
RemoveBftLeader :: LeaderId -> ConfigParam

-- | Enable/disable account creation.
AllowAccountCreation :: Bool -> ConfigParam

-- | Coefficients for fee calculations.
ConfigLinearFee :: FeePolicy -> ConfigParam

-- | Number of epochs until an update proposal expires.
ProposalExpiration :: Quantity "epoch" Word32 -> ConfigParam

-- | Maximum number of seconds per update for KES keys known by the system
--   after start time.
KesUpdateSpeed :: Quantity "second/update" Word32 -> ConfigParam
data ConsensusVersion
BFT :: ConsensusVersion
GenesisPraos :: ConsensusVersion
newtype LeaderId
LeaderId :: ByteString -> LeaderId

-- | The block-body consists of messages. There are several types of
--   messages.
--   
--   Following, as closely as possible:
--   <a>https://github.com/input-output-hk/rust-cardano/blob/e0616f13bebd6b908320bddb1c1502dea0d3305a/chain-impl-mockchain/src/message/mod.rs#L22-L29</a>
data Message

-- | Found in the genesis block.
Initial :: [ConfigParam] -> Message

-- | A standard signed transaction
Transaction :: (Tx, [TxWitness]) -> Message
UnimplementedMessage :: Int -> Message
data MessageType
MsgTypeInitial :: MessageType
MsgTypeTransaction :: MessageType

-- | Used to represent (&gt;= 0) rational numbers as (&gt;= 0) integers, by
--   just multiplying by 1000. For instance: '3.141592' is represented as
--   'Milli 3142'.
newtype Milli
Milli :: Word64 -> Milli
getBlock :: Get Block
getBlockHeader :: Get BlockHeader

-- | Extract a <a>Block</a> id from a serialized <a>Block</a>.
getBlockId :: Get (Hash "BlockHeader")

-- | Decode a message (header + contents).
getMessage :: Get Message

-- | Decode the contents of a <tt>Transaction</tt>-message.
getTransaction :: Int -> Get (Tx, [TxWitness])
putSignedTx :: [(TxIn, Coin)] -> [TxOut] -> [TxWitness] -> Put
putTx :: [(TxIn, Coin)] -> [TxOut] -> Put

-- | Convert the Jörmungandr binary format block into a simpler Wallet
--   block.
convertBlock :: Block -> Block Tx

-- | Convert the Jörmungandr binary format header into a simpler Wallet
--   header.
convertBlockHeader :: BlockHeader -> BlockHeader
putAddress :: Address -> Put
getAddress :: Get Address
singleAddressFromKey :: forall n. KnownNetwork n => Proxy n -> XPub -> Address

-- | Attempt decoding a <a>ByteString</a> into an <a>Address</a>. This
--   merely checks that the underlying bytestring has a "valid" structure /
--   format without doing much more.
decodeLegacyAddress :: ByteString -> Maybe Address

-- | Compute a Blake2b_256 hash of a given <a>ByteString</a>
blake2b256 :: ByteString -> ByteString

-- | This provides network encoding specific variables to be used by the
--   <tt>estimateMaxNumberOfInputs</tt> function.
estimateMaxNumberOfInputsParams :: EstimateMaxNumberOfInputsParams t

-- | Jörmungandr distinguish 'fragment id' (what we commonly call
--   <tt>txId</tt>) from 'transaction sign data'. A transaction fragment
--   corresponds to a signed transaction (inputs, outputs and witnesses).
--   So, the witnesses are required to compute a <a>txid</a>.
fragmentId :: [(TxIn, Coin)] -> [TxOut] -> [TxWitness] -> Hash "Tx"
maxNumberOfInputs :: Int
maxNumberOfOutputs :: Int

-- | See <a>fragmentId</a>. This computes the signing data required for
--   producing transaction witnesses.
signData :: [(TxIn, Coin)] -> [TxOut] -> Hash "SignData"

-- | Add a corresponding header to a message. Every message is encoded as:
--   
--   HEADER(MESSAGE) | MESSAGE
--   
--   where <tt>HEADER</tt> is:
--   
--   SIZE (2 bytes) | TYPE (1 byte)
withHeader :: MessageType -> Put -> Put
data Get a

-- | The simplest interface to run a <a>Get</a> decoder. If the decoder
--   runs into an error, calls <a>fail</a>, or runs out of input, it will
--   call <a>error</a>.
runGet :: () => Get a -> ByteString -> a

-- | Run a <a>Get</a> monad and return <a>Left</a> on failure and
--   <a>Right</a> on success. In both cases any unconsumed input and the
--   number of bytes consumed is returned. In the case of failure, a
--   human-readable error message is included as well.
--   
--   <i>Since: 0.6.4.0</i>
runGetOrFail :: () => Get a -> ByteString -> Either (ByteString, ByteOffset, String) (ByteString, ByteOffset, a)

-- | Put merely lifts Builder into a Writer monad, applied to ().
type Put = PutM ()

-- | Run the <a>PutM</a> monad with a serialiser
runPut :: Put -> ByteString
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Binary.Block
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Binary.Block
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Binary.Message
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Binary.Message
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Binary.ConfigParam
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Binary.ConfigParam
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Binary.ConsensusVersion
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Binary.ConsensusVersion
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Binary.LeaderId
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Binary.LeaderId
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Binary.Milli
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Binary.Milli
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Binary.TxWitnessTag
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Binary.TxWitnessTag
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Binary.BlockHeader
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Binary.BlockHeader


-- | Contains various implementation decision that are specific to a
--   particular network / protocol. This allows us to easily select a
--   particular backend (Byron, Shelley-Rust, Shelley-Haskell) and isolate
--   the bits that vary between those backends.
module Cardano.Wallet.Jormungandr.Compatibility

-- | A type representing the Jormungandr as a network target. This has an
--   influence on binary serializer &amp; network primitives. See also
--   <tt>TxId</tt>
data Jormungandr (network :: Network)

-- | Available network options.
data Network
Mainnet :: Network
Testnet :: Network

-- | Jörmugandr's chain parameter doesn't include a transaction max size.
--   The actual hard-limit for the size is constrained by the binary format
--   and numbers used to represent the number of inputs and outputs
--   (Word8), yet there's also a soft-limit of 8kb which results in much
--   smaller transactions in the end.
softTxMaxSize :: Quantity "byte" Word16
data BaseUrl
BaseUrl :: Scheme -> String -> Int -> String -> BaseUrl
[baseUrlScheme] :: BaseUrl -> Scheme
[baseUrlHost] :: BaseUrl -> String
[baseUrlPort] :: BaseUrl -> Int
[baseUrlPath] :: BaseUrl -> String
data Scheme
Http :: Scheme
Https :: Scheme
localhostBaseUrl :: Int -> BaseUrl

-- | Format an API <a>BaseUrl</a>, for logging, etc.
baseUrlToText :: BaseUrl -> Text
instance Cardano.Wallet.Primitive.Types.DefineTx (Cardano.Wallet.Jormungandr.Compatibility.Jormungandr network)
instance Cardano.Wallet.DB.Sqlite.PersistTx (Cardano.Wallet.Jormungandr.Compatibility.Jormungandr network)
instance Cardano.Wallet.Primitive.AddressDerivation.KeyToAddress (Cardano.Wallet.Jormungandr.Compatibility.Jormungandr n) Cardano.Wallet.Primitive.AddressDerivation.Random.RndKey
instance Cardano.Wallet.Jormungandr.Environment.KnownNetwork n => Cardano.Wallet.Primitive.AddressDerivation.KeyToAddress (Cardano.Wallet.Jormungandr.Compatibility.Jormungandr n) Cardano.Wallet.Primitive.AddressDerivation.Sequential.SeqKey
instance Cardano.Wallet.Jormungandr.Environment.KnownNetwork n => Cardano.Wallet.Primitive.Types.EncodeAddress (Cardano.Wallet.Jormungandr.Compatibility.Jormungandr n)
instance Cardano.Wallet.Jormungandr.Environment.KnownNetwork n => Cardano.Wallet.Primitive.Types.DecodeAddress (Cardano.Wallet.Jormungandr.Compatibility.Jormungandr n)


-- | An specification for the Jörmungandr REST API.
module Cardano.Wallet.Jormungandr.Api
type Api = GetTipId :<|> GetBlock :<|> GetBlockDescendantIds :<|> PostMessage :<|> GetStakeDistribution

-- | Polymorphic wrapper type to put around primitive types and, 3rd party
--   lib types to avoid defining orphan instances and/or, undesirable
--   instances on primitive types. It helps to keep a nice separation of
--   concerns between the API layer and other modules.
newtype ApiT a
ApiT :: a -> ApiT a
[getApiT] :: ApiT a -> a

-- | Retrieve a block by its id.
type GetBlock = "api" :> "v0" :> "block" :> Capture "blockHeaderHash" BlockId :> Get '[JormungandrBinary] Block

-- | Retrieve the header of the latest known block.
type GetTipId = "api" :> "v0" :> "tip" :> Get '[Hex] BlockId

-- | Retrieve <tt>n</tt> descendants of a given block, sorted from closest
--   to farthest.
--   
--   There might also exist fewer than <tt>n</tt> descendants.
--   
--   For n=3 we might have:
--   
--   <pre>
--   [genesis] ... -- [b] -- [b+1] -- [b+2] -- [b+3] -- ... -- [tip]
--                     \       \                  \
--                    parent    +--- descendants ---+
--   </pre>
type GetBlockDescendantIds = "api" :> "v0" :> "block" :> Capture "blockId" BlockId :> "next_id" :> QueryParam "count" Word :> Get '[JormungandrBinary] [BlockId]

-- | Retrieve stake distribution
type GetStakeDistribution = "api" :> "v0" :> "stake" :> Get '[JSON] StakeApiResponse
type PostMessage = "api" :> "v0" :> "message" :> ReqBody '[JormungandrBinary] (Tx, [TxWitness]) :> Post '[NoContent] NoContent
data StakeApiResponse
StakeApiResponse :: ApiT EpochNo -> ApiStakeDistribution -> StakeApiResponse
[epoch] :: StakeApiResponse -> ApiT EpochNo
[stake] :: StakeApiResponse -> ApiStakeDistribution
data ApiStakeDistribution
ApiStakeDistribution :: ApiT (Quantity "lovelace" Word64) -> [(ApiT PoolId, ApiT (Quantity "lovelace" Word64))] -> ApiT (Quantity "lovelace" Word64) -> ApiStakeDistribution
[dangling] :: ApiStakeDistribution -> ApiT (Quantity "lovelace" Word64)
[pools] :: ApiStakeDistribution -> [(ApiT PoolId, ApiT (Quantity "lovelace" Word64))]
[unassigned] :: ApiStakeDistribution -> ApiT (Quantity "lovelace" Word64)
newtype BlockId
BlockId :: Hash "BlockHeader" -> BlockId
[getBlockId] :: BlockId -> Hash "BlockHeader"
api :: Proxy Api
instance GHC.Generics.Generic Cardano.Wallet.Jormungandr.Api.StakeApiResponse
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Api.StakeApiResponse
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Api.StakeApiResponse
instance GHC.Generics.Generic Cardano.Wallet.Jormungandr.Api.ApiStakeDistribution
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Api.ApiStakeDistribution
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Api.ApiStakeDistribution
instance GHC.Classes.Eq a => GHC.Classes.Eq (Cardano.Wallet.Jormungandr.Api.ApiT a)
instance GHC.Show.Show a => GHC.Show.Show (Cardano.Wallet.Jormungandr.Api.ApiT a)
instance GHC.Generics.Generic (Cardano.Wallet.Jormungandr.Api.ApiT a)
instance Servant.API.ContentTypes.MimeUnrender Cardano.Wallet.Jormungandr.Api.Hex Cardano.Wallet.Jormungandr.Api.BlockId
instance Servant.API.ContentTypes.Accept Cardano.Wallet.Jormungandr.Api.Hex
instance Servant.API.ContentTypes.MimeUnrender Cardano.Wallet.Jormungandr.Api.JormungandrBinary [Cardano.Wallet.Jormungandr.Api.BlockId]
instance Servant.API.ContentTypes.Accept Cardano.Wallet.Jormungandr.Api.JormungandrBinary
instance Servant.API.ContentTypes.MimeUnrender Cardano.Wallet.Jormungandr.Api.JormungandrBinary Cardano.Wallet.Jormungandr.Binary.Block
instance Servant.API.ContentTypes.MimeRender Cardano.Wallet.Jormungandr.Api.JormungandrBinary (Cardano.Wallet.Jormungandr.Primitive.Types.Tx, [Cardano.Wallet.Primitive.Types.TxWitness])
instance Data.Aeson.Types.FromJSON.FromJSON Cardano.Wallet.Jormungandr.Api.StakeApiResponse
instance Data.Aeson.Types.FromJSON.FromJSON Cardano.Wallet.Jormungandr.Api.ApiStakeDistribution
instance Data.Aeson.Types.FromJSON.FromJSON (Cardano.Wallet.Jormungandr.Api.ApiT (Data.Quantity.Quantity "lovelace" GHC.Word.Word64))
instance Data.Aeson.Types.FromJSON.FromJSON (Cardano.Wallet.Jormungandr.Api.ApiT Cardano.Wallet.Primitive.Types.EpochNo)
instance Data.Aeson.Types.FromJSON.FromJSON (Cardano.Wallet.Jormungandr.Api.ApiT Cardano.Wallet.Primitive.Types.PoolId)
instance Web.Internal.HttpApiData.ToHttpApiData Cardano.Wallet.Jormungandr.Api.BlockId


-- | This module implements parts of a Jörmungandr REST API Client. It also
--   provides some top-level helpers that are built using the API and are
--   quite handy in other situations.
module Cardano.Wallet.Jormungandr.Api.Client

-- | Endpoints of the jormungandr REST API.
data JormungandrClient m
JormungandrClient :: ExceptT ErrNetworkUnavailable m (Hash "BlockHeader") -> (Hash "BlockHeader" -> ExceptT ErrGetBlock m Block) -> (Hash "BlockHeader" -> Word -> ExceptT ErrGetDescendants m [Hash "BlockHeader"]) -> ((Tx, [TxWitness]) -> ExceptT ErrPostTx m ()) -> (Hash "Genesis" -> ExceptT ErrGetBlockchainParams m (Block, BlockchainParameters)) -> ExceptT ErrNetworkUnavailable m StakeApiResponse -> JormungandrClient m
[$sel:getTipId:JormungandrClient] :: JormungandrClient m -> ExceptT ErrNetworkUnavailable m (Hash "BlockHeader")
[$sel:getBlock:JormungandrClient] :: JormungandrClient m -> Hash "BlockHeader" -> ExceptT ErrGetBlock m Block
[$sel:getDescendantIds:JormungandrClient] :: JormungandrClient m -> Hash "BlockHeader" -> Word -> ExceptT ErrGetDescendants m [Hash "BlockHeader"]
[$sel:postMessage:JormungandrClient] :: JormungandrClient m -> (Tx, [TxWitness]) -> ExceptT ErrPostTx m ()
[$sel:getInitialBlockchainParameters:JormungandrClient] :: JormungandrClient m -> Hash "Genesis" -> ExceptT ErrGetBlockchainParams m (Block, BlockchainParameters)
[$sel:getStakeDistribution:JormungandrClient] :: JormungandrClient m -> ExceptT ErrNetworkUnavailable m StakeApiResponse

-- | Construct a <a>JormungandrClient</a>
mkJormungandrClient :: Manager -> BaseUrl -> JormungandrClient IO

-- | Get a block header corresponding to a header hash.
getBlockHeader :: Monad m => JormungandrClient m -> Hash "BlockHeader" -> ExceptT ErrGetBlock m BlockHeader
getBlocks :: Monad m => JormungandrClient m -> Word -> Hash "BlockHeader" -> ExceptT ErrGetBlock m [Block]

-- | Safely lift error into a bigger type.
class LiftError lift
liftE :: LiftError lift => lift

-- | Error while trying to get one or more blocks
data ErrGetBlock
ErrGetBlockNetworkUnreachable :: ErrNetworkUnavailable -> ErrGetBlock
ErrGetBlockNotFound :: Hash "BlockHeader" -> ErrGetBlock
data ErrGetBlockchainParams
ErrGetBlockchainParamsNetworkUnreachable :: ErrNetworkUnavailable -> ErrGetBlockchainParams
ErrGetBlockchainParamsGenesisNotFound :: Hash "Genesis" -> ErrGetBlockchainParams
ErrGetBlockchainParamsIncompleteParams :: [ConfigParam] -> ErrGetBlockchainParams
data ErrGetDescendants
ErrGetDescendantsNetworkUnreachable :: ErrNetworkUnavailable -> ErrGetDescendants
ErrGetDescendantsParentNotFound :: Hash "BlockHeader" -> ErrGetDescendants

-- | Error while trying to get the network tip
data ErrNetworkTip
ErrNetworkTipNetworkUnreachable :: ErrNetworkUnavailable -> ErrNetworkTip
ErrNetworkTipNotFound :: ErrNetworkTip

-- | Network is unavailable
data ErrNetworkUnavailable

-- | Cannot connect to network backend.
ErrNetworkUnreachable :: Text -> ErrNetworkUnavailable

-- | Network backend reports that the requested network is invalid.
ErrNetworkInvalid :: Text -> ErrNetworkUnavailable

-- | Error while trying to send a transaction
data ErrPostTx
ErrPostTxNetworkUnreachable :: ErrNetworkUnavailable -> ErrPostTx
ErrPostTxBadRequest :: Text -> ErrPostTx
ErrPostTxProtocolFailure :: Text -> ErrPostTx
data ErrUnexpectedNetworkFailure
ErrUnexpectedNetworkFailure :: Link -> ServantError -> ErrUnexpectedNetworkFailure
data BaseUrl
BaseUrl :: Scheme -> String -> Int -> String -> BaseUrl
[baseUrlScheme] :: BaseUrl -> Scheme
[baseUrlHost] :: BaseUrl -> String
[baseUrlPort] :: BaseUrl -> Int
[baseUrlPath] :: BaseUrl -> String
data Scheme
Http :: Scheme
Https :: Scheme
defaultManagerSettings :: ManagerSettings
newManager :: ManagerSettings -> IO Manager
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Api.Client.ErrGetBlockchainParams
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Api.Client.ErrGetBlockchainParams
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Api.Client.ErrGetDescendants
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Api.Client.ErrGetDescendants
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Api.Client.ErrUnexpectedNetworkFailure
instance Cardano.Wallet.Jormungandr.Api.Client.LiftError (Cardano.Wallet.Network.ErrGetBlock -> Cardano.Wallet.Network.ErrNetworkTip)
instance Cardano.Wallet.Jormungandr.Api.Client.LiftError (Cardano.Wallet.Network.ErrNetworkUnavailable -> Cardano.Wallet.Network.ErrGetBlock)
instance Cardano.Wallet.Jormungandr.Api.Client.LiftError (Cardano.Wallet.Jormungandr.Api.Client.ErrGetDescendants -> Cardano.Wallet.Network.ErrGetBlock)
instance GHC.Exception.Type.Exception Cardano.Wallet.Jormungandr.Api.Client.ErrUnexpectedNetworkFailure


-- | This module allows the wallet to retrieve blocks from a known
--   <tt>Jormungandr</tt> node. This is done by providing a
--   <tt>NetworkLayer</tt> with some logic building on top of an underlying
--   <tt>JormungandrClient</tt> HTTP client.
--   
--   It also provides facilities for starting the <tt>jormungandr</tt> node
--   backend process. The Jormungandr <a>NetworkLayer</a> implementation
--   uses the HTTP REST API of this backend.
module Cardano.Wallet.Jormungandr.Network

-- | Whether to start Jormungandr with the given config, or to connect to
--   an already running Jormungandr REST API using the given parameters.
data JormungandrBackend
UseRunning :: JormungandrConnParams -> JormungandrBackend
Launch :: JormungandrConfig -> JormungandrBackend

-- | Parameters for connecting to a Jormungandr REST API.
data JormungandrConnParams
JormungandrConnParams :: Hash "Genesis" -> BaseUrl -> JormungandrConnParams
[$sel:_genesisHash:JormungandrConnParams] :: JormungandrConnParams -> Hash "Genesis"
[$sel:_restApi:JormungandrConnParams] :: JormungandrConnParams -> BaseUrl

-- | Starts the network layer and runs the given action with a
--   <a>NetworkLayer</a>. The caller is responsible for handling errors
--   which may have occurred while starting the Node.
withNetworkLayer :: forall n a t. t ~ Jormungandr n => Trace IO Text -> JormungandrBackend -> (Either ErrStartup (JormungandrConnParams, NetworkLayer IO t Block) -> IO a) -> IO a

-- | Creates a new <a>NetworkLayer</a> connecting to an underlying
--   <a>Jormungandr</a> backend target.
newNetworkLayer :: forall n t. t ~ Jormungandr n => BaseUrl -> Hash "Genesis" -> ExceptT ErrGetBlockchainParams IO (NetworkLayer IO t Block)

-- | A subset of the Jormungandr configuration parameters, used for
--   starting the Jormungandr node backend.
data JormungandrConfig
JormungandrConfig :: FilePath -> Either (Hash "Genesis") FilePath -> Maybe PortNumber -> StdStream -> [String] -> JormungandrConfig
[$sel:_stateDir:JormungandrConfig] :: JormungandrConfig -> FilePath
[$sel:_genesisBlock:JormungandrConfig] :: JormungandrConfig -> Either (Hash "Genesis") FilePath
[$sel:_restApiPort:JormungandrConfig] :: JormungandrConfig -> Maybe PortNumber
[$sel:_outputStream:JormungandrConfig] :: JormungandrConfig -> StdStream
[$sel:_extraArgs:JormungandrConfig] :: JormungandrConfig -> [String]

-- | Launches a Jörmungandr node backend with the given configuration
withJormungandr :: Trace IO Text -> JormungandrConfig -> (JormungandrConnParams -> IO a) -> IO (Either ErrStartup a)

-- | Extract the port number from the base URL part of the connection
--   params.
connParamsPort :: JormungandrConnParams -> Int

-- | Error while trying to get one or more blocks
data ErrGetBlock
ErrGetBlockNetworkUnreachable :: ErrNetworkUnavailable -> ErrGetBlock
ErrGetBlockNotFound :: Hash "BlockHeader" -> ErrGetBlock
data ErrGetBlockchainParams
ErrGetBlockchainParamsNetworkUnreachable :: ErrNetworkUnavailable -> ErrGetBlockchainParams
ErrGetBlockchainParamsGenesisNotFound :: Hash "Genesis" -> ErrGetBlockchainParams
ErrGetBlockchainParamsIncompleteParams :: [ConfigParam] -> ErrGetBlockchainParams
data ErrGetDescendants
ErrGetDescendantsNetworkUnreachable :: ErrNetworkUnavailable -> ErrGetDescendants
ErrGetDescendantsParentNotFound :: Hash "BlockHeader" -> ErrGetDescendants

-- | Error while trying to get the network tip
data ErrNetworkTip
ErrNetworkTipNetworkUnreachable :: ErrNetworkUnavailable -> ErrNetworkTip
ErrNetworkTipNotFound :: ErrNetworkTip

-- | Network is unavailable
data ErrNetworkUnavailable

-- | Cannot connect to network backend.
ErrNetworkUnreachable :: Text -> ErrNetworkUnavailable

-- | Network backend reports that the requested network is invalid.
ErrNetworkInvalid :: Text -> ErrNetworkUnavailable

-- | Error while trying to send a transaction
data ErrPostTx
ErrPostTxNetworkUnreachable :: ErrNetworkUnavailable -> ErrPostTx
ErrPostTxBadRequest :: Text -> ErrPostTx
ErrPostTxProtocolFailure :: Text -> ErrPostTx
data ErrStartup
ErrStartupNodeNotListening :: ErrStartup
ErrStartupCommandExited :: ProcessHasExited -> ErrStartup
ErrStartupGetBlockchainParameters :: ErrGetBlockchainParams -> ErrStartup
ErrStartupInvalidGenesisBlock :: FilePath -> ErrStartup
ErrStartupInvalidGenesisHash :: String -> ErrStartup
data ErrUnexpectedNetworkFailure
ErrUnexpectedNetworkFailure :: Link -> ServantError -> ErrUnexpectedNetworkFailure

-- | Wrap a Jormungandr client into a <a>NetworkLayer</a> common interface.
--   
--   This version provides the full, raw blocks from
--   <a>Cardano.Wallet.Jormungandr.Binary</a>.
mkRawNetworkLayer :: forall m n t block. (MonadBaseControl IO m, t ~ Jormungandr n, block ~ Block) => (Block Tx, BlockchainParameters) -> Word -> MVar BlockHeaders -> JormungandrClient m -> NetworkLayer m t block
data BaseUrl
BaseUrl :: Scheme -> String -> Int -> String -> BaseUrl
[baseUrlScheme] :: BaseUrl -> Scheme
[baseUrlHost] :: BaseUrl -> String
[baseUrlPort] :: BaseUrl -> Int
[baseUrlPath] :: BaseUrl -> String
data Scheme
Http :: Scheme
Https :: Scheme
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Network.ErrStartup
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Network.ErrStartup
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Network.Direction
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Network.Direction
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Network.JormungandrBackend
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Network.JormungandrBackend
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Network.JormungandrConfig
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Network.JormungandrConfig
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Network.JormungandrConnParams
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Network.JormungandrConnParams
instance GHC.Exception.Type.Exception Cardano.Wallet.Jormungandr.Network.ErrStartup

module Cardano.Wallet.Jormungandr.Transaction

-- | Construct a <a>TransactionLayer</a> compatible with Shelley and
--   <tt>Jörmungandr</tt>
newTransactionLayer :: forall n k t. (t ~ Jormungandr n, KeyToAddress (Jormungandr n) k) => Hash "Genesis" -> TransactionLayer t k
sign :: WalletKey k => ByteString -> (k  'AddressK XPrv, Passphrase "encryption") -> TxWitness

-- | Transaction with improper number of inputs and outputs is tried
data ErrExceededInpsOrOuts
ErrExceededInpsOrOuts :: ErrExceededInpsOrOuts
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Transaction.ErrExceededInpsOrOuts
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Transaction.ErrExceededInpsOrOuts
instance Formatting.Buildable.Buildable Cardano.Wallet.Jormungandr.Transaction.ErrExceededInpsOrOuts


-- | This module provides the main wallet server function for the
--   Jörmungandr backend.
--   
--   The <a>Cardano.Wallet.Jormungandr.Network</a> module handles
--   synchronization with the <tt>jormungandr</tt> process.
--   
--   The block format decoders are in
--   <a>Cardano.Wallet.Jormungandr.Network</a>.
--   
--   Functionality specific to this backend for creating transactions is in
--   <a>Cardano.Wallet.Jormungandr.Transaction</a>.
module Cardano.Wallet.Jormungandr

-- | The <tt>cardano-wallet-jormungandr</tt> main function. It takes the
--   configuration which was passed from the CLI and environment and starts
--   all components of the wallet.
serveWallet :: forall t n. (n ~  'Testnet, t ~ Jormungandr n) => (Configuration, Trace IO Text) -> Maybe FilePath -> HostPreference -> Listen -> JormungandrBackend -> (SockAddr -> Port "node" -> BlockchainParameters -> IO ()) -> IO ExitCode
