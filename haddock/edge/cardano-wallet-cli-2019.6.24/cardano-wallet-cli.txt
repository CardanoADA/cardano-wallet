-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Utilities for a building Command-Line Interfaces
--   
--   Utilities for a building Command-Line Interfaces
@package cardano-wallet-cli
@version 2019.6.24


-- | Shared types and helpers for CLI parsing
module Cardano.CLI

-- | Construct a CLI from a list of a commands
--   
--   <pre>
--   &gt;&gt;&gt; runCli $ cli $ cmdA &lt;&gt; cmdB &lt;&gt; cmdC
--   </pre>
cli :: Mod CommandFields a -> ParserInfo a

-- | Runs a specific command parser using appropriate preferences
runCli :: ParserInfo (IO ()) -> IO ()

-- | cardano-wallet mnemonic
cmdMnemonic :: Mod CommandFields (IO ())

-- | cardano-wallet wallet
cmdWallet :: forall t. (DecodeAddress t, EncodeAddress t) => Mod CommandFields (IO ())

-- | cardano-wallet transaction
cmdTransaction :: forall t. (DecodeAddress t, EncodeAddress t) => Mod CommandFields (IO ())

-- | cardano-wallet address
cmdAddress :: forall t. (DecodeAddress t, EncodeAddress t) => Mod CommandFields (IO ())

-- | cardano-wallet version
cmdVersion :: Mod CommandFields (IO ())

-- | Execute <a>launch</a> commands. This differs from the <tt>serve</tt>
--   command as it takes care of also starting a node backend in two
--   separate processes and monitors both processes: if one terminates,
--   then the other one is cancelled.
execLaunch :: Verbosity -> FilePath -> (Trace IO Text -> FilePath -> IO ()) -> [Command] -> IO ()

-- | Helper for writing an option <a>Parser</a> using a <a>FromText</a>
--   instance.
optionT :: FromText a => Mod OptionFields a -> Parser a

-- | Helper for writing an argument <a>Parser</a> using a <a>FromText</a>
--   instance.
argumentT :: FromText a => Mod ArgumentFields a -> Parser a

-- | <ul>
--   <li>-database=FILEPATH</li>
--   </ul>
databaseOption :: Parser FilePath

-- | <ul>
--   <li><i>--random-port|--port=INT</i></li>
--   </ul>
listenOption :: Parser Listen

-- | <ul>
--   <li><i>--node-port=INT</i> , default: 8080</li>
--   </ul>
nodePortOption :: Parser (Port "Node")

-- | <ul>
--   <li>-state-dir=FILEPATH, default: ~/.cardano-wallet</li>
--   </ul>
stateDirOption :: Parser FilePath

-- | <ul>
--   <li><i>(--quiet|--verbose)</i></li>
--   </ul>
verbosityOption :: Parser Verbosity

-- | Defines a point in time that can be formatted as and parsed from an
--   ISO 8601-compliant string.
newtype Iso8601Time
Iso8601Time :: UTCTime -> Iso8601Time
[$sel:getIso8601Time:Iso8601Time] :: Iso8601Time -> UTCTime

-- | Wrapper type around <a>Text</a> to make its semantic more explicit
data Service

-- | Represents the number of words in a mnemonic sentence.
--   
--   Only valid sizes are representable by this type.
data MnemonicSize
MS_9 :: MnemonicSize
MS_12 :: MnemonicSize
MS_15 :: MnemonicSize
MS_18 :: MnemonicSize
MS_21 :: MnemonicSize
MS_24 :: MnemonicSize

-- | Port number with a tag for describing what it is used for
newtype Port (tag :: Symbol)
Port :: Int -> Port
[$sel:getPort:Port] :: Port -> Int

-- | Controls how much information to include in log output.
data Verbosity

-- | The default level of verbosity.
Default :: Verbosity

-- | Include less information in the log output.
Quiet :: Verbosity

-- | Include more information in the log output.
Verbose :: Verbosity

-- | Initialize logging at the specified minimum <a>Severity</a> level.
initTracer :: Severity -> Text -> IO (Configuration, Switchboard Text, Trace IO Text)

-- | Convert a given <a>Verbosity</a> level into a list of command line
--   arguments that can be passed through to a sub-process.
verbosityToArgs :: Verbosity -> [String]

-- | Map a given <a>Verbosity</a> level onto a <a>Severity</a> level.
verbosityToMinSeverity :: Verbosity -> Severity

-- | Override the system output encoding setting. This is needed because
--   the CLI prints UTF-8 characters regardless of the <tt>LANG</tt>
--   environment variable.
setUtf8Encoding :: IO ()

-- | Like <a>hPutErrLn</a> but with provided default <a>Handle</a>
putErrLn :: Text -> IO ()

-- | Print an error message in red
hPutErrLn :: Handle -> Text -> IO ()

-- | Like <a>hGetLine</a> but with default handles
getLine :: Buildable e => Text -> (Text -> Either e a) -> IO (a, Text)

-- | Prompt user and parse the input. Re-prompt on invalid inputs.
hGetLine :: Buildable e => (Handle, Handle) -> Text -> (Text -> Either e a) -> IO (a, Text)

-- | Like <a>hGetSensitiveLine</a> but with default handles
getSensitiveLine :: Buildable e => Text -> (Text -> Either e a) -> IO (a, Text)

-- | Gather user inputs until a newline is met, hiding what's typed with a
--   placeholder character.
hGetSensitiveLine :: Buildable e => (Handle, Handle) -> Text -> (Text -> Either e a) -> IO (a, Text)

-- | Decode API error messages and extract the corresponding message.
decodeError :: ByteString -> Maybe Text

-- | Look whether a particular filepath is correctly resolved on the
--   filesystem. This makes for a better user experience when passing wrong
--   filepaths via options or arguments, especially when they get forwarded
--   to other services.
requireFilePath :: FilePath -> IO ()

-- | Resolve '~' or '$HOME' in a <a>FilePath</a> to their actual system
--   value
resolveHomeDir :: FilePath -> IO FilePath

-- | Wait for a service to become available on a given TCP port. Exit on
--   failure with a proper error message.
waitForService :: forall e. Exception e => Service -> (Switchboard Text, Trace IO Text) -> Port "Node" -> IO () -> IO ()
instance GHC.Show.Show Cardano.CLI.Verbosity
instance GHC.Classes.Eq Cardano.CLI.Verbosity
instance Data.String.IsString Cardano.CLI.Service
instance GHC.Classes.Ord (Cardano.CLI.Port tag)
instance GHC.Enum.Enum (Cardano.CLI.Port tag)
instance GHC.Generics.Generic (Cardano.CLI.Port tag)
instance GHC.Show.Show (Cardano.CLI.Port tag)
instance GHC.Classes.Eq (Cardano.CLI.Port tag)
instance GHC.Show.Show Cardano.CLI.MnemonicSize
instance GHC.Generics.Generic Cardano.CLI.MnemonicSize
instance GHC.Classes.Eq Cardano.CLI.MnemonicSize
instance GHC.Enum.Enum Cardano.CLI.MnemonicSize
instance GHC.Enum.Bounded Cardano.CLI.MnemonicSize
instance GHC.Show.Show Cardano.CLI.Iso8601Time
instance GHC.Classes.Ord Cardano.CLI.Iso8601Time
instance GHC.Classes.Eq Cardano.CLI.Iso8601Time
instance GHC.Enum.Bounded (Cardano.CLI.Port tag)
instance Data.Text.Class.FromText (Cardano.CLI.Port tag)
instance Data.Text.Class.ToText (Cardano.CLI.Port tag)
instance Data.Text.Class.ToText Cardano.CLI.MnemonicSize
instance Data.Text.Class.FromText Cardano.CLI.MnemonicSize
instance Data.Text.Class.ToText Cardano.CLI.Iso8601Time
instance Data.Text.Class.FromText Cardano.CLI.Iso8601Time
