-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Wallet backend protocol-specific bits implemented using Jörmungandr
--   
--   Please see README.md
@package cardano-wallet-jormungandr
@version 2019.5.24


-- | Contains various implementation decision that are specific to a
--   particular network / protocol. This allows us to easily select a
--   particular backend (Byron, Shelley-Rust, Shelley-Haskell) and isolate
--   the bits that vary between those backends.
module Cardano.Wallet.Jormungandr.Compatibility

-- | A type representing the Jormungandr as a network target. This has an
--   influence on binary serializer &amp; network primitives. See also
--   <a>TxId</a>
data Jormungandr
instance Cardano.Wallet.Primitive.Types.TxId Cardano.Wallet.Jormungandr.Compatibility.Jormungandr
instance Cardano.Wallet.Primitive.AddressDerivation.KeyToAddress Cardano.Wallet.Jormungandr.Compatibility.Jormungandr


-- | This module contains static configuration parameters. Rather than
--   providing and carrying around a configuration file through the
--   application, we resolve configuration data at runtime using the
--   available environment.
--   
--   This gives us a flexible and portable approach to software
--   configuration, and remove some pain from the development perspective.
--   Prior to starting, the wallet is expected to have a few configuration
--   parameter available. One may rely on a `.env` file to bundle
--   configuration settings together for a given target environment.
module Cardano.Wallet.Jormungandr.Environment

-- | Available network options.
data Network
Mainnet :: Network
Testnet :: Network

-- | Get the current target <a>Network</a> from the Environment.
--   
--   Throws a runtime exception is the ENV var isn't set or, is invalid.
network :: Network
newtype ProtocolMagic
ProtocolMagic :: Int32 -> ProtocolMagic

-- | Get the <a>ProtocolMagic</a> corresponding to a given <a>Network</a>.
protocolMagic :: Network -> ProtocolMagic
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Environment.ProtocolMagic
instance GHC.Generics.Generic Cardano.Wallet.Jormungandr.Environment.ProtocolMagic
instance GHC.Enum.Enum Cardano.Wallet.Jormungandr.Environment.Network
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Environment.Network
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Environment.Network
instance GHC.Generics.Generic Cardano.Wallet.Jormungandr.Environment.Network
instance Data.Text.Class.FromText Cardano.Wallet.Jormungandr.Environment.Network
instance Data.Text.Class.ToText Cardano.Wallet.Jormungandr.Environment.Network


-- | The format is for the Shelley era as implemented by the Jörmungandr
--   node.
--   
--   It is described <a>here</a>
module Cardano.Wallet.Jormungandr.Binary
data Block
Block :: BlockHeader -> [Message] -> Block
data BlockHeader
BlockHeader :: Word16 -> Word32 -> SlotId -> Word32 -> Hash "content" -> Hash "BlockHeader" -> BlockHeader
[version] :: BlockHeader -> Word16
[contentSize] :: BlockHeader -> Word32
[slot] :: BlockHeader -> SlotId
[chainLength] :: BlockHeader -> Word32
[contentHash] :: BlockHeader -> Hash "content"
[parentHeaderHash] :: BlockHeader -> Hash "BlockHeader"

-- | The block-body consists of messages. There are several types of
--   messages.
--   
--   Following, as closely as possible:
--   <a>https://github.com/input-output-hk/rust-cardano/blob/e0616f13bebd6b908320bddb1c1502dea0d3305a/chain-impl-mockchain/src/message/mod.rs#L22-L29</a>
data Message

-- | Found in the genesis block. | OldUtxoDeclaration UtxoDeclaration
Initial :: [ConfigParam] -> Message
Transaction :: Tx -> Message
UnimplementedMessage :: Int -> Message
getBlockHeader :: Get BlockHeader
getBlock :: Get Block
data ConfigParam

-- | The official start time of the blockchain, in seconds since the Unix
--   epoch.
Block0Date :: Word64 -> ConfigParam

-- | Address discrimination. Testnet / Mainnet.
Discrimination :: Network -> ConfigParam

-- | Consensus version. BFT / Genesis Praos.
Consensus :: ConsensusVersion -> ConfigParam

-- | Number of slots in an epoch.
SlotsPerEpoch :: Quantity "slot/epoch" Word32 -> ConfigParam

-- | Slot duration in seconds.
SlotDuration :: Quantity "second/slot" Word8 -> ConfigParam

-- | The length of the suffix of the chain (in blocks) considered unstable.
EpochStabilityDepth :: Quantity "block" Word32 -> ConfigParam

-- | Determines maximum probability of a stakeholder being elected as
--   leader in a slot.
ConsensusGenesisPraosParamF :: Milli -> ConfigParam

-- | Maximum number of transactions in a block.
MaxNumberOfTransactionsPerBlock :: Word32 -> ConfigParam

-- | Fraction of blocks to be created by BFT leaders.
BftSlotsRatio :: Milli -> ConfigParam

-- | Add a BFT Leader
AddBftLeader :: LeaderId -> ConfigParam

-- | Remove a BFT Leader
RemoveBftLeader :: LeaderId -> ConfigParam

-- | Enable/disable account creation.
AllowAccountCreation :: Bool -> ConfigParam

-- | Coefficients for fee calculations.
ConfigLinearFee :: LinearFee -> ConfigParam

-- | Number of epochs until an update proposal expires.
ProposalExpiration :: Quantity "epoch" Word32 -> ConfigParam

-- | Maximum number of seconds per update for KES keys known by the system
--   after start time.
KesUpdateSpeed :: Quantity "second/update" Word32 -> ConfigParam
data ConsensusVersion
BFT :: ConsensusVersion
GenesisPraos :: ConsensusVersion
newtype LeaderId
LeaderId :: ByteString -> LeaderId
data LinearFee
LinearFee :: Quantity "lovelace" Word64 -> Quantity "lovelace/byte" Word64 -> Quantity "lovelace/cert" Word64 -> LinearFee
[const] :: LinearFee -> Quantity "lovelace" Word64
[perByte] :: LinearFee -> Quantity "lovelace/byte" Word64
[perCert] :: LinearFee -> Quantity "lovelace/cert" Word64

-- | Used to represent (&gt;= 0) rational numbers as (&gt;= 0) integers, by
--   just multiplying by 1000. For instance: '3.141592' is represented as
--   'Milli 3142'.
newtype Milli
Milli :: Word64 -> Milli
class FromBinary a
get :: FromBinary a => Get a

-- | The simplest interface to run a <a>Get</a> decoder. If the decoder
--   runs into an error, calls <a>fail</a>, or runs out of input, it will
--   call <a>error</a>.
runGet :: () => Get a -> ByteString -> a
data Get a
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Binary.Block
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Binary.Block
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Binary.Message
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Binary.Message
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Binary.ConfigParam
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Binary.ConfigParam
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Binary.ConsensusVersion
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Binary.ConsensusVersion
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Binary.LinearFee
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Binary.LinearFee
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Binary.LeaderId
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Binary.LeaderId
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Binary.Milli
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Binary.Milli
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Binary.SignedVote
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Binary.SignedVote
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Binary.TODO
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Binary.TODO
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Binary.SignedUpdateProposal
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Binary.SignedUpdateProposal
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Binary.BlockHeader
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Binary.BlockHeader
instance Cardano.Wallet.Jormungandr.Binary.FromBinary Cardano.Wallet.Jormungandr.Binary.Block
instance Cardano.Wallet.Jormungandr.Binary.FromBinary Cardano.Wallet.Primitive.Types.Block
instance Cardano.Wallet.Jormungandr.Binary.FromBinary a => Cardano.Wallet.Jormungandr.Binary.FromBinary [a]


-- | An specification for the Jörmungandr REST API.
module Cardano.Wallet.Jormungandr.Api
type Api = GetBlock :<|> GetTipId :<|> GetBlockDecendantIds :<|> PostSignedTx

-- | Retrieve a block by its id.
type GetBlock = "api" :> "v0" :> "block" :> Capture "blockHeaderHash" BlockId :> Get '[JormungandrBinary] Block

-- | Retrieve the header of the latest known block.
type GetTipId = "api" :> "v0" :> "tip" :> Get '[Hex] BlockId

-- | Retrieve <tt>n</tt> decendants of a given block, sorted from closest
--   to farthest.
--   
--   There might also exist fewer than <tt>n</tt> decendants.
--   
--   For n=3 we might have:
--   
--   <pre>
--   [genesis] ... -- [b] -- [b+1] -- [b+2] -- [b+3] -- ... -- [tip]
--                     \       \                  \
--                    parent    +--- decendants ---+
--   </pre>
type GetBlockDecendantIds = "api" :> "v0" :> "block" :> Capture "blockId" BlockId :> QueryParam "count" Int :> Get '[JormungandrBinary] [BlockId]
type PostSignedTx = "api" :> "v0" :> "transaction" :> ReqBody '[JormungandrBinary] SignedTx :> Post '[NoContent] NoContent
data BlockId
api :: Proxy Api
data SignedTx
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Api.BlockId
instance Servant.API.ContentTypes.MimeUnrender Cardano.Wallet.Jormungandr.Api.Hex Cardano.Wallet.Jormungandr.Api.BlockId
instance Servant.API.ContentTypes.Accept Cardano.Wallet.Jormungandr.Api.Hex
instance Servant.API.ContentTypes.Accept Cardano.Wallet.Jormungandr.Api.JormungandrBinary
instance Cardano.Wallet.Jormungandr.Binary.FromBinary a => Servant.API.ContentTypes.MimeUnrender Cardano.Wallet.Jormungandr.Api.JormungandrBinary a
instance Web.Internal.HttpApiData.ToHttpApiData Cardano.Wallet.Jormungandr.Api.BlockId
instance Cardano.Wallet.Jormungandr.Binary.FromBinary Cardano.Wallet.Jormungandr.Api.BlockId

module Cardano.Wallet.Jormungandr.Transaction

-- | Construct a <a>TransactionLayer</a> compatible with Shelley and
--   <tt>Jörmungandr</tt>
newTransactionLayer :: TransactionLayer
