-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | The Wallet Backend for a Cardano node.
--   
--   Please see README.md
@package cardano-wallet-core
@version 2019.11.18


-- | An implementation of the DBLayer which uses Persistent and SQLite.
module Cardano.DB.Sqlite

-- | Context for the SQLite <tt>DBLayer</tt>.
data SqliteContext
SqliteContext :: SqlBackend -> (forall a. SqlPersistT IO a -> IO a) -> Maybe FilePath -> Trace IO DBLog -> SqliteContext

-- | A handle to the Persistent SQL backend.
[$sel:getSqlBackend:SqliteContext] :: SqliteContext -> SqlBackend

-- | <tt>safely</tt> run a query with logging and lock-protection
[$sel:runQuery:SqliteContext] :: SqliteContext -> forall a. SqlPersistT IO a -> IO a

-- | The actual database file, if any. If none, runs in-memory
[$sel:dbFile:SqliteContext] :: SqliteContext -> Maybe FilePath

-- | A <a>Trace</a> for logging
[$sel:trace:SqliteContext] :: SqliteContext -> Trace IO DBLog

-- | Size of chunks when inserting, updating or deleting many rows at once.
--   We only act on <a>chunkSize</a> values at a time. See also
--   <a>dbChunked</a>.
chunkSize :: Int

-- | Convert a single DB "updateMany" (or similar) query into multiple
--   updateMany queries with smaller lists of values.
--   
--   This is to prevent too many variables appearing in the SQL statement.
--   SQLITE_MAX_VARIABLE_NUMBER is 999 by default, and we will get a "too
--   many SQL variables" exception if that is exceeded.
--   
--   We choose a conservative value <a>chunkSize</a> &lt;&lt; 999 because
--   there can be multiple variables per row updated.
dbChunked :: ([a] -> SqlPersistT IO b) -> [a] -> SqlPersistT IO ()

-- | Finalize database statements and close the database connection.
destroyDBLayer :: SqliteContext -> IO ()

-- | Run an action, and convert any Sqlite constraints exception into the
--   given error result. No other exceptions are handled.
handleConstraint :: MonadCatch m => e -> m a -> m (Either e a)

-- | Opens the SQLite database connection, sets up query logging and
--   timing, runs schema migrations if necessary.
startSqliteBackend :: Configuration -> Migration -> Trace IO DBLog -> Maybe FilePath -> IO SqliteContext
transformTrace :: Trace IO Text -> Trace IO DBLog

-- | Run a raw query from the outside using an instantiate DB layer. This
--   is completely unsafe because it breaks the abstraction boundary and
--   can have disastrous results on the database consistency.
unsafeRunQuery :: SqliteContext -> SqlPersistT IO a -> IO a
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.DB.Sqlite.DBLog
instance GHC.Classes.Eq Cardano.DB.Sqlite.DBLog
instance GHC.Show.Show Cardano.DB.Sqlite.DBLog
instance GHC.Generics.Generic Cardano.DB.Sqlite.DBLog


-- | Provides a mechanism for Daedalus to discover what port the
--   cardano-wallet server is listening on.
--   
--   See
--   <a>https://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options</a>
--   for more information about the message protocol.
--   
--   There are two separate message formats and IO mechanisms, depending on
--   whether the OS is Windows or not. On Windows, a duplex named pipe is
--   used for communication with the parent process. If modifying this
--   code, do not add concurrent sending and receiving of messages. It will
--   get stuck, because asynchronous reading and writing to named pipes is
--   not possible.
module Cardano.Wallet.DaedalusIPC

-- | Start up the Daedalus IPC process. It's called <a>daedalusIPC</a>, but
--   this could be any nodejs program that needs to start cardano-wallet.
--   All it does is reply with a port number when asked, using a very
--   nodejs-specific IPC method.
--   
--   If the IPC channel was successfully set up, this function won't return
--   until the parent process exits. Otherwise, it will return immediately.
--   Before returning, it will log an message about why it has exited.
daedalusIPC :: Trace IO Text -> Int -> IO ()
instance GHC.Classes.Eq Cardano.Wallet.DaedalusIPC.NodeChannelError
instance GHC.Show.Show Cardano.Wallet.DaedalusIPC.NodeChannelError
instance GHC.Classes.Eq Cardano.Wallet.DaedalusIPC.MsgOut
instance GHC.Show.Show Cardano.Wallet.DaedalusIPC.MsgOut
instance GHC.Classes.Eq Cardano.Wallet.DaedalusIPC.MsgIn
instance GHC.Show.Show Cardano.Wallet.DaedalusIPC.MsgIn
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.Wallet.DaedalusIPC.MsgOut
instance Data.Aeson.Types.FromJSON.FromJSON Cardano.Wallet.DaedalusIPC.MsgIn


-- | Provides functions for checking if TCP ports can be connected to, or
--   are available to listen on.
--   
--   These can be used for: - Waiting until a server in another process has
--   started. - Start servers for testing when there may be multiple test
--   suites running in parallel.
module Cardano.Wallet.Network.Ports
data PortNumber

-- | Find a TCPv4 port which is likely to be free for listening on
--   <tt>localhost</tt>. This binds a socket, receives an OS-assigned port,
--   then closes the socket.
--   
--   Note that this is vulnerable to race conditions if another process
--   binds the port returned by <a>getRandomPort</a> before this process
--   does.
--   
--   Do not use this unless you have no other option.
getRandomPort :: IO PortNumber

-- | Checks whether <tt>connect()</tt> to a given TCPv4 <a>SockAddr</a>
--   succeeds or returns <a>eCONNREFUSED</a>.
--   
--   Rethrows connection exceptions in all other cases (e.g. when the host
--   is unroutable).
--   
--   Code courtesy of nh2: <a>https://stackoverflow.com/a/57022572</a>
isPortOpen :: SockAddr -> IO Bool

-- | Creates a <tt>SockAttr</tt> from host IP and port number.
--   
--   Example: &gt; simpleSockAddr (127,0,0,1) 8000
simpleSockAddr :: (Word8, Word8, Word8, Word8) -> PortNumber -> SockAddr

-- | Wait until a TCP port is open to connections according to a given
--   retry policy. Throws an exception if the time out is reached.
waitForPort :: RetryPolicyM IO -> PortNumber -> IO Bool


-- | This module provides mnemonic (backup phrase) creation, and conversion
--   of a mnemonic to seed for wallet restoration.
--   
--   The module uses a lot of type-level machinery to ensure that entropy
--   and mnemonic sizes are all compatible and legit. Therefore, it isn't
--   possible to generate an invalid seed by using the smart constructors
--   below, and trying to generate an entropy of an invalid size will
--   result in a runtime error.
module Cardano.Wallet.Primitive.Mnemonic

-- | A backup-phrase in the form of a non-empty of Mnemonic words
--   Constructor isn't exposed.
data Mnemonic (mw :: Nat)
data Entropy (n :: Nat)

-- | Smart-constructor for the Entropy
--   
--   <pre>
--   &gt;&gt;&gt; mkEntropy @(EntropySize 15) bytes
--   Entropy {} :: Entropy 160
--   </pre>
mkEntropy :: forall ent csz. (ValidEntropySize ent, ValidChecksumSize ent csz) => ByteString -> Either (EntropyError csz) (Entropy ent)

-- | Smart-constructor for <a>Mnemonic</a>. Requires a type application to
--   disambiguate the mnemonic size:
--   
--   <pre>
--   &gt;&gt;&gt; mkMnemonic @15 sentence
--   Mnemonic {} :: Mnemonic 15
--   </pre>
--   
--   See also <a>FromMnemonic</a> to build a <a>Mnemonic</a> from lists of
--   words of variable sizes.
--   
--   <b>Property</b>:
--   
--   <pre>
--   mkMnemonic (mnemonicToText mnemonic) == Right mnemonic
--   </pre>
mkMnemonic :: forall mw ent csz. (ConsistentEntropy ent mw csz, EntropySize mw ~ ent) => [Text] -> Either (MnemonicError csz) (Mnemonic mw)

-- | Generate Entropy of a given size using a random seed.
--   
--   Example:
--   
--   <pre>
--   &gt;&gt;&gt; genEntropy @(EntropySize 12)
--   Entropy {} :: Entropy 128
--   </pre>
genEntropy :: forall ent csz. (ValidEntropySize ent, ValidChecksumSize ent csz) => IO (Entropy ent)

-- | This wraps errors from <a>Cardano.Encoding.BIP39</a>
data MnemonicError csz

-- | Wrong number of words in mnemonic.
ErrMnemonicWords :: MnemonicWordsError -> MnemonicError csz

-- | Invalid entropy length or checksum.
ErrEntropy :: EntropyError csz -> MnemonicError csz

-- | Invalid word in mnemonic.
ErrDictionary :: DictionaryError -> MnemonicError csz

-- | This wraps EntropyError of <a>Cardano.Encoding.BIP39</a>
newtype MnemonicException csz

-- | Invalid entropy length or checksum
UnexpectedEntropyError :: EntropyError csz -> MnemonicException csz
mnemonicToEntropy :: Mnemonic mw -> Entropy (EntropySize mw)

-- | Convert an Entropy to a corresponding Mnemonic Sentence. Since
--   <a>Entropy</a> and <a>Mnemonic</a> can only be created through
--   smart-constructors, this function cannot fail and is total.
entropyToMnemonic :: forall mw ent csz. (ValidMnemonicSentence mw, ValidEntropySize ent, ValidChecksumSize ent csz, ent ~ EntropySize mw, mw ~ MnemonicWords ent) => Entropy ent -> Mnemonic mw

-- | Convert <a>Entropy</a> to a plain bytes.
entropyToBytes :: Entropy n -> ScrubbedBytes

-- | Convert a <a>Mnemonic</a> to a sentence of English mnemonic words.
mnemonicToText :: Mnemonic mw -> [Text]
data EntropyError (csz :: Nat)
ErrInvalidEntropyLength :: Int -> Int -> EntropyError
ErrInvalidEntropyChecksum :: Checksum csz -> Checksum csz -> EntropyError
data DictionaryError
ErrInvalidDictionaryWord :: String -> DictionaryError
data MnemonicWordsError
ErrWrongNumberOfWords :: Int -> Int -> MnemonicWordsError
type ValidEntropySize (n :: Nat) = (KnownNat n, NatWithinBound Int n, Elem n 96 : 128 : 160 : 192 : 224 : 256 : ([] :: [Nat]))
type ValidChecksumSize (ent :: Nat) (csz :: Nat) = (KnownNat csz, NatWithinBound Int csz, Elem csz 3 : 4 : 5 : 6 : 7 : 8 : ([] :: [Nat]), CheckSumBits ent ~ csz)
type ConsistentEntropy (ent :: Nat) (mw :: Nat) (csz :: Nat) = (ValidEntropySize ent, ValidChecksumSize ent csz, ValidMnemonicSentence mw, MnemonicWords ent ~ mw)
type family CheckSumBits (n :: Nat) :: Nat
type family EntropySize (n :: Nat) :: Nat
type family MnemonicWords (n :: Nat) :: Nat
instance GHC.Show.Show (Cardano.Wallet.Primitive.Mnemonic.MnemonicError csz)
instance GHC.Classes.Eq (Cardano.Wallet.Primitive.Mnemonic.MnemonicError csz)
instance GHC.Show.Show (Cardano.Wallet.Primitive.Mnemonic.MnemonicException csz)
instance GHC.Show.Show (Cardano.Wallet.Primitive.Mnemonic.Mnemonic mw)
instance GHC.Classes.Eq (Cardano.Wallet.Primitive.Mnemonic.Mnemonic mw)
instance GHC.Classes.Eq (Crypto.Encoding.BIP39.EntropyError czs)
instance GHC.Classes.Eq Crypto.Encoding.BIP39.MnemonicWordsError
instance GHC.Classes.Eq Crypto.Encoding.BIP39.Dictionary.DictionaryError
instance GHC.TypeNats.KnownNat csz => GHC.Exception.Type.Exception (Cardano.Wallet.Primitive.Mnemonic.MnemonicException csz)


-- | Template Haskell function for getting the git revision from the local
--   repo. This is a separate module due to the GHC stage restriction.
module Cardano.Wallet.Version.TH

-- | Git revision found by running <tt>git rev-parse</tt>. If <tt>git</tt>
--   could not be executed, then this will be an empty string.
gitRevFromGit :: Q Exp

module Data.Function.Utils

-- | Apply a function <tt>n</tt> times to the specified input.
applyN :: Integral n => n -> (a -> a) -> a -> a


-- | Representation of values with an associated (free) unit of measure.
--   Useful to disambiguate primitive types like <a>Int</a> or <a>Value</a>
--   which can be in different bases depending on the context.
module Data.Quantity

-- | <tt>Quantity (unit :: Symbol) a</tt> is a primitive <tt>a</tt>
--   multiplied by an <tt>unit</tt>.
--   
--   Example:
--   
--   Instead of providing the unit implicitly as a comment, or a part of a
--   name
--   
--   <pre>
--   &gt;&gt;&gt; a :: Word32 -- in lovelace
--   </pre>
--   
--   we can write
--   
--   <pre>
--   &gt;&gt;&gt; a :: Quantity "lovelace" Word32
--   </pre>
--   
--   which now has a different type from
--   
--   <pre>
--   &gt;&gt;&gt; b :: Quantity "lovelace/byte" Word32
--   </pre>
--   
--   so mixing them up is more difficult.
--   
--   The unit is mostly a phantom type, but it is also included in the
--   <tt>ToJSON</tt>/<tt>FromJSON</tt> instances.
--   
--   <pre>
--   &gt;&gt;&gt; Aeson.encode $ Quantity @"lovelace" 14
--   {"unit":"lovelace","quantity":14}
--   </pre>
newtype Quantity (unit :: Symbol) a
Quantity :: a -> Quantity a
[getQuantity] :: Quantity a -> a

-- | Opaque Haskell type to represent values between 0 and 100 (incl).
data Percentage
data MkPercentageError
PercentageOutOfBoundsError :: MkPercentageError

-- | Safe constructor for <a>Percentage</a>
mkPercentage :: Integral i => i -> Either MkPercentageError Percentage
getPercentage :: Percentage -> Word
instance GHC.Classes.Eq Data.Quantity.MkPercentageError
instance GHC.Show.Show Data.Quantity.MkPercentageError
instance Data.Aeson.Types.ToJSON.ToJSON Data.Quantity.Percentage
instance GHC.Classes.Ord Data.Quantity.Percentage
instance GHC.Classes.Eq Data.Quantity.Percentage
instance GHC.Show.Show Data.Quantity.Percentage
instance GHC.Generics.Generic Data.Quantity.Percentage
instance GHC.Enum.Enum a => GHC.Enum.Enum (Data.Quantity.Quantity unit a)
instance GHC.Enum.Bounded a => GHC.Enum.Bounded (Data.Quantity.Quantity unit a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (Data.Quantity.Quantity unit a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (Data.Quantity.Quantity unit a)
instance GHC.Show.Show a => GHC.Show.Show (Data.Quantity.Quantity unit a)
instance GHC.Generics.Generic (Data.Quantity.Quantity unit a)
instance Control.DeepSeq.NFData Data.Quantity.Percentage
instance Data.Aeson.Types.FromJSON.FromJSON Data.Quantity.Percentage
instance GHC.Enum.Bounded Data.Quantity.Percentage
instance GHC.Enum.Enum Data.Quantity.Percentage
instance Data.Text.Class.ToText Data.Quantity.Percentage
instance Data.Text.Class.FromText Data.Quantity.Percentage
instance Control.DeepSeq.NFData a => Control.DeepSeq.NFData (Data.Quantity.Quantity unit a)
instance (GHC.TypeLits.KnownSymbol unit, Data.Aeson.Types.ToJSON.ToJSON a) => Data.Aeson.Types.ToJSON.ToJSON (Data.Quantity.Quantity unit a)
instance (GHC.TypeLits.KnownSymbol unit, Data.Aeson.Types.FromJSON.FromJSON a) => Data.Aeson.Types.FromJSON.FromJSON (Data.Quantity.Quantity unit a)
instance Data.Text.Class.FromText b => Data.Text.Class.FromText (Data.Quantity.Quantity sym b)
instance Data.Text.Class.ToText b => Data.Text.Class.ToText (Data.Quantity.Quantity sym b)


-- | This module contains the core primitive of a Wallet. This is roughly a
--   Haskell translation of the <a>Formal Specification for a Cardano
--   Wallet</a>
--   
--   It doesn't contain any particular business-logic code, but define a
--   few primitive operations on Wallet core types as well.
module Cardano.Wallet.Primitive.Types
data Block
Block :: !BlockHeader -> ![Tx] -> Block
[$sel:header:Block] :: Block -> !BlockHeader
[$sel:transactions:Block] :: Block -> ![Tx]
data BlockHeader
BlockHeader :: SlotId -> Quantity "block" Word32 -> !Hash "BlockHeader" -> !Hash "BlockHeader" -> BlockHeader
[$sel:slotId:BlockHeader] :: BlockHeader -> SlotId
[$sel:blockHeight:BlockHeader] :: BlockHeader -> Quantity "block" Word32
[$sel:headerHash:BlockHeader] :: BlockHeader -> !Hash "BlockHeader"
[$sel:parentHeaderHash:BlockHeader] :: BlockHeader -> !Hash "BlockHeader"

-- | Primitive <tt>Tx</tt>-type.
--   
--   Currently tailored for jormungandr in that inputs are <tt>(TxIn,
--   Coin)</tt> instead of <tt>TxIn</tt>. We might have to revisit this
--   when supporting another node.
data Tx
Tx :: Hash "Tx" -> ![(TxIn, Coin)] -> ![TxOut] -> Tx

-- | Jörmungandr computes transaction id by hashing the full content of the
--   transaction, which includes witnesses. Therefore, we need either to
--   keep track of the witnesses to be able to re-compute the tx id every
--   time, or, simply keep track of the id itself.
[$sel:txId:Tx] :: Tx -> Hash "Tx"

-- | NOTE: Order of inputs matters in the transaction representation. The
--   transaction id is computed from the binary representation of a tx, for
--   which inputs are serialized in a specific order.
[$sel:resolvedInputs:Tx] :: Tx -> ![(TxIn, Coin)]

-- | NOTE: Order of outputs matter in the transaction representations.
--   Outputs are used as inputs for next transactions which refer to them
--   using their indexes. It matters also for serialization.
[$sel:outputs:Tx] :: Tx -> ![TxOut]
data TxIn
TxIn :: !Hash "Tx" -> !Word32 -> TxIn
[$sel:inputId:TxIn] :: TxIn -> !Hash "Tx"
[$sel:inputIx:TxIn] :: TxIn -> !Word32
data TxOut
TxOut :: !Address -> !Coin -> TxOut
[$sel:address:TxOut] :: TxOut -> !Address
[$sel:coin:TxOut] :: TxOut -> !Coin
data TxMeta
TxMeta :: !TxStatus -> !Direction -> !SlotId -> !Quantity "block" Word32 -> !Quantity "lovelace" Natural -> TxMeta
[$sel:status:TxMeta] :: TxMeta -> !TxStatus
[$sel:direction:TxMeta] :: TxMeta -> !Direction
[$sel:slotId:TxMeta] :: TxMeta -> !SlotId
[$sel:blockHeight:TxMeta] :: TxMeta -> !Quantity "block" Word32
[$sel:amount:TxMeta] :: TxMeta -> !Quantity "lovelace" Natural

-- | The effect of a <tt>Transaction</tt> on the wallet balance.
data Direction

-- | The wallet balance decreases.
Outgoing :: Direction

-- | The wallet balance increases or stays the same.
Incoming :: Direction
data TxStatus
Pending :: TxStatus
InLedger :: TxStatus

-- | <tt>TxWitness</tt> is proof that transaction inputs are allowed to be
--   spent
newtype TxWitness
TxWitness :: ByteString -> TxWitness
[$sel:unWitness:TxWitness] :: TxWitness -> ByteString

-- | Full expanded and resolved information about a transaction, suitable
--   for presentation to the user.
data TransactionInfo
TransactionInfo :: !Hash "Tx" -> ![(TxIn, Maybe TxOut)] -> ![TxOut] -> !TxMeta -> Quantity "block" Natural -> UTCTime -> TransactionInfo

-- | Transaction ID of this transaction
[$sel:txInfoId:TransactionInfo] :: TransactionInfo -> !Hash "Tx"

-- | Transaction inputs and (maybe) corresponding outputs of the source.
--   Source information can only be provided for outgoing payments.
[$sel:txInfoInputs:TransactionInfo] :: TransactionInfo -> ![(TxIn, Maybe TxOut)]

-- | Payment destination.
[$sel:txInfoOutputs:TransactionInfo] :: TransactionInfo -> ![TxOut]

-- | Other information calculated from the transaction.
[$sel:txInfoMeta:TransactionInfo] :: TransactionInfo -> !TxMeta

-- | Number of slots since the transaction slot.
[$sel:txInfoDepth:TransactionInfo] :: TransactionInfo -> Quantity "block" Natural

-- | Creation time of the block including this transaction.
[$sel:txInfoTime:TransactionInfo] :: TransactionInfo -> UTCTime

-- | A linear equation of a free variable <tt>x</tt>. Represents the <tt>x
--   -&gt; a + b*x</tt> function where <tt>x</tt> can be the transaction
--   size in bytes or, a number of inputs + outputs.
--   
--   <tt>a</tt>, <tt>b</tt> and <tt>c</tt> are constant coefficients.
data FeePolicy
LinearFee :: Quantity "lovelace" Double -> Quantity "lovelace/byte" Double -> Quantity "lovelace/certificate" Double -> FeePolicy
txIns :: Set Tx -> Set TxIn

-- | True if the given tuple refers to a pending transaction
isPending :: TxMeta -> Bool
inputs :: Tx -> [TxIn]

-- | Representation of Cardano addresses. Addresses are basically a
--   human-friendly representation of public keys. Historically in Cardano,
--   there exists different sort of addresses, and new ones are to come. So
--   far, we can distinguish between three types of addresses:
--   
--   <ul>
--   <li>Byron Random addresses, which holds a payload with derivation path
--   details</li>
--   <li>Byron Sequential addresses, also known as Icarus'style
--   addresses</li>
--   <li>Shelley base addresses, see also
--   <a>implementation-decisions/address</a></li>
--   </ul>
--   
--   For more details, see also <a>About Address Derivation</a>
--   
--   Shelley base addresses can be declined into two types:
--   
--   <ul>
--   <li>Single Addresses: which only holds a public spending key</li>
--   <li>Group Addresses: which hold both a spending and delegation
--   keys</li>
--   </ul>
--   
--   It'll therefore seem legitimate to represent addresses as:
--   
--   <pre>
--   data Address
--     = ByronAddress !ByteString
--     | SingleAddress !XPub
--     | GroupAddress !XPub XPub
--   </pre>
--   
--   However, there's a major drawback to this approach: we have to
--   consider all three constructors everywhere, and make sure we test
--   every function using them three despite having no need for such
--   fine-grained representation.
--   
--   Indeed, from the wallet core code, addresses are nothing more than an
--   opaque bunch of bytes that can be compared with each others. When
--   signing transactions, we have to lookup addresses anyway and
--   therefore, can re-derive their corresponding public keys. The only
--   moment the distinction between address type matters is when it comes
--   to representing addresses at the edge of the application (the API
--   layer). And here, this is precisely where we need to also what target
--   backend we're connected to. Different backends use different encodings
--   which may not be compatible.
--   
--   Therefore, for simplicity, it's easier to consider addresses as
--   "bytes", and only peak into these bytes whenever we need to do
--   something with them. This makes it fairly clear that addresses are
--   just an opaque string for the wallet layer and that the underlying
--   encoding is rather agnostic to the underlying backend.
newtype Address
Address :: ByteString -> Address
[$sel:unAddress:Address] :: Address -> ByteString

-- | Denotes if an address has been previously used or not... whether that
--   be in the output of a transaction on the blockchain or one in our
--   pending set.
data AddressState
Used :: AddressState
Unused :: AddressState

-- | Also known as a staking key, chimeric account is used in group-type
--   address for staking purposes. It is a public key of the account
--   address
newtype ChimericAccount
ChimericAccount :: ByteString -> ChimericAccount

-- | Coins are stored as Lovelace (reminder: 1 Lovelace = 1e-6 ADA)
newtype Coin
Coin :: Word64 -> Coin
[$sel:getCoin:Coin] :: Coin -> Word64
isValidCoin :: Coin -> Bool
newtype UTxO
UTxO :: Map TxIn TxOut -> UTxO
[$sel:getUTxO:UTxO] :: UTxO -> Map TxIn TxOut

-- | Compute the balance of a UTxO
balance :: UTxO -> Natural

-- | Compute the balance of a unwrapped UTxO
balance' :: [(TxIn, TxOut)] -> Word64

-- | Pick a random element from a UTxO, returns <a>Nothing</a> if the UTxO
--   is empty. Otherwise, returns the selected entry and, the UTxO minus
--   the selected one.
pickRandom :: MonadRandom m => UTxO -> m (Maybe (TxIn, TxOut), UTxO)

-- | ins⋪ u
excluding :: UTxO -> Set TxIn -> UTxO

-- | a ⊆ b
isSubsetOf :: UTxO -> UTxO -> Bool

-- | ins⊲ u
restrictedBy :: UTxO -> Set TxIn -> UTxO

-- | u ⊳ outs
restrictedTo :: UTxO -> Set TxOut -> UTxO

-- | Allows us to define the "domain" of any type — <tt>UTxO</tt> in
--   particular — and use <a>dom</a> to refer to the <i>inputs</i> of an
--   <i>utxo</i>.
--   
--   This is the terminology used in the <a>Formal Specification for a
--   Cardano Wallet</a> uses.
class Dom a where {
    type family DomElem a :: *;
}
dom :: Dom a => a -> Set (DomElem a)
data UTxOStatistics
UTxOStatistics :: ![HistogramBar] -> !Word64 -> BoundType -> UTxOStatistics
[$sel:histogram:UTxOStatistics] :: UTxOStatistics -> ![HistogramBar]
[$sel:allStakes:UTxOStatistics] :: UTxOStatistics -> !Word64
[$sel:boundType:UTxOStatistics] :: UTxOStatistics -> BoundType
data HistogramBar
HistogramBar :: !Word64 -> !Word64 -> HistogramBar
[$sel:bucketUpperBound:HistogramBar] :: HistogramBar -> !Word64
[$sel:bucketCount:HistogramBar] :: HistogramBar -> !Word64
data BoundType

-- | Compute UtxoStatistics from UTxOs
computeUtxoStatistics :: BoundType -> UTxO -> UTxOStatistics

-- | Smart-constructor to create bounds using a log-10 scale
log10 :: BoundType
data SyncProgress
Ready :: SyncProgress
Syncing :: !Quantity "percent" Percentage -> SyncProgress
newtype SyncTolerance
SyncTolerance :: NominalDiffTime -> SyncTolerance

-- | Construct a <a>SyncTolerance</a> from a number of <b>seconds</b>
mkSyncTolerance :: Int -> SyncTolerance

-- | A slot identifier is the combination of an epoch and slot.
data SlotId
SlotId :: !EpochNo -> !SlotNo -> SlotId
[$sel:epochNumber:SlotId] :: SlotId -> !EpochNo
[$sel:slotNumber:SlotId] :: SlotId -> !SlotNo
newtype SlotNo
SlotNo :: Word32 -> SlotNo
[$sel:unSlotNo:SlotNo] :: SlotNo -> Word32
newtype EpochNo
EpochNo :: Word64 -> EpochNo
[$sel:unEpochNo:EpochNo] :: EpochNo -> Word64

-- | The essential parameters necessary for performing slot arithmetic.
data SlotParameters
SlotParameters :: EpochLength -> SlotLength -> StartTime -> SlotParameters
[$sel:getEpochLength:SlotParameters] :: SlotParameters -> EpochLength
[$sel:getSlotLength:SlotParameters] :: SlotParameters -> SlotLength
[$sel:getGenesisBlockDate:SlotParameters] :: SlotParameters -> StartTime

-- | Duration of a single slot.
newtype SlotLength
SlotLength :: NominalDiffTime -> SlotLength

-- | Number of slots in a single epoch
newtype EpochLength
EpochLength :: Word32 -> EpochLength

-- | Blockchain start time
newtype StartTime
StartTime :: UTCTime -> StartTime

-- | Estimate restoration progress based on:
--   
--   <ul>
--   <li>The current local tip</li>
--   <li>The last slot</li>
--   </ul>
--   
--   For the sake of this calculation, we are somewhat conflating the
--   definitions of slots and block height. Because we can't reliably
--   _trust_ that the current node is actually itself synced with the
--   network. So, we compute the progress as:
--   
--   <pre>
--   p = h / (h + X)
--   </pre>
--   
--   Where:
--   
--   <ul>
--   <li><tt>h</tt>: the number of blocks we have ingested so far.</li>
--   <li><tt>X</tt>: the estimatd remaining slots to reach the network
--   tip.</li>
--   </ul>
--   
--   Initially, <tt>X</tt> gives a relatively poor estimation of the
--   network height, as it assumes that every next slot will be a block.
--   But, as we ingest blocks, <tt>h</tt> becomes bigger and <tt>X</tt>
--   becomes smaller making the progress estimation better and better. At
--   some point, <tt>X</tt> is null, and we have `p = h / h`
syncProgress :: SyncTolerance -> SlotParameters -> BlockHeader -> SlotId -> SyncProgress

-- | Helper to compare the <i>local tip</i> with the slot corresponding to
--   a <tt>UTCTime</tt>, and calculate progress based on that.
syncProgressRelativeToTime :: SyncTolerance -> SlotParameters -> BlockHeader -> UTCTime -> SyncProgress

-- | Convert a <a>SlotId</a> to the number of slots since genesis.
flatSlot :: EpochLength -> SlotId -> Word64

-- | Convert a <a>flatSlot</a> index to <a>SlotId</a>.
fromFlatSlot :: EpochLength -> Word64 -> SlotId

-- | The time that a slot begins.
slotStartTime :: SlotParameters -> SlotId -> UTCTime

-- | For the given time <tt>t</tt>, determine the ID of the earliest slot
--   with start time <tt>s</tt> such that 't ≤ s'.
slotCeiling :: SlotParameters -> UTCTime -> SlotId

-- | For the given time <tt>t</tt>, determine the ID of the latest slot
--   with start time <tt>s</tt> such that 's ≤ t'.
slotFloor :: SlotParameters -> UTCTime -> Maybe SlotId

-- | For the given time <tt>t</tt>, determine the ID of the unique slot
--   with start time <tt>s</tt> and end time <tt>e</tt> such that 's ≤ t ≤
--   e'.
slotAt :: SlotParameters -> UTCTime -> Maybe SlotId

-- | <tt>slotDifference a b</tt> is how many slots <tt>a</tt> is after
--   <tt>b</tt>. The result is non-negative, and if <tt>b &gt; a</tt> then
--   this function returns zero.
slotDifference :: SlotParameters -> SlotId -> SlotId -> Quantity "slot" Natural

-- | Returns the earliest slot.
slotMinBound :: SlotId

-- | Return the slot immediately before the given slot.
slotPred :: SlotParameters -> SlotId -> Maybe SlotId

-- | Return the slot immediately after the given slot.
slotSucc :: SlotParameters -> SlotId -> SlotId

-- | Transforms the given inclusive time range into an inclusive slot
--   range.
--   
--   This function returns a slot range if (and only if) the specified time
--   range intersects with the life of the blockchain.
--   
--   If, on the other hand, the specified time range terminates before the
--   start of the blockchain, this function returns <a>Nothing</a>.
slotRangeFromTimeRange :: SlotParameters -> Range UTCTime -> Maybe (Range SlotId)

-- | Additional information about a wallet that can't simply be derived
--   from the blockchain like <tt>Wallet s</tt> is.
--   
--   Whereas <tt>Wallet s</tt> in <a>Primitive</a> can be updated using
--   <tt>applyBlock</tt>, <tt>WalletMetadata</tt> is not*.
--   
--   <ul>
--   <li>) Except for possibly <a>$sel:status:TxMeta</a> and
--   <a>$sel:delegation:WalletMetadata</a>...</li>
--   </ul>
data WalletMetadata
WalletMetadata :: !WalletName -> !UTCTime -> !Maybe WalletPassphraseInfo -> !WalletDelegation PoolId -> WalletMetadata
[$sel:name:WalletMetadata] :: WalletMetadata -> !WalletName
[$sel:creationTime:WalletMetadata] :: WalletMetadata -> !UTCTime
[$sel:passphraseInfo:WalletMetadata] :: WalletMetadata -> !Maybe WalletPassphraseInfo
[$sel:delegation:WalletMetadata] :: WalletMetadata -> !WalletDelegation PoolId
newtype WalletId
WalletId :: Digest Blake2b_160 -> WalletId
[$sel:getWalletId:WalletId] :: WalletId -> Digest Blake2b_160

-- | Length-restricted name of a wallet
newtype WalletName
WalletName :: Text -> WalletName
[$sel:getWalletName:WalletName] :: WalletName -> Text

-- | Calling 'fromText @WalletName' on shorter longer string will fail.
walletNameMinLength :: Int

-- | Calling 'fromText @WalletName' on a longer string will fail.
walletNameMaxLength :: Int
data WalletDelegation poolId
NotDelegating :: WalletDelegation poolId
Delegating :: !poolId -> WalletDelegation poolId
newtype WalletPassphraseInfo
WalletPassphraseInfo :: UTCTime -> WalletPassphraseInfo
[$sel:lastUpdatedAt:WalletPassphraseInfo] :: WalletPassphraseInfo -> UTCTime
data WalletBalance
WalletBalance :: !Quantity "lovelace" Natural -> !Quantity "lovelace" Natural -> WalletBalance
[$sel:available:WalletBalance] :: WalletBalance -> !Quantity "lovelace" Natural
[$sel:total:WalletBalance] :: WalletBalance -> !Quantity "lovelace" Natural

-- | Represent stake pool identifier. VRF PubKey: 32 bytes (ristretto25519)
--   which translates to 64 hex character string see
--   <a>https://github.com/input-output-hk/chain-libs/blob/master/chain-impl-mockchain/doc/format.md</a>
newtype PoolId
PoolId :: ByteString -> PoolId
[$sel:getPoolId:PoolId] :: PoolId -> ByteString
data StakeDistribution
StakeDistribution :: Quantity "lovelace" Word64 -> [(PoolId, Quantity "lovelace" Word64)] -> Quantity "lovelace" Word64 -> StakeDistribution
[$sel:dangling:StakeDistribution] :: StakeDistribution -> Quantity "lovelace" Word64
[$sel:pools:StakeDistribution] :: StakeDistribution -> [(PoolId, Quantity "lovelace" Word64)]
[$sel:unassigned:StakeDistribution] :: StakeDistribution -> Quantity "lovelace" Word64
poolIdBytesLength :: Int

-- | Represents a sort order, applicable to the results returned by a
--   query.
data SortOrder

-- | Sort in ascending order.
Ascending :: SortOrder

-- | Sort in descending order.
Descending :: SortOrder

-- | Represents a range of values.
--   
--   A range is defined by two <i>optional</i> bounds:
--   
--   <ol>
--   <li>an <i>inclusive</i> lower bound</li>
--   <li>an <i>inclusive</i> upper bound</li>
--   </ol>
--   
--   There are four cases:
--   
--   TODO: table
data Range a
Range :: Maybe a -> Maybe a -> Range a
[$sel:inclusiveLowerBound:Range] :: Range a -> Maybe a
[$sel:inclusiveUpperBound:Range] :: Range a -> Maybe a

-- | Represents a range boundary.
data RangeBound a
NegativeInfinity :: RangeBound a
InclusiveBound :: a -> RangeBound a
PositiveInfinity :: RangeBound a

-- | The range that includes everything.
wholeRange :: Range a

-- | Returns <a>True</a> if (and only if) the given range has an upper
--   bound and the specified value is greater than the upper bound.
isAfterRange :: Ord a => a -> Range a -> Bool

-- | Returns <a>True</a> if (and only if) the given range has a lower bound
--   and the specified value is smaller than the lower bound.
isBeforeRange :: Ord a => a -> Range a -> Bool

-- | Returns <a>True</a> if (and only if) the first given range is a
--   subrange of the second given range.
isSubrangeOf :: Ord a => Range a -> Range a -> Bool

-- | Returns <a>True</a> if (and only if) the given value is not smaller
--   than the lower bound (if present) of the given range and is not
--   greater than the upper bound (if present) of the given range.
isWithinRange :: Ord a => a -> Range a -> Bool

-- | Apply a function to the lower bound of a range.
mapRangeLowerBound :: (a -> a) -> Range a -> Range a

-- | Apply a function to the upper bound of a range.
mapRangeUpperBound :: (a -> a) -> Range a -> Range a

-- | Returns <a>True</a> if (and only if) the given range has both a lower
--   and upper bound.
rangeIsFinite :: Range a -> Bool

-- | Returns <a>True</a> if (and only if) the range covers exactly one
--   value.
rangeIsSingleton :: Eq a => Range a -> Bool

-- | Returns <a>True</a> if (and only if) the lower bound of a range is not
--   greater than its upper bound.
rangeIsValid :: Ord a => Range a -> Bool

-- | Returns <a>True</a> if (and only if) the given range has a lower
--   bound.
rangeHasLowerBound :: Range a -> Bool

-- | Returns <a>True</a> if (and only if) the given range has an upper
--   bound.
rangeHasUpperBound :: Range a -> Bool

-- | Get the lower bound of a <a>Range</a>.
rangeLowerBound :: Range a -> RangeBound a

-- | Get the upper bound of a <a>Range</a>.
rangeUpperBound :: Range a -> RangeBound a

-- | Magic constant associated to a given network
newtype ProtocolMagic
ProtocolMagic :: Int32 -> ProtocolMagic
newtype Hash (tag :: Symbol)
Hash :: ByteString -> Hash
[$sel:getHash:Hash] :: Hash -> ByteString

-- | A polymorphic wrapper type with a custom show instance to display data
--   through <a>Buildable</a> instances.
newtype ShowFmt a
ShowFmt :: a -> ShowFmt a
[$sel:unShowFmt:ShowFmt] :: ShowFmt a -> a

-- | Checks whether or not an invariant holds, by applying the given
--   predicate to the given value.
--   
--   If the invariant does not hold (indicated by the predicate function
--   returning <a>False</a>), throws an error with the specified message.
--   
--   <pre>
--   &gt;&gt;&gt; invariant "not empty" [1,2,3] (not . null)
--   [1, 2, 3]
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; invariant "not empty" [] (not . null)
--   *** Exception: not empty
--   </pre>
invariant :: String -> a -> (a -> Bool) -> a

-- | Compute distance between two numeric values |a - b|
distance :: (Ord a, Num a) => a -> a -> a
instance GHC.Classes.Ord a => GHC.Classes.Ord (Cardano.Wallet.Primitive.Types.ShowFmt a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (Cardano.Wallet.Primitive.Types.ShowFmt a)
instance GHC.Generics.Generic (Cardano.Wallet.Primitive.Types.ShowFmt a)
instance GHC.Generics.Generic Cardano.Wallet.Primitive.Types.Block
instance GHC.Classes.Ord Cardano.Wallet.Primitive.Types.Block
instance GHC.Classes.Eq Cardano.Wallet.Primitive.Types.Block
instance GHC.Show.Show Cardano.Wallet.Primitive.Types.Block
instance GHC.Generics.Generic Cardano.Wallet.Primitive.Types.BlockHeader
instance GHC.Classes.Ord Cardano.Wallet.Primitive.Types.BlockHeader
instance GHC.Classes.Eq Cardano.Wallet.Primitive.Types.BlockHeader
instance GHC.Show.Show Cardano.Wallet.Primitive.Types.BlockHeader
instance GHC.Classes.Eq Cardano.Wallet.Primitive.Types.Tx
instance GHC.Classes.Ord Cardano.Wallet.Primitive.Types.Tx
instance GHC.Generics.Generic Cardano.Wallet.Primitive.Types.Tx
instance GHC.Show.Show Cardano.Wallet.Primitive.Types.Tx
instance GHC.Classes.Ord Cardano.Wallet.Primitive.Types.TransactionInfo
instance GHC.Classes.Eq Cardano.Wallet.Primitive.Types.TransactionInfo
instance GHC.Show.Show Cardano.Wallet.Primitive.Types.TransactionInfo
instance GHC.Base.Monoid Cardano.Wallet.Primitive.Types.UTxO
instance GHC.Base.Semigroup Cardano.Wallet.Primitive.Types.UTxO
instance GHC.Classes.Ord Cardano.Wallet.Primitive.Types.UTxO
instance GHC.Classes.Eq Cardano.Wallet.Primitive.Types.UTxO
instance GHC.Generics.Generic Cardano.Wallet.Primitive.Types.UTxO
instance GHC.Show.Show Cardano.Wallet.Primitive.Types.UTxO
instance GHC.Classes.Ord Cardano.Wallet.Primitive.Types.TxIn
instance GHC.Classes.Eq Cardano.Wallet.Primitive.Types.TxIn
instance GHC.Generics.Generic Cardano.Wallet.Primitive.Types.TxIn
instance GHC.Show.Show Cardano.Wallet.Primitive.Types.TxIn
instance GHC.Classes.Ord (Cardano.Wallet.Primitive.Types.Hash tag)
instance GHC.Classes.Eq (Cardano.Wallet.Primitive.Types.Hash tag)
instance GHC.Generics.Generic (Cardano.Wallet.Primitive.Types.Hash tag)
instance GHC.Show.Show (Cardano.Wallet.Primitive.Types.Hash tag)
instance GHC.Classes.Eq Cardano.Wallet.Primitive.Types.ChimericAccount
instance GHC.Show.Show Cardano.Wallet.Primitive.Types.ChimericAccount
instance GHC.Generics.Generic Cardano.Wallet.Primitive.Types.ChimericAccount
instance GHC.Show.Show Cardano.Wallet.Primitive.Types.ProtocolMagic
instance GHC.Generics.Generic Cardano.Wallet.Primitive.Types.ProtocolMagic
instance GHC.Show.Show Cardano.Wallet.Primitive.Types.SlotParameters
instance GHC.Generics.Generic Cardano.Wallet.Primitive.Types.SlotParameters
instance GHC.Classes.Eq Cardano.Wallet.Primitive.Types.SlotParameters
instance GHC.Generics.Generic Cardano.Wallet.Primitive.Types.StartTime
instance GHC.Classes.Ord Cardano.Wallet.Primitive.Types.StartTime
instance GHC.Classes.Eq Cardano.Wallet.Primitive.Types.StartTime
instance GHC.Show.Show Cardano.Wallet.Primitive.Types.StartTime
instance GHC.Generics.Generic Cardano.Wallet.Primitive.Types.EpochLength
instance GHC.Classes.Eq Cardano.Wallet.Primitive.Types.EpochLength
instance GHC.Show.Show Cardano.Wallet.Primitive.Types.EpochLength
instance GHC.Generics.Generic Cardano.Wallet.Primitive.Types.SlotLength
instance GHC.Classes.Eq Cardano.Wallet.Primitive.Types.SlotLength
instance GHC.Show.Show Cardano.Wallet.Primitive.Types.SlotLength
instance GHC.Show.Show Cardano.Wallet.Primitive.Types.SyncTolerance
instance GHC.Classes.Eq Cardano.Wallet.Primitive.Types.SyncTolerance
instance GHC.Generics.Generic Cardano.Wallet.Primitive.Types.SyncTolerance
instance GHC.Show.Show Cardano.Wallet.Primitive.Types.SyncProgress
instance GHC.Classes.Eq Cardano.Wallet.Primitive.Types.SyncProgress
instance GHC.Generics.Generic Cardano.Wallet.Primitive.Types.SyncProgress
instance GHC.Generics.Generic Cardano.Wallet.Primitive.Types.TxMeta
instance GHC.Classes.Ord Cardano.Wallet.Primitive.Types.TxMeta
instance GHC.Classes.Eq Cardano.Wallet.Primitive.Types.TxMeta
instance GHC.Show.Show Cardano.Wallet.Primitive.Types.TxMeta
instance GHC.Generics.Generic Cardano.Wallet.Primitive.Types.SlotId
instance GHC.Classes.Ord Cardano.Wallet.Primitive.Types.SlotId
instance GHC.Classes.Eq Cardano.Wallet.Primitive.Types.SlotId
instance GHC.Read.Read Cardano.Wallet.Primitive.Types.SlotId
instance GHC.Show.Show Cardano.Wallet.Primitive.Types.SlotId
instance GHC.Enum.Enum Cardano.Wallet.Primitive.Types.EpochNo
instance Control.DeepSeq.NFData Cardano.Wallet.Primitive.Types.EpochNo
instance Formatting.Buildable.Buildable Cardano.Wallet.Primitive.Types.EpochNo
instance GHC.Num.Num Cardano.Wallet.Primitive.Types.EpochNo
instance GHC.Generics.Generic Cardano.Wallet.Primitive.Types.EpochNo
instance GHC.Classes.Ord Cardano.Wallet.Primitive.Types.EpochNo
instance GHC.Classes.Eq Cardano.Wallet.Primitive.Types.EpochNo
instance GHC.Read.Read Cardano.Wallet.Primitive.Types.EpochNo
instance GHC.Show.Show Cardano.Wallet.Primitive.Types.EpochNo
instance GHC.Enum.Enum Cardano.Wallet.Primitive.Types.SlotNo
instance Control.DeepSeq.NFData Cardano.Wallet.Primitive.Types.SlotNo
instance Formatting.Buildable.Buildable Cardano.Wallet.Primitive.Types.SlotNo
instance GHC.Num.Num Cardano.Wallet.Primitive.Types.SlotNo
instance GHC.Generics.Generic Cardano.Wallet.Primitive.Types.SlotNo
instance GHC.Classes.Ord Cardano.Wallet.Primitive.Types.SlotNo
instance GHC.Classes.Eq Cardano.Wallet.Primitive.Types.SlotNo
instance GHC.Read.Read Cardano.Wallet.Primitive.Types.SlotNo
instance GHC.Show.Show Cardano.Wallet.Primitive.Types.SlotNo
instance GHC.Classes.Ord Cardano.Wallet.Primitive.Types.UTxOStatistics
instance GHC.Generics.Generic Cardano.Wallet.Primitive.Types.UTxOStatistics
instance GHC.Show.Show Cardano.Wallet.Primitive.Types.UTxOStatistics
instance GHC.Generics.Generic Cardano.Wallet.Primitive.Types.BoundType
instance GHC.Classes.Ord Cardano.Wallet.Primitive.Types.BoundType
instance GHC.Show.Show Cardano.Wallet.Primitive.Types.BoundType
instance GHC.Classes.Eq Cardano.Wallet.Primitive.Types.BoundType
instance GHC.Generics.Generic Cardano.Wallet.Primitive.Types.HistogramBar
instance GHC.Classes.Ord Cardano.Wallet.Primitive.Types.HistogramBar
instance GHC.Classes.Eq Cardano.Wallet.Primitive.Types.HistogramBar
instance GHC.Show.Show Cardano.Wallet.Primitive.Types.HistogramBar
instance GHC.Classes.Ord Cardano.Wallet.Primitive.Types.TxOut
instance GHC.Classes.Eq Cardano.Wallet.Primitive.Types.TxOut
instance GHC.Generics.Generic Cardano.Wallet.Primitive.Types.TxOut
instance GHC.Show.Show Cardano.Wallet.Primitive.Types.TxOut
instance GHC.Generics.Generic Cardano.Wallet.Primitive.Types.Coin
instance GHC.Classes.Eq Cardano.Wallet.Primitive.Types.Coin
instance GHC.Classes.Ord Cardano.Wallet.Primitive.Types.Coin
instance GHC.Show.Show Cardano.Wallet.Primitive.Types.Coin
instance GHC.Show.Show Cardano.Wallet.Primitive.Types.AddressState
instance GHC.Generics.Generic Cardano.Wallet.Primitive.Types.AddressState
instance GHC.Classes.Eq Cardano.Wallet.Primitive.Types.AddressState
instance GHC.Enum.Enum Cardano.Wallet.Primitive.Types.AddressState
instance GHC.Enum.Bounded Cardano.Wallet.Primitive.Types.AddressState
instance GHC.Classes.Ord Cardano.Wallet.Primitive.Types.Address
instance GHC.Classes.Eq Cardano.Wallet.Primitive.Types.Address
instance GHC.Generics.Generic Cardano.Wallet.Primitive.Types.Address
instance GHC.Show.Show Cardano.Wallet.Primitive.Types.Address
instance GHC.Generics.Generic Cardano.Wallet.Primitive.Types.FeePolicy
instance GHC.Show.Show Cardano.Wallet.Primitive.Types.FeePolicy
instance GHC.Classes.Eq Cardano.Wallet.Primitive.Types.FeePolicy
instance GHC.Classes.Ord Cardano.Wallet.Primitive.Types.TxWitness
instance GHC.Classes.Eq Cardano.Wallet.Primitive.Types.TxWitness
instance GHC.Show.Show Cardano.Wallet.Primitive.Types.TxWitness
instance GHC.Generics.Generic Cardano.Wallet.Primitive.Types.TxWitness
instance GHC.Generics.Generic Cardano.Wallet.Primitive.Types.Direction
instance GHC.Classes.Ord Cardano.Wallet.Primitive.Types.Direction
instance GHC.Classes.Eq Cardano.Wallet.Primitive.Types.Direction
instance GHC.Enum.Enum Cardano.Wallet.Primitive.Types.Direction
instance GHC.Enum.Bounded Cardano.Wallet.Primitive.Types.Direction
instance GHC.Show.Show Cardano.Wallet.Primitive.Types.Direction
instance GHC.Generics.Generic Cardano.Wallet.Primitive.Types.TxStatus
instance GHC.Enum.Enum Cardano.Wallet.Primitive.Types.TxStatus
instance GHC.Enum.Bounded Cardano.Wallet.Primitive.Types.TxStatus
instance GHC.Classes.Ord Cardano.Wallet.Primitive.Types.TxStatus
instance GHC.Classes.Eq Cardano.Wallet.Primitive.Types.TxStatus
instance GHC.Show.Show Cardano.Wallet.Primitive.Types.TxStatus
instance GHC.Generics.Generic Cardano.Wallet.Primitive.Types.StakeDistribution
instance GHC.Show.Show Cardano.Wallet.Primitive.Types.StakeDistribution
instance GHC.Classes.Eq Cardano.Wallet.Primitive.Types.StakeDistribution
instance GHC.Generics.Generic Cardano.Wallet.Primitive.Types.WalletMetadata
instance GHC.Show.Show Cardano.Wallet.Primitive.Types.WalletMetadata
instance GHC.Classes.Eq Cardano.Wallet.Primitive.Types.WalletMetadata
instance GHC.Classes.Ord Cardano.Wallet.Primitive.Types.PoolId
instance GHC.Show.Show Cardano.Wallet.Primitive.Types.PoolId
instance GHC.Classes.Eq Cardano.Wallet.Primitive.Types.PoolId
instance GHC.Generics.Generic Cardano.Wallet.Primitive.Types.PoolId
instance GHC.Classes.Ord a => GHC.Classes.Ord (Cardano.Wallet.Primitive.Types.RangeBound a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (Cardano.Wallet.Primitive.Types.RangeBound a)
instance GHC.Show.Show a => GHC.Show.Show (Cardano.Wallet.Primitive.Types.Range a)
instance GHC.Base.Functor Cardano.Wallet.Primitive.Types.Range
instance GHC.Classes.Eq a => GHC.Classes.Eq (Cardano.Wallet.Primitive.Types.Range a)
instance GHC.Show.Show Cardano.Wallet.Primitive.Types.SortOrder
instance GHC.Generics.Generic Cardano.Wallet.Primitive.Types.SortOrder
instance GHC.Classes.Eq Cardano.Wallet.Primitive.Types.SortOrder
instance GHC.Enum.Enum Cardano.Wallet.Primitive.Types.SortOrder
instance GHC.Enum.Bounded Cardano.Wallet.Primitive.Types.SortOrder
instance GHC.Show.Show Cardano.Wallet.Primitive.Types.WalletBalance
instance GHC.Generics.Generic Cardano.Wallet.Primitive.Types.WalletBalance
instance GHC.Classes.Eq Cardano.Wallet.Primitive.Types.WalletBalance
instance GHC.Show.Show Cardano.Wallet.Primitive.Types.WalletPassphraseInfo
instance GHC.Classes.Ord Cardano.Wallet.Primitive.Types.WalletPassphraseInfo
instance GHC.Classes.Eq Cardano.Wallet.Primitive.Types.WalletPassphraseInfo
instance GHC.Generics.Generic Cardano.Wallet.Primitive.Types.WalletPassphraseInfo
instance GHC.Show.Show poolId => GHC.Show.Show (Cardano.Wallet.Primitive.Types.WalletDelegation poolId)
instance GHC.Classes.Eq poolId => GHC.Classes.Eq (Cardano.Wallet.Primitive.Types.WalletDelegation poolId)
instance GHC.Generics.Generic (Cardano.Wallet.Primitive.Types.WalletDelegation poolId)
instance GHC.Show.Show Cardano.Wallet.Primitive.Types.WalletId
instance GHC.Classes.Ord Cardano.Wallet.Primitive.Types.WalletId
instance GHC.Classes.Eq Cardano.Wallet.Primitive.Types.WalletId
instance GHC.Generics.Generic Cardano.Wallet.Primitive.Types.WalletId
instance GHC.Show.Show Cardano.Wallet.Primitive.Types.WalletName
instance GHC.Classes.Eq Cardano.Wallet.Primitive.Types.WalletName
instance GHC.Generics.Generic Cardano.Wallet.Primitive.Types.WalletName
instance GHC.Base.Functor Cardano.Wallet.Primitive.Types.WalletDelegation
instance Control.DeepSeq.NFData a => Control.DeepSeq.NFData (Cardano.Wallet.Primitive.Types.ShowFmt a)
instance Formatting.Buildable.Buildable a => GHC.Show.Show (Cardano.Wallet.Primitive.Types.ShowFmt a)
instance Control.DeepSeq.NFData Cardano.Wallet.Primitive.Types.Block
instance Formatting.Buildable.Buildable Cardano.Wallet.Primitive.Types.Block
instance Control.DeepSeq.NFData Cardano.Wallet.Primitive.Types.BlockHeader
instance Formatting.Buildable.Buildable Cardano.Wallet.Primitive.Types.BlockHeader
instance Control.DeepSeq.NFData Cardano.Wallet.Primitive.Types.Tx
instance Formatting.Buildable.Buildable Cardano.Wallet.Primitive.Types.Tx
instance Control.DeepSeq.NFData Cardano.Wallet.Primitive.Types.UTxO
instance Cardano.Wallet.Primitive.Types.Dom Cardano.Wallet.Primitive.Types.UTxO
instance Formatting.Buildable.Buildable Cardano.Wallet.Primitive.Types.UTxO
instance Control.DeepSeq.NFData Cardano.Wallet.Primitive.Types.TxIn
instance Formatting.Buildable.Buildable Cardano.Wallet.Primitive.Types.TxIn
instance Formatting.Buildable.Buildable (Cardano.Wallet.Primitive.Types.TxIn, Cardano.Wallet.Primitive.Types.TxOut)
instance Control.DeepSeq.NFData (Cardano.Wallet.Primitive.Types.Hash tag)
instance Formatting.Buildable.Buildable (Cardano.Wallet.Primitive.Types.Hash tag)
instance Data.Text.Class.ToText (Cardano.Wallet.Primitive.Types.Hash tag)
instance Data.Text.Class.FromText (Cardano.Wallet.Primitive.Types.Hash "Tx")
instance Data.Text.Class.FromText (Cardano.Wallet.Primitive.Types.Hash "Account")
instance Data.Text.Class.FromText (Cardano.Wallet.Primitive.Types.Hash "Genesis")
instance Data.Text.Class.FromText (Cardano.Wallet.Primitive.Types.Hash "Block")
instance Data.Text.Class.FromText (Cardano.Wallet.Primitive.Types.Hash "BlockHeader")
instance Control.DeepSeq.NFData Cardano.Wallet.Primitive.Types.ChimericAccount
instance Control.DeepSeq.NFData Cardano.Wallet.Primitive.Types.StartTime
instance Control.DeepSeq.NFData Cardano.Wallet.Primitive.Types.EpochLength
instance Control.DeepSeq.NFData Cardano.Wallet.Primitive.Types.SlotLength
instance Data.Text.Class.ToText Cardano.Wallet.Primitive.Types.SyncTolerance
instance Data.Text.Class.FromText Cardano.Wallet.Primitive.Types.SyncTolerance
instance Control.DeepSeq.NFData Cardano.Wallet.Primitive.Types.SyncProgress
instance GHC.Classes.Ord Cardano.Wallet.Primitive.Types.SyncProgress
instance Formatting.Buildable.Buildable Cardano.Wallet.Primitive.Types.SyncProgress
instance Control.DeepSeq.NFData Cardano.Wallet.Primitive.Types.TxMeta
instance Formatting.Buildable.Buildable Cardano.Wallet.Primitive.Types.TxMeta
instance Control.DeepSeq.NFData Cardano.Wallet.Primitive.Types.SlotId
instance Formatting.Buildable.Buildable Cardano.Wallet.Primitive.Types.SlotId
instance GHC.Classes.Eq Cardano.Wallet.Primitive.Types.UTxOStatistics
instance Formatting.Buildable.Buildable Cardano.Wallet.Primitive.Types.HistogramBar
instance Control.DeepSeq.NFData Cardano.Wallet.Primitive.Types.TxOut
instance Formatting.Buildable.Buildable Cardano.Wallet.Primitive.Types.TxOut
instance Control.DeepSeq.NFData Cardano.Wallet.Primitive.Types.Coin
instance GHC.Enum.Bounded Cardano.Wallet.Primitive.Types.Coin
instance Formatting.Buildable.Buildable Cardano.Wallet.Primitive.Types.Coin
instance Data.Text.Class.FromText Cardano.Wallet.Primitive.Types.AddressState
instance Data.Text.Class.ToText Cardano.Wallet.Primitive.Types.AddressState
instance Control.DeepSeq.NFData Cardano.Wallet.Primitive.Types.Address
instance Formatting.Buildable.Buildable Cardano.Wallet.Primitive.Types.Address
instance Data.Text.Class.ToText Cardano.Wallet.Primitive.Types.Address
instance Data.Text.Class.FromText Cardano.Wallet.Primitive.Types.Address
instance Control.DeepSeq.NFData Cardano.Wallet.Primitive.Types.FeePolicy
instance Data.Text.Class.ToText Cardano.Wallet.Primitive.Types.FeePolicy
instance Data.Text.Class.FromText Cardano.Wallet.Primitive.Types.FeePolicy
instance Control.DeepSeq.NFData Cardano.Wallet.Primitive.Types.TxWitness
instance Control.DeepSeq.NFData Cardano.Wallet.Primitive.Types.Direction
instance Formatting.Buildable.Buildable Cardano.Wallet.Primitive.Types.Direction
instance Data.Text.Class.FromText Cardano.Wallet.Primitive.Types.Direction
instance Data.Text.Class.ToText Cardano.Wallet.Primitive.Types.Direction
instance Control.DeepSeq.NFData Cardano.Wallet.Primitive.Types.TxStatus
instance Formatting.Buildable.Buildable Cardano.Wallet.Primitive.Types.TxStatus
instance Data.Text.Class.FromText Cardano.Wallet.Primitive.Types.TxStatus
instance Data.Text.Class.ToText Cardano.Wallet.Primitive.Types.TxStatus
instance Control.DeepSeq.NFData Cardano.Wallet.Primitive.Types.WalletMetadata
instance Formatting.Buildable.Buildable Cardano.Wallet.Primitive.Types.WalletMetadata
instance Control.DeepSeq.NFData Cardano.Wallet.Primitive.Types.PoolId
instance Formatting.Buildable.Buildable Cardano.Wallet.Primitive.Types.PoolId
instance Data.Text.Class.ToText Cardano.Wallet.Primitive.Types.PoolId
instance Data.Text.Class.FromText Cardano.Wallet.Primitive.Types.PoolId
instance Data.Text.Class.ToText Cardano.Wallet.Primitive.Types.SortOrder
instance Data.Text.Class.FromText Cardano.Wallet.Primitive.Types.SortOrder
instance Control.DeepSeq.NFData Cardano.Wallet.Primitive.Types.WalletPassphraseInfo
instance Control.DeepSeq.NFData poolId => Control.DeepSeq.NFData (Cardano.Wallet.Primitive.Types.WalletDelegation poolId)
instance Formatting.Buildable.Buildable poolId => Formatting.Buildable.Buildable (Cardano.Wallet.Primitive.Types.WalletDelegation poolId)
instance Control.DeepSeq.NFData Cardano.Wallet.Primitive.Types.WalletId
instance Data.Text.Class.FromText Cardano.Wallet.Primitive.Types.WalletId
instance Data.Text.Class.ToText Cardano.Wallet.Primitive.Types.WalletId
instance Formatting.Buildable.Buildable Cardano.Wallet.Primitive.Types.WalletId
instance Control.DeepSeq.NFData Cardano.Wallet.Primitive.Types.WalletName
instance Data.Text.Class.FromText Cardano.Wallet.Primitive.Types.WalletName
instance Data.Text.Class.ToText Cardano.Wallet.Primitive.Types.WalletName
instance Formatting.Buildable.Buildable Cardano.Wallet.Primitive.Types.WalletName


-- | Provides the API of Coin Selection algorithm and Fee Calculation This
--   module contains the implementation of adjusting coin selection for a
--   fee. The sender pays for the fee and additional inputs are picked
--   randomly. For more information refer to:
--   <a>https://iohk.io/blog/self-organisation-in-coin-selection/</a>
module Cardano.Wallet.Primitive.CoinSelection
data CoinSelection
CoinSelection :: [(TxIn, TxOut)] -> [TxOut] -> [Coin] -> CoinSelection

-- | Picked inputs
[inputs] :: CoinSelection -> [(TxIn, TxOut)]

-- | Picked outputs
[outputs] :: CoinSelection -> [TxOut]

-- | Resulting changes
[change] :: CoinSelection -> [Coin]

-- | Calculate the sum of all input values
inputBalance :: CoinSelection -> Word64

-- | Calculate the sum of all output values
outputBalance :: CoinSelection -> Word64

-- | Calculate the sum of all output values
changeBalance :: CoinSelection -> Word64
data ErrCoinSelection e

-- | UTxO exhausted during input selection We record the balance of the
--   UTxO as well as the size of the payment we tried to make.
ErrNotEnoughMoney :: Word64 -> Word64 -> ErrCoinSelection e

-- | UTxO is not enough fragmented for the number of transaction outputs We
--   record the number of UTxO entries as well as the number of the outputs
--   of the transaction.
ErrUtxoNotEnoughFragmented :: Word64 -> Word64 -> ErrCoinSelection e

-- | When trying to construct a transaction, the max number of allowed
--   inputs was reached.
ErrMaximumInputsReached :: Word64 -> ErrCoinSelection e

-- | When trying to construct a transaction, the available inputs are
--   depleted even when UTxO is properly fragmented and with enough funds
--   to cover payment
ErrInputsDepleted :: ErrCoinSelection e

-- | Somewhat, we ended up generating an invalid coin selection because of
--   inputs passed down to the coin selection function, or because a target
--   backend has extra-limitations not covered by our coin selection
--   algorithm.
ErrInvalidSelection :: e -> ErrCoinSelection e
data CoinSelectionOptions e
CoinSelectionOptions :: (Word8 -> Word8) -> (CoinSelection -> Either e ()) -> CoinSelectionOptions e

-- | Maximum number of inputs allowed for a given number of outputs
[maximumNumberOfInputs] :: CoinSelectionOptions e -> Word8 -> Word8

-- | Returns any backend-specific error regarding coin selection
[validate] :: CoinSelectionOptions e -> CoinSelection -> Either e ()

-- | Shuffles a list of elements.
--   
--   <pre>
--   &gt;&gt;&gt; shuffle (outputs coinSel)
--   [...]
--   </pre>
shuffle :: [a] -> IO [a]
instance GHC.Classes.Eq e => GHC.Classes.Eq (Cardano.Wallet.Primitive.CoinSelection.ErrCoinSelection e)
instance GHC.Show.Show e => GHC.Show.Show (Cardano.Wallet.Primitive.CoinSelection.ErrCoinSelection e)
instance GHC.Generics.Generic (Cardano.Wallet.Primitive.CoinSelection.CoinSelectionOptions e)
instance GHC.Classes.Eq Cardano.Wallet.Primitive.CoinSelection.CoinSelection
instance GHC.Show.Show Cardano.Wallet.Primitive.CoinSelection.CoinSelection
instance GHC.Generics.Generic Cardano.Wallet.Primitive.CoinSelection.CoinSelection
instance GHC.Base.Semigroup Cardano.Wallet.Primitive.CoinSelection.CoinSelection
instance GHC.Base.Monoid Cardano.Wallet.Primitive.CoinSelection.CoinSelection
instance Formatting.Buildable.Buildable Cardano.Wallet.Primitive.CoinSelection.CoinSelection


-- | This module contains the implementation of largestFirst input
--   selection algorithm
module Cardano.Wallet.Primitive.CoinSelection.LargestFirst

-- | Largest-first input selection policy
largestFirst :: forall m e. Monad m => CoinSelectionOptions e -> NonEmpty TxOut -> UTxO -> ExceptT (ErrCoinSelection e) m (CoinSelection, UTxO)


-- | This module contains the implementation of random input selection
--   algorithm
module Cardano.Wallet.Primitive.CoinSelection.Random

-- | Random-Improve Algorithm
--   
--   <ol>
--   <li>Randomly select outputs from the UTxO until the payment value is
--   covered. (In the rare case that this fails because the maximum number
--   of transaction inputs has been exceeded, fall back on the
--   largest-first algorithm for this step.)</li>
--   <li>The algorithm first makes a random selection for each output from
--   the UTxO, processing the biggest output first and proceeding in a
--   descending order. If the selection is not successful largest-first
--   fallback kicks in. If the selection is successful for each output then
--   the improvement is tried for each selection, once again starting from
--   the selection made for the biggest output. The improvement is tried
--   for the next biggest output's selection. An output is considered an
--   improvement when:</li>
--   </ol>
--   
--   (a) It doesn’t exceed a specified upper limit. (b) Adding the new
--   output gets us closer to the ideal change value. (c) It doesn’t exceed
--   a maximum number of transaction inputs.
--   
--   This algorithm follows three principles:
--   
--   <pre>
--   **Self organisation principle 1**
--   Random selection has a high probability of picking dust outputs precisely
--   when there is a lot of dust in the UTxO.
--   </pre>
--   
--   <pre>
--   **Self organisation principle 2**
--   If for each payment request for value <tt>x</tt> we create a change output roughly
--   of the same value <tt>x</tt>, then we will end up with a lot of change outputs in
--   our UTxO of size <tt>x</tt> precisely when we have a lot of payment requests of
--   size <tt>x</tt>
--   </pre>
--   
--   <pre>
--   **Self organisation principle 3**
--   Searching the UTxO for additional entries to improve our change output is
--   only useful if the UTxO contains entries that are sufficiently small enough.
--   But precisely when the UTxO contains many small entries, it is less likely
--   that a randomly chosen UTxO entry will push the total above the upper bound
--   we set.
--   </pre>
random :: forall m e. MonadRandom m => CoinSelectionOptions e -> NonEmpty TxOut -> UTxO -> ExceptT (ErrCoinSelection e) m (CoinSelection, UTxO)


-- | Primitives for performing address derivation for some given schemes.
--   This is where most of the crypto happens in the wallet and, it is
--   quite important to ensure that the implementations match with other
--   Cardano wallets (like cardano-sl, Yoroi/Icarus, or cardano-cli)
--   
--   The actual implementations are in the following modules:
--   
--   <ul>
--   <li><a>Cardano.Wallet.Primitive.AddressDerivation.Shelley</a></li>
--   <li><a>Cardano.Wallet.Primitive.AddressDerivation.Byron</a></li>
--   </ul>
module Cardano.Wallet.Primitive.AddressDerivation

-- | Key Depth in the derivation path, according to BIP-0039 / BIP-0044
--   
--   <pre>
--   m | purpose' | cointype' | account' | change | address
--   </pre>
--   
--   We do not manipulate purpose, cointype and change paths directly, so
--   they are left out of the sum type.
data Depth
RootK :: Depth
AccountK :: Depth
AddressK :: Depth

-- | A derivation index, with phantom-types to disambiguate derivation
--   type.
--   
--   <pre>
--   let accountIx = Index 'Hardened 'AccountK
--   let addressIx = Index 'Soft 'AddressK
--   </pre>
newtype Index (derivationType :: DerivationType) (level :: Depth)
Index :: Word32 -> Index
[getIndex] :: Index -> Word32

-- | Marker for addresses type engaged. We want to handle three cases here.
--   The first two are pertinent to UTxO accounting and the last one
--   handles rewards from participation in staking. (a) external chain is
--   used for addresses that are part of the <tt>advertised</tt> targets of
--   a given transaction (b) internal change is for addresses used to
--   handle the change of a the transaction within a given wallet (c) the
--   addresses for a reward (chimeric) account
data AccountingStyle
UTxOExternal :: AccountingStyle
UTxOInternal :: AccountingStyle
MutableAccount :: AccountingStyle

-- | Type of derivation that should be used with the given indexes.
--   
--   In theory, we should only consider two derivation types: soft and
--   hard.
--   
--   However, historically, addresses in Cardano used to be generated
--   across the both soft and hard domain. We therefore introduce a
--   <a>WholeDomain</a> derivation type that is the exact union of
--   <a>Hardened</a> and <a>Soft</a>.
data DerivationType
Hardened :: DerivationType
Soft :: DerivationType
WholeDomain :: DerivationType

-- | An interface for doing hard derivations from the root private key
class HardDerivation (key :: Depth -> * -> *) where {
    type family AddressIndexDerivationType key :: DerivationType;
}

-- | Derives account private key from the given root private key, using
--   derivation scheme 2 (see <a>cardano-crypto</a> package for more
--   details).
--   
--   NOTE: The caller is expected to provide the corresponding passphrase
--   (and to have checked that the passphrase is valid). Providing a wrong
--   passphrase will not make the function fail but will instead, yield an
--   incorrect new key that doesn't belong to the wallet.
deriveAccountPrivateKey :: HardDerivation key => Passphrase "encryption" -> key  'RootK XPrv -> Index  'Hardened  'AccountK -> key  'AccountK XPrv

-- | Derives address private key from the given account private key, using
--   derivation scheme 2 (see <a>cardano-crypto</a> package for more
--   details).
--   
--   It is preferred to use <a>deriveAddressPublicKey</a> whenever possible
--   to avoid having to manipulate passphrases and private keys.
--   
--   NOTE: The caller is expected to provide the corresponding passphrase
--   (and to have checked that the passphrase is valid). Providing a wrong
--   passphrase will not make the function fail but will instead, yield an
--   incorrect new key that doesn't belong to the wallet.
deriveAddressPrivateKey :: HardDerivation key => Passphrase "encryption" -> key  'AccountK XPrv -> AccountingStyle -> Index (AddressIndexDerivationType key)  'AddressK -> key  'AddressK XPrv

-- | An interface for doing soft derivations from an account public key
class HardDerivation key => SoftDerivation (key :: Depth -> * -> *)

-- | Derives address public key from the given account public key, using
--   derivation scheme 2 (see <a>cardano-crypto</a> package for more
--   details).
--   
--   This is the preferred way of deriving new sequential address public
--   keys.
deriveAddressPublicKey :: SoftDerivation key => key  'AccountK XPub -> AccountingStyle -> Index  'Soft  'AddressK -> key  'AddressK XPub
data XPub
XPub :: !ByteString -> !ChainCode -> XPub
[xpubPublicKey] :: XPub -> !ByteString
[xpubChaincode] :: XPub -> !ChainCode
newtype ChainCode
ChainCode :: ByteString -> ChainCode
data XPrv
unXPub :: XPub -> ByteString
unXPrv :: XPrv -> ByteString
xprv :: ByteArrayAccess bin => bin -> Either String XPrv

-- | Encode a <a>ByteString</a> in base16
hex :: ByteArrayAccess bin => bin -> ByteString

-- | Decode a <a>ByteString</a> from base16
fromHex :: ByteArray bout => ByteString -> Either String bout

-- | Available network options.
data NetworkDiscriminant
Mainnet :: NetworkDiscriminant
Testnet :: NetworkDiscriminant
class NetworkDiscriminantVal (n :: NetworkDiscriminant)
networkDiscriminantVal :: NetworkDiscriminantVal n => NetworkDiscriminant

-- | Encoding of addresses for certain key types and backend targets.
class MkKeyFingerprint key => PaymentAddress (network :: NetworkDiscriminant) key

-- | Convert a public key to a payment <a>Address</a> valid for the given
--   network discrimination.
--   
--   Note that <a>paymentAddress</a> is ambiguous and requires therefore a
--   type application.
paymentAddress :: PaymentAddress network key => key  'AddressK XPub -> Address

-- | Lift a payment fingerprint back into an address.
liftPaymentFingerprint :: PaymentAddress network key => KeyFingerprint "payment" key -> Address
class PaymentAddress network key => DelegationAddress (network :: NetworkDiscriminant) key

-- | Convert a public key and a staking key to a delegation <a>Address</a>
--   valid for the given network discrimination. Funds sent to this address
--   will be delegated according to the delegation settings attached to the
--   delegation key.
--   
--   Note that <a>delegationAddress</a> is ambiguous and requires therefore
--   a type application.
delegationAddress :: DelegationAddress network key => key  'AddressK XPub -> key  'AddressK XPub -> Address
class WalletKey (key :: Depth -> * -> *)

-- | Re-encrypt a private key using a different passphrase.
--   
--   <ul>
--   <li>*Important**: This function doesn't check that the old passphrase
--   is correct! Caller is expected to have already checked that. Using an
--   incorrect passphrase here will lead to very bad thing.</li>
--   </ul>
changePassphrase :: WalletKey key => Passphrase "encryption-old" -> Passphrase "encryption-new" -> key depth XPrv -> key depth XPrv

-- | Extract the public key part of a private key.
publicKey :: WalletKey key => key depth XPrv -> key depth XPub

-- | Hash a public key to some other representation.
digest :: (WalletKey key, HashAlgorithm a) => key depth XPub -> Digest a

-- | Get a short, human-readable string descriptor that uniquely identifies
--   the specified key type.
keyTypeDescriptor :: WalletKey key => Proxy key -> String

-- | Unwrap the <a>WalletKey</a> to use the <a>XPrv</a> or <a>XPub</a>.
getRawKey :: WalletKey key => key depth raw -> raw

-- | Produce a fake address key of this scheme, for use in
--   <a>dummyAddress</a>.
dummyKey :: WalletKey key => key  'AddressK XPub

-- | Operations for saving a private key into a database, and restoring it
--   from a database. The keys should be encoded in hexadecimal strings.
class PersistPrivateKey (key :: * -> *)

-- | Convert a private key and its password hash into hexadecimal strings
--   suitable for storing in a text file or database column.
serializeXPrv :: PersistPrivateKey key => (key XPrv, Hash "encryption") -> (ByteString, ByteString)

-- | The reverse of <a>serializeXPrv</a>. This may fail if the inputs are
--   not valid hexadecimal strings, or if the key is of the wrong length.
unsafeDeserializeXPrv :: PersistPrivateKey key => (ByteString, ByteString) -> (key XPrv, Hash "encryption")

-- | Operations for saving a public key into a database, and restoring it
--   from a database. The keys should be encoded in hexadecimal strings.
class PersistPublicKey (key :: * -> *)

-- | Convert a private key and its password hash into hexadecimal strings
--   suitable for storing in a text file or database column.
serializeXPub :: PersistPublicKey key => key XPub -> ByteString

-- | Convert a public key into hexadecimal strings suitable for storing in
--   a text file or database column.
unsafeDeserializeXPub :: PersistPublicKey key => ByteString -> key XPub

-- | Produce <a>KeyFingerprint</a> for existing types. A fingerprint here
--   uniquely identifies part of an address. It can refer to either the
--   payment key or, if any, the delegation key of an address.
--   
--   The fingerprint obeys the following rules:
--   
--   <ul>
--   <li>If two addresses are the same, then they have the same
--   fingerprints</li>
--   <li>It is possible to lift the fingerprint back into an address</li>
--   </ul>
--   
--   This second rule pretty much fixes what can be chosen as a fingerprint
--   for various key types:
--   
--   <ol>
--   <li>For <tt>ByronKey</tt>, it can only be the address itself!</li>
--   <li>For <tt>ShelleyKey</tt>, then the "payment" fingerprint refers to
--   the payment key within a single or grouped address.</li>
--   </ol>
class MkKeyFingerprint (key :: Depth -> * -> *)
paymentKeyFingerprint :: MkKeyFingerprint key => Address -> Either (ErrMkKeyFingerprint key) (KeyFingerprint "payment" key)
delegationKeyFingerprint :: MkKeyFingerprint key => Address -> Either (ErrMkKeyFingerprint key) (Maybe (KeyFingerprint "delegation" key))
data ErrMkKeyFingerprint key
ErrInvalidAddress :: Address -> Proxy key -> ErrMkKeyFingerprint key

-- | Something that uniquely identifies a public key. Typically, a hash of
--   that key or the key itself.
newtype KeyFingerprint (s :: Symbol) key
KeyFingerprint :: ByteString -> KeyFingerprint key

-- | Produce a fake address of representative size for the target and key
--   type. This can be used in transaction size estimations.
--   
--   This function is ambiguous, like <a>paymentAddress</a>, and types need
--   to be applied.
dummyAddress :: forall network key. (PaymentAddress network key, WalletKey key) => Address

-- | An encapsulated passphrase. The inner format is free, but the wrapper
--   helps readability in function signatures.
newtype Passphrase (purpose :: Symbol)
Passphrase :: ScrubbedBytes -> Passphrase
class PassphraseMinLength (purpose :: Symbol)

-- | Minimal Length for a passphrase, for lack of better validations
passphraseMinLength :: PassphraseMinLength purpose => Proxy purpose -> Int
class PassphraseMaxLength (purpose :: Symbol)

-- | Maximum length for a passphrase
passphraseMaxLength :: PassphraseMaxLength purpose => Proxy purpose -> Int

-- | Create a passphrase from a mnemonic sentence. This class enables
--   caller to parse text list of variable length into mnemonic sentences.
--   
--   <pre>
--   &gt;&gt;&gt; fromMnemonic @'[12,15,18,21] @"generation" ["toilet", "curse", ... ]
--   Right (Passphrase &lt;ScrubbedBytes&gt;)
--   </pre>
--   
--   Note that the given <a>Nat</a>s **have** to be valid mnemonic sizes,
--   otherwise the underlying code won't even compile, with not-so-friendly
--   error messages.
class FromMnemonic (sz :: [Nat]) (purpose :: Symbol)
fromMnemonic :: FromMnemonic sz purpose => [Text] -> Either (FromMnemonicError sz) (Passphrase purpose)

-- | Error reported from trying to create a passphrase from a given
--   mnemonic
newtype FromMnemonicError (sz :: [Nat])
FromMnemonicError :: String -> FromMnemonicError
[getFromMnemonicError] :: FromMnemonicError -> String

-- | Indicate a failure when checking for a given <a>Passphrase</a> match
data ErrWrongPassphrase
ErrWrongPassphrase :: ErrWrongPassphrase

-- | Encrypt a <a>Passphrase</a> into a format that is suitable for storing
--   on disk
encryptPassphrase :: MonadRandom m => Passphrase purpose -> m (Hash purpose)

-- | Check whether a <a>Passphrase</a> matches with a stored <a>Hash</a>
checkPassphrase :: Passphrase purpose -> Hash purpose -> Either ErrWrongPassphrase ()
instance forall k (key :: k). GHC.Classes.Eq (Cardano.Wallet.Primitive.AddressDerivation.ErrMkKeyFingerprint key)
instance forall k (key :: k). GHC.Show.Show (Cardano.Wallet.Primitive.AddressDerivation.ErrMkKeyFingerprint key)
instance forall (s :: GHC.Types.Symbol) k (key :: k). GHC.Classes.Ord (Cardano.Wallet.Primitive.AddressDerivation.KeyFingerprint s key)
instance forall (s :: GHC.Types.Symbol) k (key :: k). GHC.Classes.Eq (Cardano.Wallet.Primitive.AddressDerivation.KeyFingerprint s key)
instance forall (s :: GHC.Types.Symbol) k (key :: k). GHC.Show.Show (Cardano.Wallet.Primitive.AddressDerivation.KeyFingerprint s key)
instance forall (s :: GHC.Types.Symbol) k (key :: k). GHC.Generics.Generic (Cardano.Wallet.Primitive.AddressDerivation.KeyFingerprint s key)
instance GHC.Enum.Enum Cardano.Wallet.Primitive.AddressDerivation.NetworkDiscriminant
instance GHC.Enum.Bounded Cardano.Wallet.Primitive.AddressDerivation.NetworkDiscriminant
instance GHC.Classes.Eq Cardano.Wallet.Primitive.AddressDerivation.NetworkDiscriminant
instance GHC.Show.Show Cardano.Wallet.Primitive.AddressDerivation.NetworkDiscriminant
instance GHC.Generics.Generic Cardano.Wallet.Primitive.AddressDerivation.NetworkDiscriminant
instance GHC.Classes.Eq Cardano.Wallet.Primitive.AddressDerivation.ErrWrongPassphrase
instance GHC.Show.Show Cardano.Wallet.Primitive.AddressDerivation.ErrWrongPassphrase
instance Formatting.Buildable.Buildable (Cardano.Wallet.Primitive.AddressDerivation.FromMnemonicError sz)
instance GHC.Show.Show (Cardano.Wallet.Primitive.AddressDerivation.FromMnemonicError sz)
instance GHC.Classes.Eq (Cardano.Wallet.Primitive.AddressDerivation.FromMnemonicError sz)
instance Control.DeepSeq.NFData (Cardano.Wallet.Primitive.AddressDerivation.Passphrase purpose)
instance GHC.Base.Monoid (Cardano.Wallet.Primitive.AddressDerivation.Passphrase purpose)
instance GHC.Base.Semigroup (Cardano.Wallet.Primitive.AddressDerivation.Passphrase purpose)
instance GHC.Show.Show (Cardano.Wallet.Primitive.AddressDerivation.Passphrase purpose)
instance GHC.Classes.Eq (Cardano.Wallet.Primitive.AddressDerivation.Passphrase purpose)
instance GHC.Classes.Ord (Cardano.Wallet.Primitive.AddressDerivation.Index derivationType level)
instance GHC.Classes.Eq (Cardano.Wallet.Primitive.AddressDerivation.Index derivationType level)
instance GHC.Show.Show (Cardano.Wallet.Primitive.AddressDerivation.Index derivationType level)
instance GHC.Generics.Generic (Cardano.Wallet.Primitive.AddressDerivation.Index derivationType level)
instance GHC.Enum.Bounded Cardano.Wallet.Primitive.AddressDerivation.AccountingStyle
instance GHC.Classes.Ord Cardano.Wallet.Primitive.AddressDerivation.AccountingStyle
instance GHC.Classes.Eq Cardano.Wallet.Primitive.AddressDerivation.AccountingStyle
instance GHC.Show.Show Cardano.Wallet.Primitive.AddressDerivation.AccountingStyle
instance GHC.Generics.Generic Cardano.Wallet.Primitive.AddressDerivation.AccountingStyle
instance forall k (s :: GHC.Types.Symbol) (key :: k). Control.DeepSeq.NFData (Cardano.Wallet.Primitive.AddressDerivation.KeyFingerprint s key)
instance Cardano.Wallet.Primitive.AddressDerivation.NetworkDiscriminantVal 'Cardano.Wallet.Primitive.AddressDerivation.Mainnet
instance Cardano.Wallet.Primitive.AddressDerivation.NetworkDiscriminantVal 'Cardano.Wallet.Primitive.AddressDerivation.Testnet
instance Control.DeepSeq.NFData Cardano.Wallet.Primitive.AddressDerivation.NetworkDiscriminant
instance Data.Text.Class.FromText Cardano.Wallet.Primitive.AddressDerivation.NetworkDiscriminant
instance Data.Text.Class.ToText Cardano.Wallet.Primitive.AddressDerivation.NetworkDiscriminant
instance (n Data.Type.Equality.~ Crypto.Encoding.BIP39.EntropySize mw, csz Data.Type.Equality.~ Crypto.Encoding.BIP39.CheckSumBits n, Crypto.Encoding.BIP39.ConsistentEntropy n mw csz, Cardano.Wallet.Primitive.AddressDerivation.FromMnemonic rest purpose, Cardano.Wallet.Primitive.AddressDerivation.NatVals rest) => Cardano.Wallet.Primitive.AddressDerivation.FromMnemonic (mw : rest) purpose
instance Cardano.Wallet.Primitive.AddressDerivation.NatVals '[]
instance (GHC.TypeNats.KnownNat n, Cardano.Wallet.Primitive.AddressDerivation.NatVals rest) => Cardano.Wallet.Primitive.AddressDerivation.NatVals (n : rest)
instance (n Data.Type.Equality.~ Crypto.Encoding.BIP39.EntropySize mw, csz Data.Type.Equality.~ Crypto.Encoding.BIP39.CheckSumBits n, Crypto.Encoding.BIP39.ConsistentEntropy n mw csz) => Cardano.Wallet.Primitive.AddressDerivation.FromMnemonic '[mw] purpose
instance Cardano.Wallet.Primitive.AddressDerivation.PassphraseMaxLength "encryption"
instance Cardano.Wallet.Primitive.AddressDerivation.PassphraseMaxLength "encryption-old"
instance Cardano.Wallet.Primitive.AddressDerivation.PassphraseMaxLength "encryption-new"
instance (Cardano.Wallet.Primitive.AddressDerivation.PassphraseMaxLength purpose, Cardano.Wallet.Primitive.AddressDerivation.PassphraseMinLength purpose) => Data.Text.Class.FromText (Cardano.Wallet.Primitive.AddressDerivation.Passphrase purpose)
instance Cardano.Wallet.Primitive.AddressDerivation.PassphraseMinLength "encryption"
instance Cardano.Wallet.Primitive.AddressDerivation.PassphraseMinLength "encryption-old"
instance Cardano.Wallet.Primitive.AddressDerivation.PassphraseMinLength "encryption-new"
instance Data.Text.Class.ToText (Cardano.Wallet.Primitive.AddressDerivation.Passphrase purpose)
instance Crypto.Random.Types.MonadRandom ((->) (Cardano.Wallet.Primitive.AddressDerivation.Passphrase "salt"))
instance Control.DeepSeq.NFData (Cardano.Wallet.Primitive.AddressDerivation.Index derivationType level)
instance GHC.Enum.Bounded (Cardano.Wallet.Primitive.AddressDerivation.Index 'Cardano.Wallet.Primitive.AddressDerivation.Hardened level)
instance GHC.Enum.Bounded (Cardano.Wallet.Primitive.AddressDerivation.Index 'Cardano.Wallet.Primitive.AddressDerivation.Soft level)
instance GHC.Enum.Bounded (Cardano.Wallet.Primitive.AddressDerivation.Index 'Cardano.Wallet.Primitive.AddressDerivation.WholeDomain level)
instance GHC.Enum.Enum (Cardano.Wallet.Primitive.AddressDerivation.Index 'Cardano.Wallet.Primitive.AddressDerivation.Hardened level)
instance GHC.Enum.Enum (Cardano.Wallet.Primitive.AddressDerivation.Index 'Cardano.Wallet.Primitive.AddressDerivation.Soft level)
instance GHC.Enum.Enum (Cardano.Wallet.Primitive.AddressDerivation.Index 'Cardano.Wallet.Primitive.AddressDerivation.WholeDomain level)
instance Formatting.Buildable.Buildable (Cardano.Wallet.Primitive.AddressDerivation.Index derivationType level)
instance Control.DeepSeq.NFData Cardano.Wallet.Primitive.AddressDerivation.AccountingStyle
instance GHC.Enum.Enum Cardano.Wallet.Primitive.AddressDerivation.AccountingStyle
instance Data.Text.Class.ToText Cardano.Wallet.Primitive.AddressDerivation.AccountingStyle
instance Data.Text.Class.FromText Cardano.Wallet.Primitive.AddressDerivation.AccountingStyle


-- | An extra interface for operation on transactions (e.g. creating
--   witnesses, estimating size...). This makes it possible to decouple
--   those operations from our wallet layer, keeping the implementation
--   flexible to various backends.
module Cardano.Wallet.Transaction
data TransactionLayer t k
TransactionLayer :: ((Address -> Maybe (k  'AddressK XPrv, Passphrase "encryption")) -> [(TxIn, TxOut)] -> [TxOut] -> Either ErrMkStdTx (Tx, [TxWitness])) -> (CoinSelection -> Quantity "byte" Int) -> (Quantity "byte" Word16 -> Word8 -> Word8) -> (CoinSelection -> Either (ErrValidateSelection t) ()) -> (ByteString -> Either ErrDecodeSignedTx (Tx, [TxWitness])) -> TransactionLayer t k

-- | Construct a standard transaction
--   
--   " Standard " here refers to the fact that we do not deal with
--   redemption, multisignature transactions, etc.
--   
--   This expects as a first argument a mean to compute or lookup private
--   key corresponding to a particular address.
[mkStdTx] :: TransactionLayer t k -> (Address -> Maybe (k  'AddressK XPrv, Passphrase "encryption")) -> [(TxIn, TxOut)] -> [TxOut] -> Either ErrMkStdTx (Tx, [TxWitness])

-- | Estimate the size of a <a>CoinSelection</a>, in bytes. This operation
--   is seemingly coupled to the binary representation of a
--   <tt>Transaction</tt>. This estimation is therefore only a best-effort
--   here as many of the encoding values actually depends on the value of
--   parameters at runtime.
--   
--   For instance, with a CBOR encoding, an amount of `50` lovelace would
--   be encoded using 2 bytes, whereas an amount of `1000000` would be
--   encoded using 4 bytes. In Byron, we have only one piece of unknown
--   from the <a>CoinSelection</a> and it's the value of the <tt>crc32</tt>
--   computed on the address payload, which can be 1,2,3 or 5 bytes and we
--   therefore always consider the worst-case scenario of a 5-byte crc. As
--   a consequence, our estimate may be slightly bigger than the actual
--   transaction fee (up-to 4 extra bytes per change output).
[estimateSize] :: TransactionLayer t k -> CoinSelection -> Quantity "byte" Int

-- | Calculate a "theoretical" maximum number of inputs given a maximum
--   transaction size and desired number of outputs.
--   
--   The actual transaction size cannot be known until it has been fully
--   determined by coin selection.
--   
--   This estimate will err on the side of permitting more inputs,
--   resulting in a transaction which may be too large.
[estimateMaxNumberOfInputs] :: TransactionLayer t k -> Quantity "byte" Word16 -> Word8 -> Word8

-- | Validate coin selection regarding rules that may be specific to a
--   particular backend implementation.
--   
--   For example, Byron nodes do not allow null output amounts. Jörmungandr
--   on its side doesn't support more than 255 inputs or outputs.
[validateSelection] :: TransactionLayer t k -> CoinSelection -> Either (ErrValidateSelection t) ()

-- | Decode an externally-signed transaction to the chain producer
[decodeSignedTx] :: TransactionLayer t k -> ByteString -> Either ErrDecodeSignedTx (Tx, [TxWitness])

-- | Possible signing error
newtype ErrMkStdTx

-- | We tried to sign a transaction with inputs that are unknown to us?
ErrKeyNotFoundForAddress :: Address -> ErrMkStdTx

-- | A type family for validations that are specific to a particular
--   backend type. This demands an instantiation of the family for a
--   particular backend:
--   
--   type instance (ErrValidateSelection MyBackend) = MyCustomError
type family ErrValidateSelection t

-- | Error while trying to decode externally signed transaction
data ErrDecodeSignedTx
ErrDecodeSignedTxWrongPayload :: Text -> ErrDecodeSignedTx
ErrDecodeSignedTxNotSupported :: ErrDecodeSignedTx

-- | This is called by the <a>TransactionLayer</a> implementation. It uses
--   the serialization functions to calculate the size of an empty
--   transaction compared to a transaction with one input. The estimation
--   is based on that.
--   
--   It doesn't account for transaction outputs, and assumes there is a
--   single Tx output.
--   
--   All the values used are the smaller ones. For example, the shortest
--   adress type and shortest witness type are chosen to use for the
--   estimate.
estimateMaxNumberOfInputsBase :: forall t n k. (PaymentAddress n k, WalletKey k) => EstimateMaxNumberOfInputsParams t -> Quantity "byte" Word16 -> Word8 -> Word8

-- | Backend-specific variables used by
--   <a>estimateMaxNumberOfInputsBase</a>.
data EstimateMaxNumberOfInputsParams t
EstimateMaxNumberOfInputsParams :: ([TxIn] -> [TxOut] -> [TxWitness] -> Int) -> Int -> Int -> EstimateMaxNumberOfInputsParams t

-- | Finds the size of a serialized transaction.
[estMeasureTx] :: EstimateMaxNumberOfInputsParams t -> [TxIn] -> [TxOut] -> [TxWitness] -> Int

-- | Block ID size
[estBlockHashSize] :: EstimateMaxNumberOfInputsParams t -> Int

-- | Tx Witness size
[estTxWitnessSize] :: EstimateMaxNumberOfInputsParams t -> Int
instance GHC.Show.Show Cardano.Wallet.Transaction.ErrMkStdTx
instance GHC.Classes.Eq Cardano.Wallet.Transaction.ErrMkStdTx
instance GHC.Classes.Eq Cardano.Wallet.Transaction.ErrDecodeSignedTx
instance GHC.Show.Show Cardano.Wallet.Transaction.ErrDecodeSignedTx


-- | This module contains types for address discovery. The two address
--   discovery schemes implemented are:
--   
--   <ul>
--   <li><a>Cardano.Wallet.Primitive.AddressDiscovery.Sequential</a></li>
--   <li><a>Cardano.Wallet.Primitive.AddressDiscovery.Random</a></li>
--   </ul>
module Cardano.Wallet.Primitive.AddressDiscovery

-- | This abstraction exists to give us the ability to keep the wallet
--   business logic agnostic to the address derivation and discovery
--   mechanisms.
--   
--   This is needed because two different address schemes lives on Cardano:
--   
--   <ul>
--   <li>A hierarchical random scheme: rather <tt>custom</tt> made, with
--   several flaws; this is the original and now legacy address
--   scheme.</li>
--   <li>A hierarchical sequential scheme: a new scheme based on the
--   BIP-0044 specification, which is better suited for our present
--   needs.</li>
--   </ul>
--   
--   In practice, we will need a wallet that can support both, even if not
--   at the same time, and this little abstraction can buy us this without
--   introducing too much overhead.
class IsOurs s
isOurs :: IsOurs s => Address -> s -> (Bool, s)

-- | More powerful than <a>isOurs</a>, this abstractions offer the
--   underlying state the ability to find / compute the address private key
--   corresponding to a given known address.
--   
--   Requiring <a>IsOwned</a> as a constraint supposed that there is a way
--   to recover the root private key of a particular wallet. This isn't
--   true for externally owned wallet which would delegate its key
--   management to a third party (like a hardware Ledger or Trezor).
class IsOurs s => IsOwned s key
isOwned :: IsOwned s key => s -> (key  'RootK XPrv, Passphrase "encryption") -> Address -> Maybe (key  'AddressK XPrv, Passphrase "encryption")

-- | Abstracting over change address generation. In theory, this is only
--   needed for sending transactions on a wallet following a particular
--   scheme. This abstractions allows for defining an heuristic to pick new
--   change address. For instance, in BIP-44, change addresses belong to a
--   particular change chain (also called "Internal Chain").
class GenChange s where {
    type family ArgGenChange s :: *;
}
genChange :: GenChange s => ArgGenChange s -> s -> (Address, s)

-- | Ordering addresses by discovery date.
--   
--   If <tt>a1</tt> has been discovered before <tt>a2</tt>, then the
--   following equation holds:
--   
--   <pre>
--   compareDiscovery s a1 a2 == LT
--   </pre>
--   
--   If <tt>a1</tt> has been discovered after <tt>a2</tt>, then the
--   following equation holds:
--   
--   <pre>
--   compareDiscovery s a1 a2 == GT
--   </pre>
--   
--   Note that, if an address isn't known it is considered not discovered
--   and therefore, is always _greater than_ any known address.
class CompareDiscovery s
compareDiscovery :: CompareDiscovery s => s -> Address -> Address -> Ordering

-- | Extract the list of all known addresses.
--   
--   NOTE: Change addresses aren't considered "known" until they've been
--   used. The rationale is that, we don't want users or consumers of the
--   wallet to be using change addresses prematurely.
class KnownAddresses s
knownAddresses :: KnownAddresses s => s -> [Address]


-- | An implementation of address discovery for the sequential address
--   derivation scheme specified in BIP-0044.
--   
--   The management of _accounts_ is left-out for this implementation
--   focuses on a single account. In practice, one wants to manage a set of
--   pools, one per account.
module Cardano.Wallet.Primitive.AddressDiscovery.Sequential

-- | Maximum number of consecutive undiscovered addresses allowed
data AddressPoolGap

-- | Possible errors when casting to an <a>AddressPoolGap</a>
newtype MkAddressPoolGapError
ErrGapOutOfRange :: Integer -> MkAddressPoolGapError

-- | A default <a>AddressPoolGap</a>, as suggested in BIP-0044
defaultAddressPoolGap :: AddressPoolGap
getAddressPoolGap :: AddressPoolGap -> Word8

-- | Smart constructor for <a>AddressPoolGap</a>
mkAddressPoolGap :: Integer -> Either MkAddressPoolGapError AddressPoolGap

-- | An <a>AddressPool</a> which keeps track of sequential addresses within
--   a given Account and change chain. See <a>mkAddressPool</a> to create a
--   new or existing pool:
--   
--   <pre>
--   &gt;&gt;&gt; mkAddressPool xpub gap accountingStyle mempty
--   AddressPool { }
--   </pre>
data AddressPool (network :: NetworkDiscriminant) (chain :: AccountingStyle) (key :: Depth -> * -> *)

-- | The actual gap for the pool. This can't change for a given pool.
gap :: AddressPool network chain key -> AddressPoolGap

-- | Get all addresses in the pool, sorted from the first address
--   discovered, up until the next one.
--   
--   In practice, we always have:
--   
--   <pre>
--   mkAddressPool key g cc (addresses pool) == pool
--   </pre>
addresses :: forall n c k. PaymentAddress n k => AddressPool n c k -> [Address]

-- | Bring a <a>AccountingStyle</a> type back to the term-level. This
--   requires a type application and either a scoped type variable, or an
--   explicit passing of a <a>AccountingStyle</a>.
--   
--   <pre>
--   &gt;&gt;&gt; accountingStyle @'UTxOExternal
--   UTxOExternal
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; accountingStyle @chain
--   ...
--   </pre>
accountingStyle :: forall (c :: AccountingStyle). Typeable c => AccountingStyle

-- | Corresponding key for the pool (a pool is tied to only one account)
accountPubKey :: AddressPool network chain key -> key  'AccountK XPub

-- | Create a new Address pool from a list of addresses. Note that, the
--   list is expected to be ordered in sequence (first indexes, first in
--   the list).
--   
--   The pool will grow from the start if less than <tt>g ::
--   AddressPoolGap</tt> are given, such that, there are always <tt>g</tt>
--   undiscovered addresses in the pool.
--   
--   FIXME: Don't construct from addresses but from fingerprints!
mkAddressPool :: forall n c k. (PaymentAddress n k, SoftDerivation k, Typeable c) => k  'AccountK XPub -> AddressPoolGap -> [Address] -> AddressPool n c k

-- | Lookup an address in the pool. When we find an address in a pool, the
--   pool may be amended if the address was discovered near the edge. It is
--   also possible that the pool is not amended at all - this happens in
--   the case that an address is discovered <tt>far</tt> from the edge.
lookupAddress :: forall n c k. (PaymentAddress n k, SoftDerivation k, Typeable c) => Address -> AddressPool n c k -> (Maybe (Index  'Soft  'AddressK), AddressPool n c k)

-- | An ordered set of pending indexes. This keep track of indexes used
data PendingIxs

-- | An empty pending set of change indexes.
--   
--   NOTE: We do not define a <a>Monoid</a> instance here because there's
--   no rational of combining two pending sets.
emptyPendingIxs :: PendingIxs
pendingIxsToList :: PendingIxs -> [Index  'Soft  'AddressK]

-- | Construct a <a>PendingIxs</a> from a list, ensuring that it is a set
--   of indexes in descending order.
pendingIxsFromList :: [Index  'Soft  'AddressK] -> PendingIxs

-- | A state to keep track of sequential addresses as described in
--   <a>BIP-44</a>
--   
--   Internally, the state keeps track of a few things for us and is it is
--   parameterized by a type <tt>n</tt> which captures a particular network
--   discrimination. This enables the state to be agnostic to the
--   underlying address format.
data SeqState n k
SeqState :: !AddressPool n  'UTxOInternal k -> !AddressPool n  'UTxOExternal k -> !PendingIxs -> SeqState n k

-- | Addresses living on the <a>UTxOInternal</a>
[internalPool] :: SeqState n k -> !AddressPool n  'UTxOInternal k

-- | Addresses living on the <a>UTxOExternal</a>
[externalPool] :: SeqState n k -> !AddressPool n  'UTxOExternal k

-- | Indexes from the internal pool that have been used in pending
--   transactions. The list is maintained sorted in descending order (cf:
--   <a>PendingIxs</a>)
[pendingChangeIxs] :: SeqState n k -> !PendingIxs

-- | Construct a Sequential state for a wallet.
mkSeqState :: forall n k. (SoftDerivation k, PaymentAddress n k, WalletKey k) => (k  'RootK XPrv, Passphrase "encryption") -> AddressPoolGap -> SeqState n k
instance GHC.Generics.Generic (Cardano.Wallet.Primitive.AddressDiscovery.Sequential.SeqState n k)
instance GHC.Classes.Eq Cardano.Wallet.Primitive.AddressDiscovery.Sequential.PendingIxs
instance GHC.Show.Show Cardano.Wallet.Primitive.AddressDiscovery.Sequential.PendingIxs
instance GHC.Generics.Generic Cardano.Wallet.Primitive.AddressDiscovery.Sequential.PendingIxs
instance GHC.Generics.Generic (Cardano.Wallet.Primitive.AddressDiscovery.Sequential.AddressPool network chain key)
instance GHC.Show.Show Cardano.Wallet.Primitive.AddressDiscovery.Sequential.MkAddressPoolGapError
instance GHC.Classes.Eq Cardano.Wallet.Primitive.AddressDiscovery.Sequential.MkAddressPoolGapError
instance GHC.Classes.Ord Cardano.Wallet.Primitive.AddressDiscovery.Sequential.AddressPoolGap
instance GHC.Classes.Eq Cardano.Wallet.Primitive.AddressDiscovery.Sequential.AddressPoolGap
instance GHC.Show.Show Cardano.Wallet.Primitive.AddressDiscovery.Sequential.AddressPoolGap
instance GHC.Generics.Generic Cardano.Wallet.Primitive.AddressDiscovery.Sequential.AddressPoolGap
instance GHC.Show.Show (key 'Cardano.Wallet.Primitive.AddressDerivation.AccountK Cardano.Crypto.Wallet.XPub) => GHC.Show.Show (Cardano.Wallet.Primitive.AddressDiscovery.Sequential.AddressPool network chain key)
instance GHC.Classes.Eq (key 'Cardano.Wallet.Primitive.AddressDerivation.AccountK Cardano.Crypto.Wallet.XPub) => GHC.Classes.Eq (Cardano.Wallet.Primitive.AddressDiscovery.Sequential.AddressPool network chain key)
instance (GHC.Show.Show (k 'Cardano.Wallet.Primitive.AddressDerivation.AccountK Cardano.Crypto.Wallet.XPub), GHC.Show.Show (Cardano.Wallet.Primitive.AddressDerivation.KeyFingerprint "payment" k)) => GHC.Show.Show (Cardano.Wallet.Primitive.AddressDiscovery.Sequential.SeqState n k)
instance (Control.DeepSeq.NFData (k 'Cardano.Wallet.Primitive.AddressDerivation.AccountK Cardano.Crypto.Wallet.XPub), Control.DeepSeq.NFData (Cardano.Wallet.Primitive.AddressDerivation.KeyFingerprint "payment" k)) => Control.DeepSeq.NFData (Cardano.Wallet.Primitive.AddressDiscovery.Sequential.SeqState n k)
instance Cardano.Wallet.Primitive.AddressDerivation.PersistPublicKey (k 'Cardano.Wallet.Primitive.AddressDerivation.AccountK) => Formatting.Buildable.Buildable (Cardano.Wallet.Primitive.AddressDiscovery.Sequential.SeqState n k)
instance (Cardano.Wallet.Primitive.AddressDerivation.SoftDerivation k, Cardano.Wallet.Primitive.AddressDerivation.PaymentAddress n k) => Cardano.Wallet.Primitive.AddressDiscovery.IsOurs (Cardano.Wallet.Primitive.AddressDiscovery.Sequential.SeqState n k)
instance (Cardano.Wallet.Primitive.AddressDerivation.SoftDerivation k, Cardano.Wallet.Primitive.AddressDerivation.PaymentAddress n k) => Cardano.Wallet.Primitive.AddressDiscovery.GenChange (Cardano.Wallet.Primitive.AddressDiscovery.Sequential.SeqState n k)
instance (Cardano.Wallet.Primitive.AddressDerivation.SoftDerivation k, Cardano.Wallet.Primitive.AddressDerivation.PaymentAddress n k, Cardano.Wallet.Primitive.AddressDerivation.AddressIndexDerivationType k Data.Type.Equality.~ 'Cardano.Wallet.Primitive.AddressDerivation.Soft) => Cardano.Wallet.Primitive.AddressDiscovery.IsOwned (Cardano.Wallet.Primitive.AddressDiscovery.Sequential.SeqState n k) k
instance (Cardano.Wallet.Primitive.AddressDerivation.PaymentAddress n k, Cardano.Wallet.Primitive.AddressDerivation.SoftDerivation k) => Cardano.Wallet.Primitive.AddressDiscovery.CompareDiscovery (Cardano.Wallet.Primitive.AddressDiscovery.Sequential.SeqState n k)
instance Cardano.Wallet.Primitive.AddressDerivation.PaymentAddress n k => Cardano.Wallet.Primitive.AddressDiscovery.KnownAddresses (Cardano.Wallet.Primitive.AddressDiscovery.Sequential.SeqState n k)
instance Control.DeepSeq.NFData Cardano.Wallet.Primitive.AddressDiscovery.Sequential.PendingIxs
instance Control.DeepSeq.NFData (key 'Cardano.Wallet.Primitive.AddressDerivation.AccountK Cardano.Crypto.Wallet.XPub) => Control.DeepSeq.NFData (Cardano.Wallet.Primitive.AddressDiscovery.Sequential.AddressPool network chain key)
instance (Cardano.Wallet.Primitive.AddressDerivation.PersistPublicKey (key 'Cardano.Wallet.Primitive.AddressDerivation.AccountK), Data.Typeable.Internal.Typeable chain) => Formatting.Buildable.Buildable (Cardano.Wallet.Primitive.AddressDiscovery.Sequential.AddressPool network chain key)
instance Data.Text.Class.FromText Cardano.Wallet.Primitive.AddressDiscovery.Sequential.AddressPoolGap
instance Control.DeepSeq.NFData Cardano.Wallet.Primitive.AddressDiscovery.Sequential.AddressPoolGap
instance Data.Text.Class.ToText Cardano.Wallet.Primitive.AddressDiscovery.Sequential.AddressPoolGap
instance GHC.Enum.Bounded Cardano.Wallet.Primitive.AddressDiscovery.Sequential.AddressPoolGap
instance GHC.Enum.Enum Cardano.Wallet.Primitive.AddressDiscovery.Sequential.AddressPoolGap


-- | Implementation of address derivation for the sequential schemes, as
--   implemented by Yoroi/Icarus and cardano-cli.
module Cardano.Wallet.Primitive.AddressDerivation.Shelley

-- | A cryptographic key for sequential-scheme address derivation, with
--   phantom-types to disambiguate key types.
--   
--   <pre>
--   let rootPrivateKey = ShelleyKey 'RootK XPrv
--   let accountPubKey = ShelleyKey 'AccountK XPub
--   let addressPubKey = ShelleyKey 'AddressK XPub
--   </pre>
newtype ShelleyKey (depth :: Depth) key
ShelleyKey :: key -> ShelleyKey key
[getKey] :: ShelleyKey key -> key

-- | The minimum seed length for <a>generateKeyFromSeed</a> and
--   <a>unsafeGenerateKeyFromSeed</a>.
minSeedLengthBytes :: Int

-- | Size, in bytes, of a public key (without chain code)
publicKeySize :: Int
addrSingleSize :: Int
addrGroupedSize :: Int

-- | Embed some constants into a network type.
class KnownNetwork (n :: NetworkDiscriminant)
single :: KnownNetwork n => Word8
grouped :: KnownNetwork n => Word8

-- | Generate a root key from a corresponding seed. The seed should be at
--   least 16 bytes.
generateKeyFromSeed :: (Passphrase "seed", Passphrase "generation") -> Passphrase "encryption" -> ShelleyKey  'RootK XPrv

-- | Generate a new key from seed. Note that the <tt>depth</tt> is left
--   open so that the caller gets to decide what type of key this is. This
--   is mostly for testing, in practice, seeds are used to represent root
--   keys, and one should use <a>generateKeyFromSeed</a>.
unsafeGenerateKeyFromSeed :: (Passphrase "seed", Passphrase "generation") -> Passphrase "encryption" -> ShelleyKey depth XPrv

-- | Verify the structure of a payload decoded from a Bech32 text string
decodeShelleyAddress :: forall n. (KnownNetwork n, NetworkDiscriminantVal n) => ByteString -> Either TextDecodingError Address
instance GHC.Classes.Eq key => GHC.Classes.Eq (Cardano.Wallet.Primitive.AddressDerivation.Shelley.ShelleyKey depth key)
instance GHC.Show.Show key => GHC.Show.Show (Cardano.Wallet.Primitive.AddressDerivation.Shelley.ShelleyKey depth key)
instance GHC.Generics.Generic (Cardano.Wallet.Primitive.AddressDerivation.Shelley.ShelleyKey depth key)
instance Cardano.Wallet.Primitive.AddressDerivation.PaymentAddress 'Cardano.Wallet.Primitive.AddressDerivation.Mainnet Cardano.Wallet.Primitive.AddressDerivation.Shelley.ShelleyKey
instance Cardano.Wallet.Primitive.AddressDerivation.PaymentAddress 'Cardano.Wallet.Primitive.AddressDerivation.Testnet Cardano.Wallet.Primitive.AddressDerivation.Shelley.ShelleyKey
instance Cardano.Wallet.Primitive.AddressDerivation.DelegationAddress 'Cardano.Wallet.Primitive.AddressDerivation.Mainnet Cardano.Wallet.Primitive.AddressDerivation.Shelley.ShelleyKey
instance Cardano.Wallet.Primitive.AddressDerivation.DelegationAddress 'Cardano.Wallet.Primitive.AddressDerivation.Testnet Cardano.Wallet.Primitive.AddressDerivation.Shelley.ShelleyKey
instance Cardano.Wallet.Primitive.AddressDerivation.Shelley.KnownNetwork 'Cardano.Wallet.Primitive.AddressDerivation.Mainnet
instance Cardano.Wallet.Primitive.AddressDerivation.Shelley.KnownNetwork 'Cardano.Wallet.Primitive.AddressDerivation.Testnet
instance Control.DeepSeq.NFData key => Control.DeepSeq.NFData (Cardano.Wallet.Primitive.AddressDerivation.Shelley.ShelleyKey depth key)
instance Cardano.Wallet.Primitive.AddressDerivation.HardDerivation Cardano.Wallet.Primitive.AddressDerivation.Shelley.ShelleyKey
instance Cardano.Wallet.Primitive.AddressDerivation.SoftDerivation Cardano.Wallet.Primitive.AddressDerivation.Shelley.ShelleyKey
instance Cardano.Wallet.Primitive.AddressDerivation.WalletKey Cardano.Wallet.Primitive.AddressDerivation.Shelley.ShelleyKey
instance Cardano.Wallet.Primitive.AddressDerivation.MkKeyFingerprint Cardano.Wallet.Primitive.AddressDerivation.Shelley.ShelleyKey
instance Cardano.Wallet.Primitive.AddressDerivation.PersistPrivateKey (Cardano.Wallet.Primitive.AddressDerivation.Shelley.ShelleyKey 'Cardano.Wallet.Primitive.AddressDerivation.RootK)
instance Cardano.Wallet.Primitive.AddressDerivation.PersistPublicKey (Cardano.Wallet.Primitive.AddressDerivation.Shelley.ShelleyKey 'Cardano.Wallet.Primitive.AddressDerivation.AccountK)


-- | Here we find the "business logic" to manage a Cardano wallet. This is
--   a direct implementation of the model from the <a>Formal Specification
--   for a Cardano Wallet</a> Note that, this module is purposedly agnostic
--   to how blocks are retrieved or how various types are serialized.
--   
--   This is really about how the wallet keep track of its internal state,
--   and its UTxO (where the relationship is defined via the <a>IsOurs</a>
--   abstraction to allow this core code to be used with any sort of
--   derivation scheme).
--   
--   All those functions are pure and there's no reason to shove in any
--   sort of side-effects in here :)
module Cardano.Wallet.Primitive.Model

-- | An opaque wallet type, see <a>initWallet</a>, <a>updateState</a>,
--   <a>applyBlock</a>, and <a>applyBlocks</a> to construct and update
--   wallets.
--   
--   Internally, this keeps track or a few things including:
--   
--   <ul>
--   <li>UTxOs</li>
--   <li>Transaction history</li>
--   <li>Known &amp; used addresses, via address discovery state</li>
--   <li>Blockchain parameters</li>
--   </ul>
--   
--   The <a>Wallet</a> is parameterized over two types:
--   
--   <ul>
--   <li><tt>s</tt>: A _state_ used to keep track of known addresses. The
--   business logic doesn't know how to answer the question 'Is this
--   address ours?', so we expect this state to be able to answer that for
--   us.</li>
--   <li><tt>t</tt>: A target backend. This makes the wallet fairly
--   agnostic to the type of binary representation used by the underlying
--   target network and it allows us to re-use the same logic to provide a
--   wallet backend for multiple backends (for instance, Byron or Shelley)
--   which may have divergence in their binary formats. For the sake of
--   this module, we only care about one particular super-power, and its
--   the ability to compute transaction id (which is intrinsically linked
--   to the transaction's binary format).</li>
--   </ul>
--   
--   A few examples to make it concrete:
--   
--   <pre>
--   Wallet RndState Byron
--   Wallet SeqState Shelley
--   Wallet SeqState Bitcoin
--   </pre>
data Wallet s
data BlockchainParameters
BlockchainParameters :: Hash "Genesis" -> StartTime -> FeePolicy -> SlotLength -> EpochLength -> Quantity "byte" Word16 -> Quantity "block" Word32 -> BlockchainParameters

-- | Hash of the very first block
[$sel:getGenesisBlockHash:BlockchainParameters] :: BlockchainParameters -> Hash "Genesis"

-- | Start time of the chain.
[$sel:getGenesisBlockDate:BlockchainParameters] :: BlockchainParameters -> StartTime

-- | Policy regarding transaction fee.
[$sel:getFeePolicy:BlockchainParameters] :: BlockchainParameters -> FeePolicy

-- | Length, in seconds, of a slot.
[$sel:getSlotLength:BlockchainParameters] :: BlockchainParameters -> SlotLength

-- | Number of slots in a single epoch.
[$sel:getEpochLength:BlockchainParameters] :: BlockchainParameters -> EpochLength

-- | Maximum size of a transaction (soft or hard limit).
[$sel:getTxMaxSize:BlockchainParameters] :: BlockchainParameters -> Quantity "byte" Word16

-- | Length of the suffix of the chain considered unstable
[$sel:getEpochStability:BlockchainParameters] :: BlockchainParameters -> Quantity "block" Word32

-- | Create a an empty wallet and apply the given genesis block
--   
--   The wallet tip will be set to the header of the applied genesis block.
initWallet :: (IsOurs s, NFData s, Show s) => Block -> BlockchainParameters -> s -> ([(Tx, TxMeta)], Wallet s)

-- | Update the state of an existing Wallet model
updateState :: (IsOurs s, NFData s, Show s) => s -> Wallet s -> Wallet s

-- | Apply Block is the primary way of making the wallet evolve. It returns
--   the updated wallet state, as well as a set of all transactions
--   belonging to the wallet discovered while applying the block.
applyBlock :: Block -> Wallet s -> ([(Tx, TxMeta)], Wallet s)

-- | Apply multiple blocks in sequence to an existing wallet, returning a
--   list of intermediate wallet states.
--   
--   Each intermediate wallet state is paired with the set of transactions
--   that belong to that state but not the previous state.
--   
--   For an original wallet state <b><tt>w</tt></b> and a list of blocks
--   <b><tt>b</tt></b> such that:
--   
--   <pre>
--   b = [b1, b2, ..., bn]
--   </pre>
--   
--   Returns the following list of updates:
--   
--   <pre>
--   [ (t b1, w + b1)
--   , (t b2, w + b1 + b2)
--   , ...
--   , (t bn, w + b1 + b2 + ... + bn) ]
--   </pre>
--   
--   Where:
--   
--   <ul>
--   <li><b><tt>(t bi)</tt></b> is the set of transactions contained within
--   block <b><tt>bi</tt></b>.</li>
--   <li><b><tt>(w + bi)</tt></b> is the wallet state after applying block
--   <b><tt>bi</tt></b> to wallet <b><tt>w</tt></b>.</li>
--   </ul>
applyBlocks :: NonEmpty Block -> Wallet s -> NonEmpty ([(Tx, TxMeta)], Wallet s)

-- | Constructs a wallet from the exact given state. Using this function
--   instead of <a>initWallet</a> and <a>applyBlock</a> allows the wallet
--   invariants to be broken. Therefore it should only be used in the
--   special case of loading wallet checkpoints from the database (where it
--   is assumed a valid wallet was stored into the database).
unsafeInitWallet :: (IsOurs s, NFData s, Show s) => UTxO -> BlockHeader -> s -> BlockchainParameters -> Wallet s

-- | Get the wallet current tip
currentTip :: Wallet s -> BlockHeader

-- | Get the wallet current state
getState :: Wallet s -> s

-- | Available balance = <a>balance</a> . <a>availableUTxO</a>
availableBalance :: Set Tx -> Wallet s -> Natural

-- | Total balance = <a>balance</a> . <a>totalUTxO</a>
totalBalance :: Set Tx -> Wallet s -> Natural

-- | Total UTxO = <a>availableUTxO</a> <tt>&lt;&gt;</tt> <a>changeUTxO</a>
totalUTxO :: Set Tx -> Wallet s -> UTxO

-- | Available UTxO = <tt>pending ⋪ utxo</tt>
availableUTxO :: Set Tx -> Wallet s -> UTxO

-- | Actual utxo
utxo :: Wallet s -> UTxO

-- | Get the current chain parameters.
--   
--   Parameters may change over time via protocol updates, so we keep track
--   of them as part of the wallet checkpoints.
blockchainParameters :: Wallet s -> BlockchainParameters
slotParams :: BlockchainParameters -> SlotParameters
instance GHC.Classes.Eq Cardano.Wallet.Primitive.Model.BlockchainParameters
instance GHC.Show.Show Cardano.Wallet.Primitive.Model.BlockchainParameters
instance GHC.Generics.Generic Cardano.Wallet.Primitive.Model.BlockchainParameters
instance GHC.Show.Show (Cardano.Wallet.Primitive.Model.Wallet s)
instance GHC.Classes.Eq s => GHC.Classes.Eq (Cardano.Wallet.Primitive.Model.Wallet s)
instance Control.DeepSeq.NFData (Cardano.Wallet.Primitive.Model.Wallet s)
instance Formatting.Buildable.Buildable s => Formatting.Buildable.Buildable (Cardano.Wallet.Primitive.Model.Wallet s)
instance Control.DeepSeq.NFData Cardano.Wallet.Primitive.Model.BlockchainParameters
instance Formatting.Buildable.Buildable Cardano.Wallet.Primitive.Model.BlockchainParameters


-- | An implementation of the wallet database using only pure functions.
--   
--   These functions and types model the behaviour of the SQLite database
--   backend, and are used for QuickCheck state machine testing, and the
--   MVar database backend.
module Cardano.Wallet.DB.Model

-- | Model database, parameterised by the wallet ID type, the wallet AD
--   state type, the target backend, and the private key type.
--   
--   Tne type parameters exist so that simpler mock types can be used in
--   place of actual wallet types.
data Database wid s xprv
Database :: !Map wid (WalletDatabase s xprv) -> Map (Hash "Tx") Tx -> Database wid s xprv

-- | Wallet-related information.
[$sel:wallets:Database] :: Database wid s xprv -> !Map wid (WalletDatabase s xprv)

-- | In the database, transactions are global and not associated with any
--   particular wallet.
[$sel:txs:Database] :: Database wid s xprv -> Map (Hash "Tx") Tx

-- | Model database record for a single wallet.
data WalletDatabase s xprv
WalletDatabase :: !Map SlotId (Wallet s) -> !Map SlotId PoolId -> !WalletMetadata -> !Map (Hash "Tx") TxMeta -> !Maybe xprv -> WalletDatabase s xprv
[$sel:checkpoints:WalletDatabase] :: WalletDatabase s xprv -> !Map SlotId (Wallet s)
[$sel:certificates:WalletDatabase] :: WalletDatabase s xprv -> !Map SlotId PoolId
[$sel:metadata:WalletDatabase] :: WalletDatabase s xprv -> !WalletMetadata
[$sel:txHistory:WalletDatabase] :: WalletDatabase s xprv -> !Map (Hash "Tx") TxMeta
[$sel:xprv:WalletDatabase] :: WalletDatabase s xprv -> !Maybe xprv

-- | Produces an empty model database.
emptyDatabase :: Ord wid => Database wid s xprv

-- | Shorthand for the readTxHistory result type.
type TxHistory = [(Tx, TxMeta)]

-- | Shorthand for the putTxHistory argument type.
type TxHistoryMap = Map (Hash "Tx") (Tx, TxMeta)

-- | Apply optional filters on slotId and sort using the default sort order
--   (first time/slotId, then by TxId) to a <a>TxHistory</a>.
filterTxHistory :: SortOrder -> Range SlotId -> TxHistory -> TxHistory

-- | A database model operation, which is a function that takes a database
--   and returns: * a value, which is a query of the database, or an error;
--   and * a (possibly) modified database.
type ModelOp wid s xprv a = Database wid s xprv -> (Either (Err wid) a, Database wid s xprv)

-- | All of the possible errors that any of the model database functions
--   might return.
data Err wid
NoSuchWallet :: wid -> Err wid
WalletAlreadyExists :: wid -> Err wid
CannotRemovePendingTx :: ErrErasePendingTx wid -> Err wid
data ErrErasePendingTx wid
ErrErasePendingTxNoSuchWallet :: wid -> ErrErasePendingTx wid
ErrErasePendingTxNoTx :: Hash "Tx" -> ErrErasePendingTx wid
ErrErasePendingTxNoPendingTx :: Hash "Tx" -> ErrErasePendingTx wid
mCleanDB :: Ord wid => ModelOp wid s xprv ()
mInitializeWallet :: forall wid s xprv. Ord wid => wid -> Wallet s -> WalletMetadata -> [(Tx, TxMeta)] -> ModelOp wid s xprv ()
mRemoveWallet :: Ord wid => wid -> ModelOp wid s xprv ()
mListWallets :: Ord wid => ModelOp wid s xprv [wid]
mPutCheckpoint :: Ord wid => wid -> Wallet s -> ModelOp wid s xprv ()
mReadCheckpoint :: Ord wid => wid -> ModelOp wid s xprv (Maybe (Wallet s))
mListCheckpoints :: Ord wid => wid -> ModelOp wid s xprv [BlockHeader]
mRollbackTo :: Ord wid => wid -> SlotId -> ModelOp wid s xprv ()
mPutWalletMeta :: Ord wid => wid -> WalletMetadata -> ModelOp wid s xprv ()
mReadWalletMeta :: Ord wid => wid -> ModelOp wid s xprv (Maybe WalletMetadata)
mPutDelegationCertificate :: Ord wid => wid -> PoolId -> SlotId -> ModelOp wid s xprv ()
mPutTxHistory :: forall wid s xprv. Ord wid => wid -> TxHistory -> ModelOp wid s xprv ()
mReadTxHistory :: forall wid s xprv. Ord wid => wid -> SortOrder -> Range SlotId -> Maybe TxStatus -> ModelOp wid s xprv TxHistory
mPutPrivateKey :: Ord wid => wid -> xprv -> ModelOp wid s xprv ()
mReadPrivateKey :: Ord wid => wid -> ModelOp wid s xprv (Maybe xprv)
mRemovePendingTx :: Ord wid => wid -> Hash "Tx" -> ModelOp wid s xprv ()
instance Data.Traversable.Traversable Cardano.Wallet.DB.Model.Err
instance Data.Foldable.Foldable Cardano.Wallet.DB.Model.Err
instance GHC.Base.Functor Cardano.Wallet.DB.Model.Err
instance GHC.Classes.Eq wid => GHC.Classes.Eq (Cardano.Wallet.DB.Model.Err wid)
instance GHC.Show.Show wid => GHC.Show.Show (Cardano.Wallet.DB.Model.Err wid)
instance Data.Traversable.Traversable Cardano.Wallet.DB.Model.ErrErasePendingTx
instance Data.Foldable.Foldable Cardano.Wallet.DB.Model.ErrErasePendingTx
instance GHC.Base.Functor Cardano.Wallet.DB.Model.ErrErasePendingTx
instance GHC.Classes.Eq wid => GHC.Classes.Eq (Cardano.Wallet.DB.Model.ErrErasePendingTx wid)
instance GHC.Show.Show wid => GHC.Show.Show (Cardano.Wallet.DB.Model.ErrErasePendingTx wid)
instance GHC.Generics.Generic (Cardano.Wallet.DB.Model.Database wid s xprv)
instance GHC.Generics.Generic (Cardano.Wallet.DB.Model.WalletDatabase s xprv)
instance (GHC.Classes.Eq s, GHC.Classes.Eq xprv) => GHC.Classes.Eq (Cardano.Wallet.DB.Model.WalletDatabase s xprv)
instance GHC.Show.Show xprv => GHC.Show.Show (Cardano.Wallet.DB.Model.WalletDatabase s xprv)
instance (GHC.Show.Show wid, GHC.Show.Show xprv) => GHC.Show.Show (Cardano.Wallet.DB.Model.Database wid s xprv)
instance (GHC.Classes.Eq wid, GHC.Classes.Eq xprv, GHC.Classes.Eq s) => GHC.Classes.Eq (Cardano.Wallet.DB.Model.Database wid s xprv)


-- | Provides the API of Coin Selection algorithm and Fee Calculation This
--   module contains the implementation of adjusting coin selection for a
--   fee. The sender pays for the fee and additional inputs are picked
--   randomly. For more information refer to:
--   <a>https://iohk.io/blog/self-organisation-in-coin-selection/</a>
module Cardano.Wallet.Primitive.Fee

-- | A <a>Fee</a>, isomorph to <a>Coin</a> but ease type-signatures and
--   readability.
newtype Fee
Fee :: Word64 -> Fee
[getFee] :: Fee -> Word64

-- | A linear equation of a free variable <tt>x</tt>. Represents the <tt>x
--   -&gt; a + b*x</tt> function where <tt>x</tt> can be the transaction
--   size in bytes or, a number of inputs + outputs.
--   
--   <tt>a</tt>, <tt>b</tt> and <tt>c</tt> are constant coefficients.
data FeePolicy
LinearFee :: Quantity "lovelace" Double -> Quantity "lovelace/byte" Double -> Quantity "lovelace/certificate" Double -> FeePolicy

-- | Compute fee for a given payload. Fee follows a simple linear equation:
--   
--   <pre>
--   f = a + size * b
--   </pre>
--   
--   where <tt>a</tt> &amp; <tt>b</tt> are values fixed by the protocol.
computeFee :: FeePolicy -> Quantity "byte" Int -> Fee

-- | Proportionally divide the fee over each output.
--   
--   Pre-condition 1: The given outputs list shouldn't be empty
--   Pre-condition 2: None of the outputs should be null
--   
--   It returns the a list of pairs (fee, output).
divvyFee :: Fee -> [Coin] -> [(Fee, Coin)]
data FeeOptions
FeeOptions :: (CoinSelection -> Fee) -> Coin -> FeeOptions

-- | Estimate fees based on number of inputs and values of the outputs Some
--   pointers / order of magnitude from the current configuration: a:
--   155381 # absolute minimal fees per transaction b: 43.946 # additional
--   minimal fees per byte of transaction size
[estimateFee] :: FeeOptions -> CoinSelection -> Fee

-- | Change addresses below the given threshold will be evicted from the
--   created transaction. Setting <a>dustThreshold</a> to 0 removes output
--   equal to 0
[dustThreshold] :: FeeOptions -> Coin
newtype ErrAdjustForFee

-- | UTxO exhausted during fee covering We record what amount missed to
--   cover the fee
ErrCannotCoverFee :: Word64 -> ErrAdjustForFee

-- | Given the coin selection result from a policy run, adjust the outputs
--   for fees, potentially returning additional inputs that we need to
--   cover all fees. We lose the relationship between the transaction
--   outputs and their corresponding inputs/change outputs here. This is a
--   decision we may wish to revisit later. For now however note that since
--   
--   (a) coin selection tries to establish a particular ratio between
--   payment outputs and change outputs (currently it aims for an average
--   of 1:1)
--   
--   (b) coin selection currently only generates a single change output per
--   payment output, distributing the fee proportionally across all change
--   outputs is roughly equivalent to distributing it proportionally over
--   the payment outputs (roughly, not exactly, because the 1:1 proportion
--   is best effort only, and may in some cases be wildly different).
--   
--   Note that for (a) we don't need the ratio to be 1:1, the above
--   reasoning will remain true for any proportion 1:n. For (b) however, if
--   coin selection starts creating multiple outputs, and this number may
--   vary, then losing the connection between outputs and change outputs
--   will mean that that some outputs may pay a larger percentage of the
--   fee (depending on how many change outputs the algorithm happened to
--   choose).
adjustForFee :: MonadRandom m => FeeOptions -> UTxO -> CoinSelection -> ExceptT ErrAdjustForFee m CoinSelection
instance GHC.Classes.Eq Cardano.Wallet.Primitive.Fee.ErrAdjustForFee
instance GHC.Show.Show Cardano.Wallet.Primitive.Fee.ErrAdjustForFee
instance GHC.Generics.Generic Cardano.Wallet.Primitive.Fee.FeeOptions
instance GHC.Show.Show Cardano.Wallet.Primitive.Fee.Fee
instance GHC.Classes.Ord Cardano.Wallet.Primitive.Fee.Fee
instance GHC.Classes.Eq Cardano.Wallet.Primitive.Fee.Fee


-- | This module contains an algorithm to select coins for migration from
--   legacy wallets to newer wallets.
--   
--   We want users to be able to migrate their funds from a legacy random
--   wallet to a new sequential wallet. To do this, we have to move funds
--   from a wallet to another by making transactions. Funds are ultimately
--   a sum of many coins (a.k.a UTxOs). In a transaction, we can select a
--   few coins, and send them to addresses, effectively creating new coins
--   / UTxOs doing this.
--   
--   There are some limitations regarding the number of coins that can be
--   selected at once in a single transaction (theoretically 255 coins, in
--   practice ~170) because there's a transaction max size (in bytes)
--   enforced by the network. Also, there's a direct relationship between
--   the maximum number of inputs we can select, and the maximum number of
--   outputs we can produce (increasing one will decrease the other, and
--   vice-versa).
--   
--   When making a transaction, coins used as inputs for a transaction
--   becomes unavailable for a while, until the transaction is inserted
--   into the ledger and, make some new coins available as change (very
--   much like when paying with bank notes to a shop, if we give a 20 EUR
--   note to pay for 3 EUR, we can't spend the remaining 17 EUR before we
--   have received the change!). So, a wallet with a small number of UTxO
--   will not be able to make many transactions in parallel and will have
--   to make them sequentially, waiting for the previous ones to be
--   inserted before making new ones (we also say that a wallet is not
--   "fragmented enough").
module Cardano.Wallet.Primitive.CoinSelection.Migration

-- | Construct a list of coin selections / transactions to transfer the
--   totality of a user's wallet. The resulting <a>CoinSelection</a> do not
--   contain any <a>outputs</a>, but only change coins (so there's no
--   restriction about how addresses are generated).
--   
--   It tries to fit as many inputs as possible in a single transaction
--   (fixed by the <a>Word8</a> maximum number of inputs given as argument.
--   
--   The fee options are used to balance the coin selections and fix a
--   threshold for dust that is removed from the selections.
selectCoinsForMigration :: FeeOptions -> Word8 -> UTxO -> [CoinSelection]

-- | Try to find a fix "ideal" number of input transactions that would
--   generate rather balanced transactions.
idealBatchSize :: CoinSelectionOptions e -> Word8


-- | This module provides a data structure and functions for operating on a
--   sequence of block headers.
--   
--   The <a>BlockHeaders</a> sequence is used for maintaining the global
--   unstable blocks state for the network layer. The unstable blocks state
--   can be compared with the block headers state of chain consumers to
--   determine the intersection point.
module Cardano.Wallet.Network.BlockHeaders

-- | A list of block headers and their hashes. The last block in this
--   sequence is the network tip. The first block in this sequence is the
--   block of depth <i>k</i>, which is the last unstable block.
newtype BlockHeaders
BlockHeaders :: Seq BlockHeader -> BlockHeaders

-- | Double-ended queue of block headers, and their IDs.
[$sel:getBlockHeaders:BlockHeaders] :: BlockHeaders -> Seq BlockHeader

-- | Constuct an empty unstable blocks sequence.
emptyBlockHeaders :: BlockHeaders

-- | Updates the unstable blocks state using the given "fetch" functions.
--   
--   This attempts to synchronise the local state with that of the node.
--   The node may be on a different chain to the current unstable blocks,
--   so this function handles switching of chains.
--   
--   For example, this is what it would do when the local tip is
--   <tt>a13</tt>, but the node's tip is <tt>b15</tt>, on a different
--   chain.
--   
--   <pre>
--                                     local tip ↴
--                   ┌───┬───  ───┬───┬───┬───┬───┐
--   Unstable blocks │a03│..    ..│a10│a11│a12│a13│
--                   └───┴───  ───┴───┴───┴───┴───┘
--                             ───┬───┬───┬───┬───┬───┬───┐
--   Node backend chain        ...│a10│a11│b12│b13│b14│b15│
--                             ───┴───┴───┴───┴───┴───┴───┘
--                         rollback point ⬏     node tip ⬏
--   </pre>
--   
--   To start with, the node says the tip hash is <tt>b15</tt>.
--   
--   Work backwards from tip, fetching blocks and adding them to
--   <tt>ac</tt>, and removing overlapping blocks from <tt>ubs</tt>.
--   Overlapping blocks occur when there has been a rollback.
--   
--   <pre>
--       ubs                     ac
--   1.  ───┬───┬───┬───┬───┐    ┌───┐
--       ...│a10│a11│a12│a13│    │b15│
--       ───┴───┴───┴───┴───┘    └───┘
--   2.  ───┬───┬───┬───┬───┐┌───┬───┐
--       ...│a10│a11│a12│a13││b14│b15│
--       ───┴───┴───┴───┴───┘└───┴───┘
--   3.  ───┬───┬───┬───┐┌───┬───┬───┐
--       ...│a10│a11│a12││b13│b14│b15│
--       ───┴───┴───┴───┘└───┴───┴───┘
--   4.  ───┬───┬───┐┌───┬───┬───┬───┐
--       ...│a10│a11││b12│b13│b14│b15│
--       ───┴───┴───┘└───┴───┴───┴───┘
--   </pre>
--   
--   Stop once <tt>ubs</tt> and <tt>ac</tt> meet with a block which has the
--   same hash. If they never meet, stop cleanupConfig fetching <i>k</i>
--   blocks.
--   
--   Finally, to get the new <a>BlockHeaders</a>, append <tt>ac</tt> to
--   <tt>ubs</tt>, and limit the length to <i>k</i>.
--   
--   The new block height is the height of the first block that was
--   fetched.
--   
--   If any errors occur while this process is running (for example,
--   fetching a block which has been rolled back and lost from the node's
--   state), it will immediately terminate.
updateUnstableBlocks :: forall m. Monad m => Quantity "block" Word32 -> m (Hash "BlockHeader") -> (Hash "BlockHeader" -> m BlockHeader) -> BlockHeaders -> m BlockHeaders

-- | The tip block header of the unstable blocks, if it exists.
blockHeadersTip :: BlockHeaders -> Maybe BlockHeader

-- | The base block header is the oldest block header in the unstable
--   blocks,
blockHeadersBase :: BlockHeaders -> Maybe BlockHeader

-- | Whether we are at genesis or not.
blockHeadersAtGenesis :: BlockHeaders -> Bool

-- | Add recently fetched block headers to the unstable blocks. This will
--   drop the oldest block headers to ensure that there are at most
--   <i>k</i> items in the sequence.
appendBlockHeaders :: Quantity "block" Word32 -> BlockHeaders -> [BlockHeader] -> BlockHeaders

-- | Remove unstable blocks which have a slot greater than or equal to the
--   given slot.
dropStartingFromSlotId :: SlotId -> BlockHeaders -> BlockHeaders

-- | Drop any headers that are (strictly) after the given slot id.
dropAfterSlotId :: SlotId -> BlockHeaders -> BlockHeaders

-- | If the two sequences overlap in terms of slots, return the block
--   header of the last block that is common between the two. Otherwise
--   return Nothing.
--   
--   <a>greatestCommonBlockHeader</a> works fine if one (or both) list are
--   sparse and different length.
--   
--   For example: <tt> | (1) | (2) | (3) | (4) | (5) Node | abcdefg | efg |
--   abcdefg | abcde | abc Local | cdpqrst | abc | abcdefg | | efg GCBH |
--   Just d | Nothing | Just g | Nothing | Nothing </tt>
greatestCommonBlockHeader :: BlockHeaders -> BlockHeaders -> Maybe BlockHeader
instance GHC.Generics.Generic Cardano.Wallet.Network.BlockHeaders.BlockHeaders
instance GHC.Classes.Eq Cardano.Wallet.Network.BlockHeaders.BlockHeaders
instance GHC.Show.Show Cardano.Wallet.Network.BlockHeaders.BlockHeaders
instance Control.DeepSeq.NFData Cardano.Wallet.Network.BlockHeaders.BlockHeaders

module Cardano.Wallet.Network
data NetworkLayer m target block
NetworkLayer :: (Cursor target -> ExceptT ErrGetBlock m (NextBlocksResult target block)) -> (Cursor target -> m (Maybe BlockHeader)) -> ([BlockHeader] -> Cursor target) -> (Cursor target -> SlotId) -> ExceptT ErrNetworkTip m BlockHeader -> ((Tx, [TxWitness]) -> ExceptT ErrPostTx m ()) -> (Block, BlockchainParameters) -> ExceptT ErrNetworkUnavailable m (EpochNo, Map PoolId (Quantity "lovelace" Word64)) -> NetworkLayer m target block

-- | Starting from the given <a>Cursor</a>, fetches a contiguous sequence
--   of blocks from the node, if they are available. An updated cursor will
--   be returned with a <tt>RollFoward</tt> result.
--   
--   Blocks are returned in ascending slot order, without skipping blocks.
--   
--   If the node does not have any blocks after the specified cursor point,
--   it will return <a>AwaitReply</a>.
--   
--   If the node has adopted an alternate fork of the chain, it will return
--   <a>RollBackward</a> with a new cursor.
[nextBlocks] :: NetworkLayer m target block -> Cursor target -> ExceptT ErrGetBlock m (NextBlocksResult target block)

-- | Attempt to find an intersection between the node's unstable blocks and
--   a given list of headers. This can be useful if we need to know whether
--   we are 'in sync' with the node or, close enough.
[findIntersection] :: NetworkLayer m target block -> Cursor target -> m (Maybe BlockHeader)

-- | Creates a cursor from the given block header so that <a>nextBlocks</a>
--   can be used to fetch blocks.
[initCursor] :: NetworkLayer m target block -> [BlockHeader] -> Cursor target

-- | Get the slot corresponding to a cursor.
[cursorSlotId] :: NetworkLayer m target block -> Cursor target -> SlotId

-- | Get the current network tip from the chain producer
[networkTip] :: NetworkLayer m target block -> ExceptT ErrNetworkTip m BlockHeader

-- | Broadcast a transaction to the chain producer
[postTx] :: NetworkLayer m target block -> (Tx, [TxWitness]) -> ExceptT ErrPostTx m ()

-- | Get the genesis block and blockchain parameters.
--   
--   Note: The genesis block is a Wallet <tt>Block</tt>-type and not the
--   <tt>block</tt> type-parameter used in <tt>nextBlocks</tt>. This is due
--   to: 1. <a>Cardano.Pool.Metrics</a> wanting to use a
--   <tt>block</tt>-type specific to non-genesis blocks. 2. The genesis
--   block only being needed in the Wallet (currently).
[staticBlockchainParameters] :: NetworkLayer m target block -> (Block, BlockchainParameters)
[stakeDistribution] :: NetworkLayer m target block -> ExceptT ErrNetworkUnavailable m (EpochNo, Map PoolId (Quantity "lovelace" Word64))

-- | The result of <a>nextBlocks</a>, which is instructions for what the
--   chain consumer should do next.
data NextBlocksResult target block

-- | There are no blocks available from the node, so wait.
AwaitReply :: NextBlocksResult target block

-- | Apply the given contiguous non-empty sequence of blocks. Use the
--   updated cursor to get the next batch. The given block header is the
--   current tip of the node.
RollForward :: Cursor target -> BlockHeader -> [block] -> NextBlocksResult target block

-- | The chain consumer must roll back its state, then use the cursor to
--   get the next batch of blocks.
RollBackward :: Cursor target -> NextBlocksResult target block

-- | A cursor is local state kept by the chain consumer to use as the
--   starting position for <a>nextBlocks</a>. The actual type is opaque and
--   determined by the backend <tt>target</tt>.
data family Cursor target

-- | Subscribe to a blockchain and get called with new block (in order)!
follow :: forall target block e0 e1. (Show e0, Show e1) => NetworkLayer IO target block -> Trace IO Text -> [BlockHeader] -> (NonEmpty block -> BlockHeader -> IO (FollowAction e0)) -> (SlotId -> IO (FollowAction e1)) -> (block -> BlockHeader) -> IO ()

-- | <tt>FollowAction</tt> enables the callback of <tt>follow</tt> to
--   signal if the chain-following should <tt>ExitWith</tt>,
--   <tt>Continue</tt>, or if the current callback should be forgotten and
--   retried (<tt>Retry</tt>).
--   
--   NOTE: <tt>Retry</tt> is needed to handle data-races in <a>Metrics</a>,
--   where it is essensial that we fetch the stake distribution while the
--   node-tip
data FollowAction err

-- | Stop following the chain.
ExitWith :: err -> FollowAction err

-- | Continue following the chain.
Continue :: FollowAction err

-- | Forget about the blocks in the current callback, and retry
--   immediately.
RetryImmediately :: FollowAction err

-- | Like <a>RetryImmediately</a> but only retries after a short delay
RetryLater :: FollowAction err

-- | Network is unavailable
data ErrNetworkUnavailable

-- | Cannot connect to network backend.
ErrNetworkUnreachable :: Text -> ErrNetworkUnavailable

-- | Network backend reports that the requested network is invalid.
ErrNetworkInvalid :: Text -> ErrNetworkUnavailable

-- | Error while trying to get the network tip
data ErrNetworkTip
ErrNetworkTipNetworkUnreachable :: ErrNetworkUnavailable -> ErrNetworkTip
ErrNetworkTipNotFound :: ErrNetworkTip

-- | Error while trying to get one or more blocks
data ErrGetBlock
ErrGetBlockNetworkUnreachable :: ErrNetworkUnavailable -> ErrGetBlock
ErrGetBlockNotFound :: Hash "BlockHeader" -> ErrGetBlock

-- | Error while trying to send a transaction
data ErrPostTx
ErrPostTxNetworkUnreachable :: ErrNetworkUnavailable -> ErrPostTx
ErrPostTxBadRequest :: Text -> ErrPostTx
ErrPostTxProtocolFailure :: Text -> ErrPostTx

-- | A default <tt>RetryPolicy</tt> with a delay that starts short, and
--   that retries for no longer than a minute.
defaultRetryPolicy :: Monad m => RetryPolicyM m

-- | Wait until 'networkTip networkLayer' succeeds according to a given
--   retry policy. Throws an exception otherwise.
waitForNetwork :: ExceptT ErrNetworkUnavailable IO () -> RetryPolicyM IO -> IO ()
instance GHC.Show.Show err => GHC.Show.Show (Cardano.Wallet.Network.FollowAction err)
instance GHC.Classes.Eq err => GHC.Classes.Eq (Cardano.Wallet.Network.FollowAction err)
instance GHC.Classes.Eq Cardano.Wallet.Network.ErrPostTx
instance GHC.Show.Show Cardano.Wallet.Network.ErrPostTx
instance GHC.Generics.Generic Cardano.Wallet.Network.ErrPostTx
instance GHC.Classes.Eq Cardano.Wallet.Network.ErrGetBlock
instance GHC.Show.Show Cardano.Wallet.Network.ErrGetBlock
instance GHC.Classes.Eq Cardano.Wallet.Network.ErrNetworkTip
instance GHC.Show.Show Cardano.Wallet.Network.ErrNetworkTip
instance GHC.Generics.Generic Cardano.Wallet.Network.ErrNetworkTip
instance GHC.Classes.Eq Cardano.Wallet.Network.ErrNetworkUnavailable
instance GHC.Show.Show Cardano.Wallet.Network.ErrNetworkUnavailable
instance GHC.Generics.Generic Cardano.Wallet.Network.ErrNetworkUnavailable
instance GHC.Base.Functor m => GHC.Base.Functor (Cardano.Wallet.Network.NetworkLayer m target)
instance GHC.Base.Functor (Cardano.Wallet.Network.NextBlocksResult target)
instance GHC.Exception.Type.Exception Cardano.Wallet.Network.ErrPostTx
instance GHC.Exception.Type.Exception Cardano.Wallet.Network.ErrNetworkTip
instance GHC.Exception.Type.Exception Cardano.Wallet.Network.ErrNetworkUnavailable


-- | This module contains instances and types necessary for storing wallets
--   in a SQL database with Persistent.
--   
--   It's in a separate module due to the GHC stage restriction.
--   
--   The ToJSON/FromJSON and Read instance orphans exist due to class
--   constraints on Persistent functions.
module Cardano.Wallet.DB.Sqlite.Types

-- | Settings for generating the Persistent types.
sqlSettings' :: MkPersistSettings

-- | <a>fromText</a> but with a simpler error type.
fromText' :: FromText a => Text -> Either Text a

-- | Aeson parser defined in terms of <a>fromText</a>
aesonFromText :: FromText a => String -> Value -> Parser a

-- | <a>fromPersistValue</a> defined in terms of <a>fromText</a>
fromPersistValueFromText :: FromText a => PersistValue -> Either Text a

-- | <a>fromPersistValue</a> defined in terms of the <a>Read</a> class
fromPersistValueRead :: Read a => PersistValue -> Either Text a
directionToBool :: Direction -> Bool
directionFromBool :: Bool -> Direction
newtype TxId
TxId :: Hash "Tx" -> TxId
[getTxId] :: TxId -> Hash "Tx"
newtype BlockId
BlockId :: Hash "BlockHeader" -> BlockId
[getBlockId] :: BlockId -> Hash "BlockHeader"

-- | As a short-to-medium term solution of persisting <a>SlotId</a>, we use
--   <a>flatSlot</a> with an artificial epochLength. I.e. /not the same
--   epochLength as the blockchain/. This is just for the sake of storing
--   the 64 bit epoch and the 32-bit slot inside a single 64-bit field.
artificialEpochLength :: EpochLength
persistSlotId :: SlotId -> PersistValue
unPersistSlotId :: PersistValue -> Either Text SlotId
walletStateNum :: SyncProgress -> Word8
walletStateFromNum :: Word8 -> SyncProgress
mkCoin :: Word64 -> Either Text Coin
newtype HDPassphrase
HDPassphrase :: Passphrase "addr-derivation-payload" -> HDPassphrase
instance GHC.Show.Show Cardano.Wallet.DB.Sqlite.Types.HDPassphrase
instance GHC.Generics.Generic Cardano.Wallet.DB.Sqlite.Types.HDPassphrase
instance GHC.Generics.Generic Cardano.Wallet.DB.Sqlite.Types.BlockId
instance GHC.Classes.Ord Cardano.Wallet.DB.Sqlite.Types.BlockId
instance GHC.Classes.Eq Cardano.Wallet.DB.Sqlite.Types.BlockId
instance GHC.Show.Show Cardano.Wallet.DB.Sqlite.Types.BlockId
instance GHC.Generics.Generic Cardano.Wallet.DB.Sqlite.Types.TxId
instance GHC.Classes.Ord Cardano.Wallet.DB.Sqlite.Types.TxId
instance GHC.Classes.Eq Cardano.Wallet.DB.Sqlite.Types.TxId
instance GHC.Show.Show Cardano.Wallet.DB.Sqlite.Types.TxId
instance Database.Persist.Class.PersistField.PersistField Cardano.Wallet.DB.Sqlite.Types.HDPassphrase
instance Database.Persist.Sql.Class.PersistFieldSql Cardano.Wallet.DB.Sqlite.Types.HDPassphrase
instance GHC.Read.Read Cardano.Wallet.DB.Sqlite.Types.HDPassphrase
instance Database.Persist.Class.PersistField.PersistField Cardano.Wallet.DB.Sqlite.Types.BlockId
instance Database.Persist.Sql.Class.PersistFieldSql Cardano.Wallet.DB.Sqlite.Types.BlockId
instance GHC.Read.Read Cardano.Wallet.DB.Sqlite.Types.BlockId
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.Wallet.DB.Sqlite.Types.BlockId
instance Data.Aeson.Types.FromJSON.FromJSON Cardano.Wallet.DB.Sqlite.Types.BlockId
instance Web.Internal.HttpApiData.ToHttpApiData Cardano.Wallet.DB.Sqlite.Types.BlockId
instance Web.Internal.HttpApiData.FromHttpApiData Cardano.Wallet.DB.Sqlite.Types.BlockId
instance Web.PathPieces.PathPiece Cardano.Wallet.DB.Sqlite.Types.BlockId
instance Database.Persist.Class.PersistField.PersistField Cardano.Wallet.DB.Sqlite.Types.TxId
instance Database.Persist.Sql.Class.PersistFieldSql Cardano.Wallet.DB.Sqlite.Types.TxId
instance GHC.Read.Read Cardano.Wallet.DB.Sqlite.Types.TxId
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.Wallet.DB.Sqlite.Types.TxId
instance Data.Aeson.Types.FromJSON.FromJSON Cardano.Wallet.DB.Sqlite.Types.TxId
instance Web.Internal.HttpApiData.ToHttpApiData Cardano.Wallet.DB.Sqlite.Types.TxId
instance Web.Internal.HttpApiData.FromHttpApiData Cardano.Wallet.DB.Sqlite.Types.TxId
instance Web.PathPieces.PathPiece Cardano.Wallet.DB.Sqlite.Types.TxId
instance Database.Persist.Class.PersistField.PersistField Cardano.Wallet.Primitive.Types.Direction
instance Database.Persist.Sql.Class.PersistFieldSql Cardano.Wallet.Primitive.Types.Direction
instance Database.Persist.Class.PersistField.PersistField Cardano.Wallet.Primitive.Types.FeePolicy
instance Database.Persist.Sql.Class.PersistFieldSql Cardano.Wallet.Primitive.Types.FeePolicy
instance Database.Persist.Class.PersistField.PersistField Cardano.Wallet.Primitive.Types.WalletId
instance Database.Persist.Sql.Class.PersistFieldSql Cardano.Wallet.Primitive.Types.WalletId
instance GHC.Read.Read Cardano.Wallet.Primitive.Types.WalletId
instance Web.Internal.HttpApiData.ToHttpApiData Cardano.Wallet.Primitive.Types.WalletId
instance Web.Internal.HttpApiData.FromHttpApiData Cardano.Wallet.Primitive.Types.WalletId
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.Wallet.Primitive.Types.WalletId
instance Data.Aeson.Types.FromJSON.FromJSON Cardano.Wallet.Primitive.Types.WalletId
instance Web.PathPieces.PathPiece Cardano.Wallet.Primitive.Types.WalletId
instance Database.Persist.Sql.Class.PersistFieldSql Cardano.Wallet.Primitive.Types.SlotId
instance Database.Persist.Class.PersistField.PersistField Cardano.Wallet.Primitive.Types.SlotId
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.Wallet.Primitive.Types.SlotId
instance Data.Aeson.Types.FromJSON.FromJSON Cardano.Wallet.Primitive.Types.SlotId
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.Wallet.Primitive.Types.SlotNo
instance Data.Aeson.Types.FromJSON.FromJSON Cardano.Wallet.Primitive.Types.SlotNo
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.Wallet.Primitive.Types.EpochNo
instance Data.Aeson.Types.FromJSON.FromJSON Cardano.Wallet.Primitive.Types.EpochNo
instance Web.Internal.HttpApiData.ToHttpApiData Cardano.Wallet.Primitive.Types.SlotId
instance Web.Internal.HttpApiData.FromHttpApiData Cardano.Wallet.Primitive.Types.SlotId
instance Web.PathPieces.PathPiece Cardano.Wallet.Primitive.Types.SlotId
instance Database.Persist.Class.PersistField.PersistField Cardano.Wallet.Primitive.Types.SyncProgress
instance Database.Persist.Sql.Class.PersistFieldSql Cardano.Wallet.Primitive.Types.SyncProgress
instance GHC.Read.Read Cardano.Wallet.Primitive.Types.SyncProgress
instance Database.Persist.Class.PersistField.PersistField Cardano.Wallet.Primitive.Types.TxStatus
instance Database.Persist.Sql.Class.PersistFieldSql Cardano.Wallet.Primitive.Types.TxStatus
instance Database.Persist.Class.PersistField.PersistField Cardano.Wallet.Primitive.Types.Coin
instance Database.Persist.Sql.Class.PersistFieldSql Cardano.Wallet.Primitive.Types.Coin
instance Database.Persist.Class.PersistField.PersistField Cardano.Wallet.Primitive.Types.Address
instance Database.Persist.Sql.Class.PersistFieldSql Cardano.Wallet.Primitive.Types.Address
instance Database.Persist.Class.PersistField.PersistField Cardano.Wallet.Primitive.AddressDiscovery.Sequential.AddressPoolGap
instance Database.Persist.Sql.Class.PersistFieldSql Cardano.Wallet.Primitive.AddressDiscovery.Sequential.AddressPoolGap
instance Database.Persist.Class.PersistField.PersistField Cardano.Wallet.Primitive.AddressDerivation.AccountingStyle
instance Database.Persist.Sql.Class.PersistFieldSql Cardano.Wallet.Primitive.AddressDerivation.AccountingStyle
instance Database.Persist.Class.PersistField.PersistField System.Random.StdGen
instance Database.Persist.Sql.Class.PersistFieldSql System.Random.StdGen
instance Database.Persist.Class.PersistField.PersistField Cardano.Wallet.Primitive.Types.PoolId
instance Database.Persist.Sql.Class.PersistFieldSql Cardano.Wallet.Primitive.Types.PoolId
instance GHC.Read.Read Cardano.Wallet.Primitive.Types.PoolId
instance Web.PathPieces.PathPiece Cardano.Wallet.Primitive.Types.PoolId
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.Wallet.Primitive.Types.PoolId
instance Data.Aeson.Types.FromJSON.FromJSON Cardano.Wallet.Primitive.Types.PoolId


-- | Auto-generated Sqlite &amp; Persistent machinery via Template-Haskell.
--   This has been moved into a separate file so that we can treat it
--   slightly differently when computing code-coverage.
--   
--   More than 6K lines end-up being generated from the instructions below!
--   As a result, we're going to ignore code-coverage on the following
--   module and, no hand-written functions should be written in this
--   module!
module Cardano.Wallet.DB.Sqlite.TH
data Wallet
Wallet :: !WalletId -> !UTCTime -> !Text -> !Maybe UTCTime -> Wallet
[walId] :: Wallet -> !WalletId
[walCreationTime] :: Wallet -> !UTCTime
[walName] :: Wallet -> !Text
[walPassphraseLastUpdatedAt] :: Wallet -> !Maybe UTCTime
type WalletId = Key Wallet
data PrivateKey
PrivateKey :: !WalletId -> !ByteString -> !ByteString -> PrivateKey
[privateKeyWalletId] :: PrivateKey -> !WalletId
[privateKeyRootKey] :: PrivateKey -> !ByteString
[privateKeyHash] :: PrivateKey -> !ByteString
type PrivateKeyId = Key PrivateKey
data TxMeta
TxMeta :: !TxId -> !WalletId -> !TxStatus -> !Direction -> !SlotId -> !Word32 -> !Natural -> TxMeta
[txMetaTxId] :: TxMeta -> !TxId
[txMetaWalletId] :: TxMeta -> !WalletId
[txMetaStatus] :: TxMeta -> !TxStatus
[txMetaDirection] :: TxMeta -> !Direction
[txMetaSlot] :: TxMeta -> !SlotId
[txMetaBlockHeight] :: TxMeta -> !Word32
[txMetaAmount] :: TxMeta -> !Natural
type TxMetaId = Key TxMeta
data TxIn
TxIn :: !TxId -> !Int -> !TxId -> !Word32 -> !Coin -> TxIn
[txInputTxId] :: TxIn -> !TxId
[txInputOrder] :: TxIn -> !Int
[txInputSourceTxId] :: TxIn -> !TxId
[txInputSourceIndex] :: TxIn -> !Word32
[txInputSourceAmount] :: TxIn -> !Coin
type TxInId = Key TxIn
data TxOut
TxOut :: !TxId -> !Word32 -> !Address -> !Coin -> TxOut
[txOutputTxId] :: TxOut -> !TxId
[txOutputIndex] :: TxOut -> !Word32
[txOutputAddress] :: TxOut -> !Address
[txOutputAmount] :: TxOut -> !Coin
type TxOutId = Key TxOut
data Checkpoint
Checkpoint :: !WalletId -> !SlotId -> !BlockId -> !BlockId -> !Word32 -> !BlockId -> !UTCTime -> !FeePolicy -> !Word64 -> !Word32 -> !Word16 -> !Word32 -> Checkpoint
[checkpointWalletId] :: Checkpoint -> !WalletId
[checkpointSlot] :: Checkpoint -> !SlotId
[checkpointHeaderHash] :: Checkpoint -> !BlockId
[checkpointParentHash] :: Checkpoint -> !BlockId
[checkpointBlockHeight] :: Checkpoint -> !Word32
[checkpointGenesisHash] :: Checkpoint -> !BlockId
[checkpointGenesisStart] :: Checkpoint -> !UTCTime
[checkpointFeePolicy] :: Checkpoint -> !FeePolicy
[checkpointSlotLength] :: Checkpoint -> !Word64
[checkpointEpochLength] :: Checkpoint -> !Word32
[checkpointTxMaxSize] :: Checkpoint -> !Word16
[checkpointEpochStability] :: Checkpoint -> !Word32
type CheckpointId = Key Checkpoint
data DelegationCertificate
DelegationCertificate :: !WalletId -> !SlotId -> !PoolId -> DelegationCertificate
[certWalletId] :: DelegationCertificate -> !WalletId
[certSlot] :: DelegationCertificate -> !SlotId
[certPoolId] :: DelegationCertificate -> !PoolId
type DelegationCertificateId = Key DelegationCertificate
data UTxO
UTxO :: !WalletId -> !SlotId -> !TxId -> !Word32 -> !Address -> !Coin -> UTxO
[utxoWalletId] :: UTxO -> !WalletId
[utxoSlot] :: UTxO -> !SlotId
[utxoInputId] :: UTxO -> !TxId
[utxoInputIndex] :: UTxO -> !Word32
[utxoOutputAddress] :: UTxO -> !Address
[utxoOutputCoin] :: UTxO -> !Coin
type UTxOId = Key UTxO
data SeqState
SeqState :: !WalletId -> !AddressPoolGap -> !AddressPoolGap -> !ByteString -> SeqState
[seqStateWalletId] :: SeqState -> !WalletId
[seqStateExternalGap] :: SeqState -> !AddressPoolGap
[seqStateInternalGap] :: SeqState -> !AddressPoolGap
[seqStateAccountXPub] :: SeqState -> !ByteString
type SeqStateId = Key SeqState
data SeqStateAddress
SeqStateAddress :: !WalletId -> !SlotId -> !Address -> !Word32 -> !AccountingStyle -> SeqStateAddress
[seqStateAddressWalletId] :: SeqStateAddress -> !WalletId
[seqStateAddressSlot] :: SeqStateAddress -> !SlotId
[seqStateAddressAddress] :: SeqStateAddress -> !Address
[seqStateAddressIndex] :: SeqStateAddress -> !Word32
[seqStateAddressAccountingStyle] :: SeqStateAddress -> !AccountingStyle
type SeqStateAddressId = Key SeqStateAddress
data SeqStatePendingIx
SeqStatePendingIx :: !WalletId -> !Word32 -> SeqStatePendingIx
[seqStatePendingWalletId] :: SeqStatePendingIx -> !WalletId
[seqStatePendingIxIndex] :: SeqStatePendingIx -> !Word32
type SeqStatePendingIxId = Key SeqStatePendingIx
data RndState
RndState :: !WalletId -> !Word32 -> !StdGen -> !HDPassphrase -> RndState
[rndStateWalletId] :: RndState -> !WalletId
[rndStateAccountIndex] :: RndState -> !Word32
[rndStateGen] :: RndState -> !StdGen
[rndStateHdPassphrase] :: RndState -> !HDPassphrase
type RndStateId = Key RndState
data RndStateAddress
RndStateAddress :: !WalletId -> !SlotId -> !Word32 -> !Word32 -> !Address -> RndStateAddress
[rndStateAddressWalletId] :: RndStateAddress -> !WalletId
[rndStateAddressSlot] :: RndStateAddress -> !SlotId
[rndStateAddressAccountIndex] :: RndStateAddress -> !Word32
[rndStateAddressIndex] :: RndStateAddress -> !Word32
[rndStateAddressAddress] :: RndStateAddress -> !Address
type RndStateAddressId = Key RndStateAddress
data RndStatePendingAddress
RndStatePendingAddress :: !WalletId -> !Word32 -> !Word32 -> !Address -> RndStatePendingAddress
[rndStatePendingAddressWalletId] :: RndStatePendingAddress -> !WalletId
[rndStatePendingAddressAccountIndex] :: RndStatePendingAddress -> !Word32
[rndStatePendingAddressIndex] :: RndStatePendingAddress -> !Word32
[rndStatePendingAddressAddress] :: RndStatePendingAddress -> !Address
type RndStatePendingAddressId = Key RndStatePendingAddress
migrateAll :: Migration
rnd_state_pending_address :: RndStatePendingAddress -> Key Wallet
rnd_state_address :: RndStateAddress -> Key Checkpoint
rnd_state :: RndState -> Key Wallet
seq_state_address_pending :: SeqStatePendingIx -> Key Wallet
seq_state_address :: SeqStateAddress -> Key Checkpoint
seq_state :: SeqState -> Key Wallet
utxo :: UTxO -> Key Checkpoint
delegationCertificate :: DelegationCertificate -> Key Wallet
checkpoint :: Checkpoint -> Key Wallet
fk_wallet_tx_meta :: TxMeta -> Key Wallet
fk_wallet_private_key :: PrivateKey -> Key Wallet
instance GHC.Generics.Generic Cardano.Wallet.DB.Sqlite.TH.RndStatePendingAddress
instance GHC.Show.Show Cardano.Wallet.DB.Sqlite.TH.RndStatePendingAddress
instance GHC.Generics.Generic Cardano.Wallet.DB.Sqlite.TH.RndStateAddress
instance GHC.Show.Show Cardano.Wallet.DB.Sqlite.TH.RndStateAddress
instance GHC.Generics.Generic Cardano.Wallet.DB.Sqlite.TH.RndState
instance GHC.Show.Show Cardano.Wallet.DB.Sqlite.TH.RndState
instance GHC.Generics.Generic Cardano.Wallet.DB.Sqlite.TH.SeqStatePendingIx
instance GHC.Show.Show Cardano.Wallet.DB.Sqlite.TH.SeqStatePendingIx
instance GHC.Generics.Generic Cardano.Wallet.DB.Sqlite.TH.SeqStateAddress
instance GHC.Show.Show Cardano.Wallet.DB.Sqlite.TH.SeqStateAddress
instance GHC.Generics.Generic Cardano.Wallet.DB.Sqlite.TH.SeqState
instance GHC.Show.Show Cardano.Wallet.DB.Sqlite.TH.SeqState
instance GHC.Generics.Generic Cardano.Wallet.DB.Sqlite.TH.UTxO
instance GHC.Show.Show Cardano.Wallet.DB.Sqlite.TH.UTxO
instance GHC.Generics.Generic Cardano.Wallet.DB.Sqlite.TH.DelegationCertificate
instance GHC.Show.Show Cardano.Wallet.DB.Sqlite.TH.DelegationCertificate
instance GHC.Generics.Generic Cardano.Wallet.DB.Sqlite.TH.Checkpoint
instance GHC.Show.Show Cardano.Wallet.DB.Sqlite.TH.Checkpoint
instance GHC.Generics.Generic Cardano.Wallet.DB.Sqlite.TH.TxOut
instance GHC.Show.Show Cardano.Wallet.DB.Sqlite.TH.TxOut
instance GHC.Generics.Generic Cardano.Wallet.DB.Sqlite.TH.TxIn
instance GHC.Show.Show Cardano.Wallet.DB.Sqlite.TH.TxIn
instance GHC.Generics.Generic Cardano.Wallet.DB.Sqlite.TH.TxMeta
instance GHC.Show.Show Cardano.Wallet.DB.Sqlite.TH.TxMeta
instance GHC.Generics.Generic Cardano.Wallet.DB.Sqlite.TH.PrivateKey
instance GHC.Show.Show Cardano.Wallet.DB.Sqlite.TH.PrivateKey
instance GHC.Generics.Generic Cardano.Wallet.DB.Sqlite.TH.Wallet
instance GHC.Show.Show Cardano.Wallet.DB.Sqlite.TH.Wallet
instance Data.Aeson.Types.FromJSON.FromJSON (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.Wallet)
instance Data.Aeson.Types.ToJSON.ToJSON (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.Wallet)
instance Database.Persist.Sql.Class.PersistFieldSql (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.Wallet)
instance Database.Persist.Class.PersistField.PersistField (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.Wallet)
instance Web.Internal.HttpApiData.FromHttpApiData (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.Wallet)
instance Web.Internal.HttpApiData.ToHttpApiData (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.Wallet)
instance Web.PathPieces.PathPiece (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.Wallet)
instance GHC.Classes.Ord (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.Wallet)
instance GHC.Classes.Eq (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.Wallet)
instance GHC.Read.Read (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.Wallet)
instance GHC.Show.Show (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.Wallet)
instance Data.Aeson.Types.FromJSON.FromJSON (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.PrivateKey)
instance Data.Aeson.Types.ToJSON.ToJSON (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.PrivateKey)
instance Database.Persist.Sql.Class.PersistFieldSql (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.PrivateKey)
instance Database.Persist.Class.PersistField.PersistField (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.PrivateKey)
instance Web.Internal.HttpApiData.FromHttpApiData (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.PrivateKey)
instance Web.Internal.HttpApiData.ToHttpApiData (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.PrivateKey)
instance Web.PathPieces.PathPiece (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.PrivateKey)
instance GHC.Classes.Ord (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.PrivateKey)
instance GHC.Classes.Eq (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.PrivateKey)
instance GHC.Read.Read (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.PrivateKey)
instance GHC.Show.Show (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.PrivateKey)
instance GHC.Generics.Generic (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.TxMeta)
instance GHC.Classes.Ord (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.TxMeta)
instance GHC.Classes.Eq (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.TxMeta)
instance GHC.Read.Read (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.TxMeta)
instance GHC.Show.Show (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.TxMeta)
instance GHC.Generics.Generic (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.TxIn)
instance GHC.Classes.Ord (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.TxIn)
instance GHC.Classes.Eq (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.TxIn)
instance GHC.Read.Read (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.TxIn)
instance GHC.Show.Show (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.TxIn)
instance GHC.Generics.Generic (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.TxOut)
instance GHC.Classes.Ord (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.TxOut)
instance GHC.Classes.Eq (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.TxOut)
instance GHC.Read.Read (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.TxOut)
instance GHC.Show.Show (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.TxOut)
instance GHC.Generics.Generic (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.Checkpoint)
instance GHC.Classes.Ord (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.Checkpoint)
instance GHC.Classes.Eq (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.Checkpoint)
instance GHC.Read.Read (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.Checkpoint)
instance GHC.Show.Show (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.Checkpoint)
instance GHC.Generics.Generic (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.DelegationCertificate)
instance GHC.Classes.Ord (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.DelegationCertificate)
instance GHC.Classes.Eq (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.DelegationCertificate)
instance GHC.Read.Read (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.DelegationCertificate)
instance GHC.Show.Show (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.DelegationCertificate)
instance GHC.Generics.Generic (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.UTxO)
instance GHC.Classes.Ord (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.UTxO)
instance GHC.Classes.Eq (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.UTxO)
instance GHC.Read.Read (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.UTxO)
instance GHC.Show.Show (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.UTxO)
instance Data.Aeson.Types.FromJSON.FromJSON (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.SeqState)
instance Data.Aeson.Types.ToJSON.ToJSON (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.SeqState)
instance Database.Persist.Sql.Class.PersistFieldSql (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.SeqState)
instance Database.Persist.Class.PersistField.PersistField (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.SeqState)
instance Web.Internal.HttpApiData.FromHttpApiData (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.SeqState)
instance Web.Internal.HttpApiData.ToHttpApiData (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.SeqState)
instance Web.PathPieces.PathPiece (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.SeqState)
instance GHC.Classes.Ord (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.SeqState)
instance GHC.Classes.Eq (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.SeqState)
instance GHC.Read.Read (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.SeqState)
instance GHC.Show.Show (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.SeqState)
instance Data.Aeson.Types.FromJSON.FromJSON (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.SeqStateAddress)
instance Data.Aeson.Types.ToJSON.ToJSON (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.SeqStateAddress)
instance Database.Persist.Sql.Class.PersistFieldSql (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.SeqStateAddress)
instance Database.Persist.Class.PersistField.PersistField (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.SeqStateAddress)
instance Web.Internal.HttpApiData.FromHttpApiData (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.SeqStateAddress)
instance Web.Internal.HttpApiData.ToHttpApiData (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.SeqStateAddress)
instance Web.PathPieces.PathPiece (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.SeqStateAddress)
instance GHC.Classes.Ord (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.SeqStateAddress)
instance GHC.Classes.Eq (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.SeqStateAddress)
instance GHC.Read.Read (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.SeqStateAddress)
instance GHC.Show.Show (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.SeqStateAddress)
instance GHC.Generics.Generic (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.SeqStatePendingIx)
instance GHC.Classes.Ord (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.SeqStatePendingIx)
instance GHC.Classes.Eq (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.SeqStatePendingIx)
instance GHC.Read.Read (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.SeqStatePendingIx)
instance GHC.Show.Show (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.SeqStatePendingIx)
instance Data.Aeson.Types.FromJSON.FromJSON (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.RndState)
instance Data.Aeson.Types.ToJSON.ToJSON (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.RndState)
instance Database.Persist.Sql.Class.PersistFieldSql (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.RndState)
instance Database.Persist.Class.PersistField.PersistField (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.RndState)
instance Web.Internal.HttpApiData.FromHttpApiData (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.RndState)
instance Web.Internal.HttpApiData.ToHttpApiData (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.RndState)
instance Web.PathPieces.PathPiece (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.RndState)
instance GHC.Classes.Ord (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.RndState)
instance GHC.Classes.Eq (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.RndState)
instance GHC.Read.Read (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.RndState)
instance GHC.Show.Show (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.RndState)
instance Data.Aeson.Types.FromJSON.FromJSON (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.RndStateAddress)
instance Data.Aeson.Types.ToJSON.ToJSON (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.RndStateAddress)
instance Database.Persist.Sql.Class.PersistFieldSql (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.RndStateAddress)
instance Database.Persist.Class.PersistField.PersistField (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.RndStateAddress)
instance Web.Internal.HttpApiData.FromHttpApiData (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.RndStateAddress)
instance Web.Internal.HttpApiData.ToHttpApiData (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.RndStateAddress)
instance Web.PathPieces.PathPiece (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.RndStateAddress)
instance GHC.Classes.Ord (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.RndStateAddress)
instance GHC.Classes.Eq (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.RndStateAddress)
instance GHC.Read.Read (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.RndStateAddress)
instance GHC.Show.Show (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.RndStateAddress)
instance Data.Aeson.Types.FromJSON.FromJSON (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.RndStatePendingAddress)
instance Data.Aeson.Types.ToJSON.ToJSON (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.RndStatePendingAddress)
instance Database.Persist.Sql.Class.PersistFieldSql (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.RndStatePendingAddress)
instance Database.Persist.Class.PersistField.PersistField (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.RndStatePendingAddress)
instance Web.Internal.HttpApiData.FromHttpApiData (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.RndStatePendingAddress)
instance Web.Internal.HttpApiData.ToHttpApiData (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.RndStatePendingAddress)
instance Web.PathPieces.PathPiece (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.RndStatePendingAddress)
instance GHC.Classes.Ord (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.RndStatePendingAddress)
instance GHC.Classes.Eq (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.RndStatePendingAddress)
instance GHC.Read.Read (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.RndStatePendingAddress)
instance GHC.Show.Show (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.RndStatePendingAddress)
instance Database.Persist.Class.PersistField.PersistField Cardano.Wallet.DB.Sqlite.TH.RndStatePendingAddress
instance Database.Persist.Sql.Class.PersistFieldSql Cardano.Wallet.DB.Sqlite.TH.RndStatePendingAddress
instance Database.Persist.Class.PersistEntity.PersistEntity Cardano.Wallet.DB.Sqlite.TH.RndStatePendingAddress
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Cardano.Wallet.DB.Sqlite.TH.RndStatePendingAddress
instance (TypeError ...) => Database.Persist.Class.PersistUnique.OnlyOneUniqueKey Cardano.Wallet.DB.Sqlite.TH.RndStatePendingAddress
instance (TypeError ...) => Database.Persist.Class.PersistUnique.AtLeastOneUniqueKey Cardano.Wallet.DB.Sqlite.TH.RndStatePendingAddress
instance (Database.Persist.Class.PersistQuery backend, Database.Persist.Class.PersistEntity.PersistEntityBackend Cardano.Wallet.DB.Sqlite.TH.RndStatePendingAddress Data.Type.Equality.~ Database.Persist.Class.PersistStore.BaseBackend backend) => Database.Persist.Class.DeleteCascade.DeleteCascade Cardano.Wallet.DB.Sqlite.TH.RndStatePendingAddress backend
instance Database.Persist.Class.PersistField.PersistField Cardano.Wallet.DB.Sqlite.TH.RndStateAddress
instance Database.Persist.Sql.Class.PersistFieldSql Cardano.Wallet.DB.Sqlite.TH.RndStateAddress
instance Database.Persist.Class.PersistEntity.PersistEntity Cardano.Wallet.DB.Sqlite.TH.RndStateAddress
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Cardano.Wallet.DB.Sqlite.TH.RndStateAddress
instance (TypeError ...) => Database.Persist.Class.PersistUnique.OnlyOneUniqueKey Cardano.Wallet.DB.Sqlite.TH.RndStateAddress
instance (TypeError ...) => Database.Persist.Class.PersistUnique.AtLeastOneUniqueKey Cardano.Wallet.DB.Sqlite.TH.RndStateAddress
instance (Database.Persist.Class.PersistQuery backend, Database.Persist.Class.PersistEntity.PersistEntityBackend Cardano.Wallet.DB.Sqlite.TH.RndStateAddress Data.Type.Equality.~ Database.Persist.Class.PersistStore.BaseBackend backend) => Database.Persist.Class.DeleteCascade.DeleteCascade Cardano.Wallet.DB.Sqlite.TH.RndStateAddress backend
instance Database.Persist.Class.PersistEntity.PersistEntity Cardano.Wallet.DB.Sqlite.TH.RndState
instance Database.Persist.Class.PersistField.PersistField Cardano.Wallet.DB.Sqlite.TH.RndState
instance Database.Persist.Sql.Class.PersistFieldSql Cardano.Wallet.DB.Sqlite.TH.RndState
instance (TypeError ...) => Database.Persist.Class.PersistUnique.OnlyOneUniqueKey Cardano.Wallet.DB.Sqlite.TH.RndState
instance (TypeError ...) => Database.Persist.Class.PersistUnique.AtLeastOneUniqueKey Cardano.Wallet.DB.Sqlite.TH.RndState
instance (Database.Persist.Class.PersistQuery backend, Database.Persist.Class.PersistEntity.PersistEntityBackend Cardano.Wallet.DB.Sqlite.TH.RndState Data.Type.Equality.~ Database.Persist.Class.PersistStore.BaseBackend backend) => Database.Persist.Class.DeleteCascade.DeleteCascade Cardano.Wallet.DB.Sqlite.TH.RndState backend
instance Database.Persist.Class.PersistEntity.PersistEntity Cardano.Wallet.DB.Sqlite.TH.SeqStatePendingIx
instance Database.Persist.Class.PersistField.PersistField Cardano.Wallet.DB.Sqlite.TH.SeqStatePendingIx
instance Database.Persist.Sql.Class.PersistFieldSql Cardano.Wallet.DB.Sqlite.TH.SeqStatePendingIx
instance Database.Persist.Class.PersistField.PersistField (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.SeqStatePendingIx)
instance Database.Persist.Sql.Class.PersistFieldSql (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.SeqStatePendingIx)
instance Data.Aeson.Types.ToJSON.ToJSON (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.SeqStatePendingIx)
instance Data.Aeson.Types.FromJSON.FromJSON (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.SeqStatePendingIx)
instance (TypeError ...) => Database.Persist.Class.PersistUnique.OnlyOneUniqueKey Cardano.Wallet.DB.Sqlite.TH.SeqStatePendingIx
instance (TypeError ...) => Database.Persist.Class.PersistUnique.AtLeastOneUniqueKey Cardano.Wallet.DB.Sqlite.TH.SeqStatePendingIx
instance (Database.Persist.Class.PersistQuery backend, Database.Persist.Class.PersistEntity.PersistEntityBackend Cardano.Wallet.DB.Sqlite.TH.SeqStatePendingIx Data.Type.Equality.~ Database.Persist.Class.PersistStore.BaseBackend backend) => Database.Persist.Class.DeleteCascade.DeleteCascade Cardano.Wallet.DB.Sqlite.TH.SeqStatePendingIx backend
instance Database.Persist.Class.PersistField.PersistField Cardano.Wallet.DB.Sqlite.TH.SeqStateAddress
instance Database.Persist.Sql.Class.PersistFieldSql Cardano.Wallet.DB.Sqlite.TH.SeqStateAddress
instance Database.Persist.Class.PersistEntity.PersistEntity Cardano.Wallet.DB.Sqlite.TH.SeqStateAddress
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Cardano.Wallet.DB.Sqlite.TH.SeqStateAddress
instance (TypeError ...) => Database.Persist.Class.PersistUnique.OnlyOneUniqueKey Cardano.Wallet.DB.Sqlite.TH.SeqStateAddress
instance (TypeError ...) => Database.Persist.Class.PersistUnique.AtLeastOneUniqueKey Cardano.Wallet.DB.Sqlite.TH.SeqStateAddress
instance (Database.Persist.Class.PersistQuery backend, Database.Persist.Class.PersistEntity.PersistEntityBackend Cardano.Wallet.DB.Sqlite.TH.SeqStateAddress Data.Type.Equality.~ Database.Persist.Class.PersistStore.BaseBackend backend) => Database.Persist.Class.DeleteCascade.DeleteCascade Cardano.Wallet.DB.Sqlite.TH.SeqStateAddress backend
instance Database.Persist.Class.PersistEntity.PersistEntity Cardano.Wallet.DB.Sqlite.TH.SeqState
instance Database.Persist.Class.PersistField.PersistField Cardano.Wallet.DB.Sqlite.TH.SeqState
instance Database.Persist.Sql.Class.PersistFieldSql Cardano.Wallet.DB.Sqlite.TH.SeqState
instance (TypeError ...) => Database.Persist.Class.PersistUnique.OnlyOneUniqueKey Cardano.Wallet.DB.Sqlite.TH.SeqState
instance (TypeError ...) => Database.Persist.Class.PersistUnique.AtLeastOneUniqueKey Cardano.Wallet.DB.Sqlite.TH.SeqState
instance (Database.Persist.Class.PersistQuery backend, Database.Persist.Class.PersistEntity.PersistEntityBackend Cardano.Wallet.DB.Sqlite.TH.SeqState Data.Type.Equality.~ Database.Persist.Class.PersistStore.BaseBackend backend) => Database.Persist.Class.DeleteCascade.DeleteCascade Cardano.Wallet.DB.Sqlite.TH.SeqState backend
instance Database.Persist.Class.PersistEntity.PersistEntity Cardano.Wallet.DB.Sqlite.TH.UTxO
instance Database.Persist.Class.PersistField.PersistField Cardano.Wallet.DB.Sqlite.TH.UTxO
instance Database.Persist.Sql.Class.PersistFieldSql Cardano.Wallet.DB.Sqlite.TH.UTxO
instance Database.Persist.Class.PersistField.PersistField (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.UTxO)
instance Database.Persist.Sql.Class.PersistFieldSql (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.UTxO)
instance Data.Aeson.Types.ToJSON.ToJSON (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.UTxO)
instance Data.Aeson.Types.FromJSON.FromJSON (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.UTxO)
instance (TypeError ...) => Database.Persist.Class.PersistUnique.OnlyOneUniqueKey Cardano.Wallet.DB.Sqlite.TH.UTxO
instance (TypeError ...) => Database.Persist.Class.PersistUnique.AtLeastOneUniqueKey Cardano.Wallet.DB.Sqlite.TH.UTxO
instance (Database.Persist.Class.PersistQuery backend, Database.Persist.Class.PersistEntity.PersistEntityBackend Cardano.Wallet.DB.Sqlite.TH.UTxO Data.Type.Equality.~ Database.Persist.Class.PersistStore.BaseBackend backend) => Database.Persist.Class.DeleteCascade.DeleteCascade Cardano.Wallet.DB.Sqlite.TH.UTxO backend
instance Database.Persist.Class.PersistEntity.PersistEntity Cardano.Wallet.DB.Sqlite.TH.DelegationCertificate
instance Database.Persist.Class.PersistField.PersistField Cardano.Wallet.DB.Sqlite.TH.DelegationCertificate
instance Database.Persist.Sql.Class.PersistFieldSql Cardano.Wallet.DB.Sqlite.TH.DelegationCertificate
instance Database.Persist.Class.PersistField.PersistField (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.DelegationCertificate)
instance Database.Persist.Sql.Class.PersistFieldSql (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.DelegationCertificate)
instance Data.Aeson.Types.ToJSON.ToJSON (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.DelegationCertificate)
instance Data.Aeson.Types.FromJSON.FromJSON (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.DelegationCertificate)
instance (TypeError ...) => Database.Persist.Class.PersistUnique.OnlyOneUniqueKey Cardano.Wallet.DB.Sqlite.TH.DelegationCertificate
instance (TypeError ...) => Database.Persist.Class.PersistUnique.AtLeastOneUniqueKey Cardano.Wallet.DB.Sqlite.TH.DelegationCertificate
instance (Database.Persist.Class.PersistQuery backend, Database.Persist.Class.PersistEntity.PersistEntityBackend Cardano.Wallet.DB.Sqlite.TH.DelegationCertificate Data.Type.Equality.~ Database.Persist.Class.PersistStore.BaseBackend backend) => Database.Persist.Class.DeleteCascade.DeleteCascade Cardano.Wallet.DB.Sqlite.TH.DelegationCertificate backend
instance Database.Persist.Class.PersistEntity.PersistEntity Cardano.Wallet.DB.Sqlite.TH.Checkpoint
instance Database.Persist.Class.PersistField.PersistField Cardano.Wallet.DB.Sqlite.TH.Checkpoint
instance Database.Persist.Sql.Class.PersistFieldSql Cardano.Wallet.DB.Sqlite.TH.Checkpoint
instance Database.Persist.Class.PersistField.PersistField (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.Checkpoint)
instance Database.Persist.Sql.Class.PersistFieldSql (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.Checkpoint)
instance Data.Aeson.Types.ToJSON.ToJSON (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.Checkpoint)
instance Data.Aeson.Types.FromJSON.FromJSON (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.Checkpoint)
instance (TypeError ...) => Database.Persist.Class.PersistUnique.OnlyOneUniqueKey Cardano.Wallet.DB.Sqlite.TH.Checkpoint
instance (TypeError ...) => Database.Persist.Class.PersistUnique.AtLeastOneUniqueKey Cardano.Wallet.DB.Sqlite.TH.Checkpoint
instance (Database.Persist.Class.PersistQuery backend, Database.Persist.Class.PersistEntity.PersistEntityBackend Cardano.Wallet.DB.Sqlite.TH.Checkpoint Data.Type.Equality.~ Database.Persist.Class.PersistStore.BaseBackend backend) => Database.Persist.Class.DeleteCascade.DeleteCascade Cardano.Wallet.DB.Sqlite.TH.Checkpoint backend
instance Database.Persist.Class.PersistEntity.PersistEntity Cardano.Wallet.DB.Sqlite.TH.TxOut
instance Database.Persist.Class.PersistField.PersistField Cardano.Wallet.DB.Sqlite.TH.TxOut
instance Database.Persist.Sql.Class.PersistFieldSql Cardano.Wallet.DB.Sqlite.TH.TxOut
instance Database.Persist.Class.PersistField.PersistField (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.TxOut)
instance Database.Persist.Sql.Class.PersistFieldSql (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.TxOut)
instance Data.Aeson.Types.ToJSON.ToJSON (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.TxOut)
instance Data.Aeson.Types.FromJSON.FromJSON (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.TxOut)
instance (TypeError ...) => Database.Persist.Class.PersistUnique.OnlyOneUniqueKey Cardano.Wallet.DB.Sqlite.TH.TxOut
instance (TypeError ...) => Database.Persist.Class.PersistUnique.AtLeastOneUniqueKey Cardano.Wallet.DB.Sqlite.TH.TxOut
instance (Database.Persist.Class.PersistQuery backend, Database.Persist.Class.PersistEntity.PersistEntityBackend Cardano.Wallet.DB.Sqlite.TH.TxOut Data.Type.Equality.~ Database.Persist.Class.PersistStore.BaseBackend backend) => Database.Persist.Class.DeleteCascade.DeleteCascade Cardano.Wallet.DB.Sqlite.TH.TxOut backend
instance Database.Persist.Class.PersistEntity.PersistEntity Cardano.Wallet.DB.Sqlite.TH.TxIn
instance Database.Persist.Class.PersistField.PersistField Cardano.Wallet.DB.Sqlite.TH.TxIn
instance Database.Persist.Sql.Class.PersistFieldSql Cardano.Wallet.DB.Sqlite.TH.TxIn
instance Database.Persist.Class.PersistField.PersistField (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.TxIn)
instance Database.Persist.Sql.Class.PersistFieldSql (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.TxIn)
instance Data.Aeson.Types.ToJSON.ToJSON (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.TxIn)
instance Data.Aeson.Types.FromJSON.FromJSON (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.TxIn)
instance (TypeError ...) => Database.Persist.Class.PersistUnique.OnlyOneUniqueKey Cardano.Wallet.DB.Sqlite.TH.TxIn
instance (TypeError ...) => Database.Persist.Class.PersistUnique.AtLeastOneUniqueKey Cardano.Wallet.DB.Sqlite.TH.TxIn
instance (Database.Persist.Class.PersistQuery backend, Database.Persist.Class.PersistEntity.PersistEntityBackend Cardano.Wallet.DB.Sqlite.TH.TxIn Data.Type.Equality.~ Database.Persist.Class.PersistStore.BaseBackend backend) => Database.Persist.Class.DeleteCascade.DeleteCascade Cardano.Wallet.DB.Sqlite.TH.TxIn backend
instance Database.Persist.Class.PersistEntity.PersistEntity Cardano.Wallet.DB.Sqlite.TH.TxMeta
instance Database.Persist.Class.PersistField.PersistField Cardano.Wallet.DB.Sqlite.TH.TxMeta
instance Database.Persist.Sql.Class.PersistFieldSql Cardano.Wallet.DB.Sqlite.TH.TxMeta
instance Database.Persist.Class.PersistField.PersistField (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.TxMeta)
instance Database.Persist.Sql.Class.PersistFieldSql (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.TxMeta)
instance Data.Aeson.Types.ToJSON.ToJSON (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.TxMeta)
instance Data.Aeson.Types.FromJSON.FromJSON (Database.Persist.Class.PersistEntity.Key Cardano.Wallet.DB.Sqlite.TH.TxMeta)
instance (TypeError ...) => Database.Persist.Class.PersistUnique.OnlyOneUniqueKey Cardano.Wallet.DB.Sqlite.TH.TxMeta
instance (TypeError ...) => Database.Persist.Class.PersistUnique.AtLeastOneUniqueKey Cardano.Wallet.DB.Sqlite.TH.TxMeta
instance (Database.Persist.Class.PersistQuery backend, Database.Persist.Class.PersistEntity.PersistEntityBackend Cardano.Wallet.DB.Sqlite.TH.TxMeta Data.Type.Equality.~ Database.Persist.Class.PersistStore.BaseBackend backend) => Database.Persist.Class.DeleteCascade.DeleteCascade Cardano.Wallet.DB.Sqlite.TH.TxMeta backend
instance Database.Persist.Class.PersistEntity.PersistEntity Cardano.Wallet.DB.Sqlite.TH.PrivateKey
instance Database.Persist.Class.PersistField.PersistField Cardano.Wallet.DB.Sqlite.TH.PrivateKey
instance Database.Persist.Sql.Class.PersistFieldSql Cardano.Wallet.DB.Sqlite.TH.PrivateKey
instance (TypeError ...) => Database.Persist.Class.PersistUnique.OnlyOneUniqueKey Cardano.Wallet.DB.Sqlite.TH.PrivateKey
instance (TypeError ...) => Database.Persist.Class.PersistUnique.AtLeastOneUniqueKey Cardano.Wallet.DB.Sqlite.TH.PrivateKey
instance (Database.Persist.Class.PersistQuery backend, Database.Persist.Class.PersistEntity.PersistEntityBackend Cardano.Wallet.DB.Sqlite.TH.PrivateKey Data.Type.Equality.~ Database.Persist.Class.PersistStore.BaseBackend backend) => Database.Persist.Class.DeleteCascade.DeleteCascade Cardano.Wallet.DB.Sqlite.TH.PrivateKey backend
instance Database.Persist.Class.PersistEntity.PersistEntity Cardano.Wallet.DB.Sqlite.TH.Wallet
instance Database.Persist.Class.PersistField.PersistField Cardano.Wallet.DB.Sqlite.TH.Wallet
instance Database.Persist.Sql.Class.PersistFieldSql Cardano.Wallet.DB.Sqlite.TH.Wallet
instance (TypeError ...) => Database.Persist.Class.PersistUnique.OnlyOneUniqueKey Cardano.Wallet.DB.Sqlite.TH.Wallet
instance (TypeError ...) => Database.Persist.Class.PersistUnique.AtLeastOneUniqueKey Cardano.Wallet.DB.Sqlite.TH.Wallet
instance (Database.Persist.Class.PersistQuery backend, Database.Persist.Class.PersistEntity.PersistEntityBackend Cardano.Wallet.DB.Sqlite.TH.Wallet Data.Type.Equality.~ Database.Persist.Class.PersistStore.BaseBackend backend) => Database.Persist.Class.DeleteCascade.DeleteCascade Cardano.Wallet.DB.Sqlite.TH.Wallet backend


-- | Auto-generated Sqlite &amp; Persistent machinery via Template-Haskell.
--   This has been moved into a separate file so that we can treat it
--   slightly differently when computing code-coverage.
module Cardano.Pool.DB.Sqlite.TH
data PoolProduction
PoolProduction :: !PoolId -> !SlotId -> !BlockId -> !BlockId -> !Word32 -> PoolProduction
[poolProductionPoolId] :: PoolProduction -> !PoolId
[poolProductionSlot] :: PoolProduction -> !SlotId
[poolProductionHeaderHash] :: PoolProduction -> !BlockId
[poolProductionParentHash] :: PoolProduction -> !BlockId
[poolProductionBlockHeight] :: PoolProduction -> !Word32
type PoolProductionId = Key PoolProduction
data StakeDistribution
StakeDistribution :: !PoolId -> !Word64 -> !Word64 -> StakeDistribution
[stakeDistributionPoolId] :: StakeDistribution -> !PoolId
[stakeDistributionEpoch] :: StakeDistribution -> !Word64
[stakeDistributionStake] :: StakeDistribution -> !Word64
type StakeDistributionId = Key StakeDistribution
migrateAll :: Migration
instance GHC.Generics.Generic Cardano.Pool.DB.Sqlite.TH.StakeDistribution
instance GHC.Show.Show Cardano.Pool.DB.Sqlite.TH.StakeDistribution
instance GHC.Generics.Generic Cardano.Pool.DB.Sqlite.TH.PoolProduction
instance GHC.Show.Show Cardano.Pool.DB.Sqlite.TH.PoolProduction
instance Data.Aeson.Types.FromJSON.FromJSON (Database.Persist.Class.PersistEntity.Key Cardano.Pool.DB.Sqlite.TH.PoolProduction)
instance Data.Aeson.Types.ToJSON.ToJSON (Database.Persist.Class.PersistEntity.Key Cardano.Pool.DB.Sqlite.TH.PoolProduction)
instance Database.Persist.Sql.Class.PersistFieldSql (Database.Persist.Class.PersistEntity.Key Cardano.Pool.DB.Sqlite.TH.PoolProduction)
instance Database.Persist.Class.PersistField.PersistField (Database.Persist.Class.PersistEntity.Key Cardano.Pool.DB.Sqlite.TH.PoolProduction)
instance Web.Internal.HttpApiData.FromHttpApiData (Database.Persist.Class.PersistEntity.Key Cardano.Pool.DB.Sqlite.TH.PoolProduction)
instance Web.Internal.HttpApiData.ToHttpApiData (Database.Persist.Class.PersistEntity.Key Cardano.Pool.DB.Sqlite.TH.PoolProduction)
instance Web.PathPieces.PathPiece (Database.Persist.Class.PersistEntity.Key Cardano.Pool.DB.Sqlite.TH.PoolProduction)
instance GHC.Classes.Ord (Database.Persist.Class.PersistEntity.Key Cardano.Pool.DB.Sqlite.TH.PoolProduction)
instance GHC.Classes.Eq (Database.Persist.Class.PersistEntity.Key Cardano.Pool.DB.Sqlite.TH.PoolProduction)
instance GHC.Read.Read (Database.Persist.Class.PersistEntity.Key Cardano.Pool.DB.Sqlite.TH.PoolProduction)
instance GHC.Show.Show (Database.Persist.Class.PersistEntity.Key Cardano.Pool.DB.Sqlite.TH.PoolProduction)
instance GHC.Generics.Generic (Database.Persist.Class.PersistEntity.Key Cardano.Pool.DB.Sqlite.TH.StakeDistribution)
instance GHC.Classes.Ord (Database.Persist.Class.PersistEntity.Key Cardano.Pool.DB.Sqlite.TH.StakeDistribution)
instance GHC.Classes.Eq (Database.Persist.Class.PersistEntity.Key Cardano.Pool.DB.Sqlite.TH.StakeDistribution)
instance GHC.Read.Read (Database.Persist.Class.PersistEntity.Key Cardano.Pool.DB.Sqlite.TH.StakeDistribution)
instance GHC.Show.Show (Database.Persist.Class.PersistEntity.Key Cardano.Pool.DB.Sqlite.TH.StakeDistribution)
instance Database.Persist.Class.PersistEntity.PersistEntity Cardano.Pool.DB.Sqlite.TH.StakeDistribution
instance Database.Persist.Class.PersistField.PersistField Cardano.Pool.DB.Sqlite.TH.StakeDistribution
instance Database.Persist.Sql.Class.PersistFieldSql Cardano.Pool.DB.Sqlite.TH.StakeDistribution
instance Database.Persist.Class.PersistField.PersistField (Database.Persist.Class.PersistEntity.Key Cardano.Pool.DB.Sqlite.TH.StakeDistribution)
instance Database.Persist.Sql.Class.PersistFieldSql (Database.Persist.Class.PersistEntity.Key Cardano.Pool.DB.Sqlite.TH.StakeDistribution)
instance Data.Aeson.Types.ToJSON.ToJSON (Database.Persist.Class.PersistEntity.Key Cardano.Pool.DB.Sqlite.TH.StakeDistribution)
instance Data.Aeson.Types.FromJSON.FromJSON (Database.Persist.Class.PersistEntity.Key Cardano.Pool.DB.Sqlite.TH.StakeDistribution)
instance (TypeError ...) => Database.Persist.Class.PersistUnique.OnlyOneUniqueKey Cardano.Pool.DB.Sqlite.TH.StakeDistribution
instance (TypeError ...) => Database.Persist.Class.PersistUnique.AtLeastOneUniqueKey Cardano.Pool.DB.Sqlite.TH.StakeDistribution
instance (Database.Persist.Class.PersistQuery backend, Database.Persist.Class.PersistEntity.PersistEntityBackend Cardano.Pool.DB.Sqlite.TH.StakeDistribution Data.Type.Equality.~ Database.Persist.Class.PersistStore.BaseBackend backend) => Database.Persist.Class.DeleteCascade.DeleteCascade Cardano.Pool.DB.Sqlite.TH.StakeDistribution backend
instance Database.Persist.Class.PersistEntity.PersistEntity Cardano.Pool.DB.Sqlite.TH.PoolProduction
instance Database.Persist.Class.PersistField.PersistField Cardano.Pool.DB.Sqlite.TH.PoolProduction
instance Database.Persist.Sql.Class.PersistFieldSql Cardano.Pool.DB.Sqlite.TH.PoolProduction
instance (TypeError ...) => Database.Persist.Class.PersistUnique.OnlyOneUniqueKey Cardano.Pool.DB.Sqlite.TH.PoolProduction
instance (TypeError ...) => Database.Persist.Class.PersistUnique.AtLeastOneUniqueKey Cardano.Pool.DB.Sqlite.TH.PoolProduction
instance (Database.Persist.Class.PersistQuery backend, Database.Persist.Class.PersistEntity.PersistEntityBackend Cardano.Pool.DB.Sqlite.TH.PoolProduction Data.Type.Equality.~ Database.Persist.Class.PersistStore.BaseBackend backend) => Database.Persist.Class.DeleteCascade.DeleteCascade Cardano.Pool.DB.Sqlite.TH.PoolProduction backend


-- | Database / Persistence layer for the wallet backend. This is where we
--   define the interface allowing us to store and fetch various data on
--   our wallets.
module Cardano.Wallet.DB

-- | A Database interface for storing various things in a DB. In practice,
--   we'll need some extra contraints on the wallet state that allows us to
--   serialize and unserialize it (e.g. <tt>forall s. (Serialize s) =&gt;
--   ...</tt>)
--   
--   NOTE:
--   
--   We can't use record accessors on the DBLayer as it carries an
--   existential within its constructor. We are forced to pattern-match on
--   the <a>DBLayer</a> record type in order to be able to use its methods
--   in any context. With NamedFieldPuns, or RecordWildCards, this can be
--   quite easy:
--   
--   <pre>
--   myFunction DBLayer{..} = do
--       ...
--   
--   myOtherFunction DBLayer{atomically,initializeWallet} = do
--       ...
--   </pre>
--   
--   Alternatively, in some other context where the database may not be a
--   function argument but come from a different source, it is possible to
--   simply rely on 'Data.Function.(&amp;)' to easily pattern match on it:
--   
--   <pre>
--   myFunction arg0 arg1 = db &amp; DBLayer{..} -&gt; do
--       ...
--     where
--       db = ...
--   </pre>
--   
--   Note that it isn't possible to simply use a <tt>where</tt> clause or a
--   <tt>let</tt> binding here as the semantic for those are slightly
--   different: we really need a pattern match here!
data DBLayer m s k
DBLayer :: (PrimaryKey WalletId -> Wallet s -> WalletMetadata -> [(Tx, TxMeta)] -> ExceptT ErrWalletAlreadyExists stm ()) -> (PrimaryKey WalletId -> ExceptT ErrNoSuchWallet stm ()) -> stm [PrimaryKey WalletId] -> (PrimaryKey WalletId -> Wallet s -> ExceptT ErrNoSuchWallet stm ()) -> (PrimaryKey WalletId -> stm (Maybe (Wallet s))) -> (PrimaryKey WalletId -> stm [BlockHeader]) -> (PrimaryKey WalletId -> WalletMetadata -> ExceptT ErrNoSuchWallet stm ()) -> (PrimaryKey WalletId -> stm (Maybe WalletMetadata)) -> (PrimaryKey WalletId -> PoolId -> SlotId -> ExceptT ErrNoSuchWallet stm ()) -> (PrimaryKey WalletId -> [(Tx, TxMeta)] -> ExceptT ErrNoSuchWallet stm ()) -> (PrimaryKey WalletId -> SortOrder -> Range SlotId -> Maybe TxStatus -> stm [(Tx, TxMeta)]) -> (PrimaryKey WalletId -> Hash "Tx" -> ExceptT ErrRemovePendingTx stm ()) -> (PrimaryKey WalletId -> (k  'RootK XPrv, Hash "encryption") -> ExceptT ErrNoSuchWallet stm ()) -> (PrimaryKey WalletId -> stm (Maybe (k  'RootK XPrv, Hash "encryption"))) -> (PrimaryKey WalletId -> SlotId -> ExceptT ErrNoSuchWallet stm ()) -> (PrimaryKey WalletId -> ExceptT ErrNoSuchWallet stm ()) -> (forall a. stm a -> m a) -> DBLayer m s k

-- | Initialize a database entry for a given wallet. <a>putCheckpoint</a>,
--   <a>putWalletMeta</a> or <a>putTxHistory</a> will actually all fail if
--   they are called _first_ on a wallet.
[initializeWallet] :: DBLayer m s k -> PrimaryKey WalletId -> Wallet s -> WalletMetadata -> [(Tx, TxMeta)] -> ExceptT ErrWalletAlreadyExists stm ()

-- | Remove a given wallet and all its associated data (checkpoints,
--   metadata, tx history ...)
[removeWallet] :: DBLayer m s k -> PrimaryKey WalletId -> ExceptT ErrNoSuchWallet stm ()

-- | Get the list of all known wallets in the DB, possibly empty.
[listWallets] :: DBLayer m s k -> stm [PrimaryKey WalletId]

-- | Replace the current checkpoint for a given wallet. We do not handle
--   rollbacks yet, and therefore only stores the latest available
--   checkpoint.
--   
--   If the wallet doesn't exist, this operation returns an error.
[putCheckpoint] :: DBLayer m s k -> PrimaryKey WalletId -> Wallet s -> ExceptT ErrNoSuchWallet stm ()

-- | Fetch the most recent checkpoint of a given wallet.
--   
--   Return <a>Nothing</a> if there's no such wallet.
[readCheckpoint] :: DBLayer m s k -> PrimaryKey WalletId -> stm (Maybe (Wallet s))

-- | List all known checkpoint tips, ordered by slot ids from the oldest to
--   the newest.
[listCheckpoints] :: DBLayer m s k -> PrimaryKey WalletId -> stm [BlockHeader]

-- | Replace an existing wallet metadata with the given one.
--   
--   If the wallet doesn't exist, this operation returns an error
[putWalletMeta] :: DBLayer m s k -> PrimaryKey WalletId -> WalletMetadata -> ExceptT ErrNoSuchWallet stm ()

-- | Fetch a wallet metadata, if they exist.
--   
--   Return <a>Nothing</a> if there's no such wallet.
[readWalletMeta] :: DBLayer m s k -> PrimaryKey WalletId -> stm (Maybe WalletMetadata)

-- | Binds a stake pool id to a wallet. This will have an influence on the
--   wallet metadata: the last known certificate will indicate to which
--   pool a wallet is currently delegating to.
--   
--   This is done separately from <a>putWalletMeta</a> because certificate
--   declaration are:
--   
--   <ol>
--   <li>Stored on-chain</li>
--   <li>Affected by rollbacks (or said differently, tight to a
--   <a>SlotId</a>)</li>
--   </ol>
[putDelegationCertificate] :: DBLayer m s k -> PrimaryKey WalletId -> PoolId -> SlotId -> ExceptT ErrNoSuchWallet stm ()

-- | Augments the transaction history for a known wallet.
--   
--   If an entry for a particular transaction already exists it is not
--   altered nor merged (just ignored).
--   
--   If the wallet doesn't exist, this operation returns an error.
[putTxHistory] :: DBLayer m s k -> PrimaryKey WalletId -> [(Tx, TxMeta)] -> ExceptT ErrNoSuchWallet stm ()

-- | Fetch the current transaction history of a known wallet, ordered by
--   descending slot number.
--   
--   Returns an empty list if the wallet isn't found.
[readTxHistory] :: DBLayer m s k -> PrimaryKey WalletId -> SortOrder -> Range SlotId -> Maybe TxStatus -> stm [(Tx, TxMeta)]

-- | Remove a pending transaction.
[removePendingTx] :: DBLayer m s k -> PrimaryKey WalletId -> Hash "Tx" -> ExceptT ErrRemovePendingTx stm ()

-- | Store or replace a private key for a given wallet. Note that wallet
--   _could_ be stored and manipulated without any private key associated
--   to it. A private key is only seldomly required for very specific
--   operations (like transaction signing).
[putPrivateKey] :: DBLayer m s k -> PrimaryKey WalletId -> (k  'RootK XPrv, Hash "encryption") -> ExceptT ErrNoSuchWallet stm ()

-- | Read a previously stored private key and its associated passphrase
--   hash.
[readPrivateKey] :: DBLayer m s k -> PrimaryKey WalletId -> stm (Maybe (k  'RootK XPrv, Hash "encryption"))

-- | Drops all checkpoints and transaction data after the given slot.
[rollbackTo] :: DBLayer m s k -> PrimaryKey WalletId -> SlotId -> ExceptT ErrNoSuchWallet stm ()

-- | Prune database entities and remove entities that can be discarded.
[prune] :: DBLayer m s k -> PrimaryKey WalletId -> ExceptT ErrNoSuchWallet stm ()

-- | Execute operations of the database in isolation and atomically.
[atomically] :: DBLayer m s k -> forall a. stm a -> m a

-- | Instantiate database layers at will
data DBFactory m s k
DBFactory :: (WalletId -> (DBLayer m s k -> IO ()) -> IO ()) -> (WalletId -> IO ()) -> DBFactory m s k

-- | Creates a new or use an existing database, maintaining an open
--   connection so long as necessary
[withDatabase] :: DBFactory m s k -> WalletId -> (DBLayer m s k -> IO ()) -> IO ()

-- | Erase any trace of the database
[removeDatabase] :: DBFactory m s k -> WalletId -> IO ()

-- | A primary key which can take many forms depending on the value. This
--   may become a type family as we move forward, but for now, it
--   illustrate that some queries are ran against some sort of store;
--   
--   As a matter of fact, we may manipulate multiple wallets at the same
--   time, so, functions like <tt>enqueueCheckpoint</tt> needs to be
--   associated to a corresponding wallet. Some other may not because they
--   are information valid for all wallets (like for instance, the last
--   known network tip).
newtype PrimaryKey key
PrimaryKey :: key -> PrimaryKey key

-- | Clean a database by removing all wallets.
cleanDB :: DBLayer m s k -> m ()

-- | Storing EVERY checkpoints in the database is quite expensive and
--   useless. We make the following assumptions:
--   
--   <ul>
--   <li>We can't rollback for more than `k=epochStability` blocks in the
--   past</li>
--   <li>It is pretty fast to re-sync a few hundred blocks</li>
--   <li>Small rollbacks may occur more often than long one</li>
--   </ul>
--   
--   So, as we insert checkpoints, we make sure to:
--   
--   <ul>
--   <li>Prune any checkpoint that more than <tt>k</tt> blocks in the
--   past</li>
--   <li>Keep only one checkpoint every 100 blocks</li>
--   <li>But still keep ~10 most recent checkpoints to cope with small
--   rollbacks</li>
--   </ul>
--   
--   <b>Example 1</b>: Inserting <tt>cp153</tt>
--   
--   ℹ: <tt>cp142</tt> is discarded and <tt>cp153</tt> inserted.
--   
--   <pre>
--    Currently in DB:
--   ┌───┬───┬───┬─  ──┬───┐
--   │cp000 │cp100 │cp142 │..    ..│cp152 │
--   └───┴───┴───┴─  ──┴───┘
--    Want in DB:
--   ┌───┬───┬───┬─  ──┬───┐
--   │cp000 │cp100 │cp143 │..    ..│cp153 │
--   └───┴───┴───┴─  ──┴───┘
--    
--   </pre>
--   
--   <b>Example 2</b>: Inserting <tt>cp111</tt>
--   
--   ℹ: <tt>cp100</tt> is kept and <tt>cp111</tt> inserted.
--   
--   <pre>
--    Currently in DB:
--   ┌───┬───┬───┬─  ──┬───┐
--   │cp000 │cp100 │cp101 │..    ..│cp110 │
--   └───┴───┴───┴─  ──┴───┘
--    Want in DB:
--   ┌───┬───┬───┬─  ──┬───┐
--   │cp000 │cp100 │cp101 │..    ..│cp111 │
--   └───┴───┴───┴─  ──┴───┘
--    
--   </pre>
--   
--   NOTE: There might be cases where the chain following "fails" (because,
--   for example, the node has switch to a different chain, different by
--   more than k), and in such cases, we have no choice but rolling back
--   from genesis. Therefore, we need to keep the very first checkpoint in
--   the database, no matter what.
sparseCheckpoints :: Quantity "block" Word32 -> Quantity "block" Word32 -> [Word32]

-- | Can't perform removing pending transaction
data ErrRemovePendingTx
ErrRemovePendingTxNoSuchWallet :: ErrNoSuchWallet -> ErrRemovePendingTx
ErrRemovePendingTxNoSuchTransaction :: Hash "Tx" -> ErrRemovePendingTx
ErrRemovePendingTxTransactionNoMorePending :: Hash "Tx" -> ErrRemovePendingTx

-- | Can't perform given operation because there's no wallet
newtype ErrNoSuchWallet
ErrNoSuchWallet :: WalletId -> ErrNoSuchWallet

-- | Forbidden operation was executed on an already existing wallet
newtype ErrWalletAlreadyExists
ErrWalletAlreadyExists :: WalletId -> ErrWalletAlreadyExists
instance GHC.Generics.Generic (Cardano.Wallet.DB.DBFactory m s k)
instance GHC.Classes.Ord key => GHC.Classes.Ord (Cardano.Wallet.DB.PrimaryKey key)
instance GHC.Classes.Eq key => GHC.Classes.Eq (Cardano.Wallet.DB.PrimaryKey key)
instance GHC.Show.Show key => GHC.Show.Show (Cardano.Wallet.DB.PrimaryKey key)
instance GHC.Show.Show Cardano.Wallet.DB.ErrWalletAlreadyExists
instance GHC.Classes.Eq Cardano.Wallet.DB.ErrWalletAlreadyExists
instance GHC.Show.Show Cardano.Wallet.DB.ErrNoSuchTransaction
instance GHC.Classes.Eq Cardano.Wallet.DB.ErrNoSuchTransaction
instance GHC.Show.Show Cardano.Wallet.DB.ErrRemovePendingTx
instance GHC.Classes.Eq Cardano.Wallet.DB.ErrRemovePendingTx
instance GHC.Show.Show Cardano.Wallet.DB.ErrNoSuchWallet
instance GHC.Classes.Eq Cardano.Wallet.DB.ErrNoSuchWallet


-- | Dummy implementation of the database-layer, using <a>MVar</a>. This
--   may be good for testing to compare with an implementation on a real
--   data store, or to use when compiling the wallet for targets which
--   don't have SQLite.
module Cardano.Wallet.DB.MVar

-- | Instantiate a new in-memory "database" layer that simply stores data
--   in a local MVar. Data vanishes if the software is shut down.
newDBLayer :: forall s k. NFData (k  'RootK XPrv) => IO (DBLayer IO s k)
instance GHC.Show.Show Cardano.Wallet.DB.MVar.MVarDBError
instance GHC.Exception.Type.Exception Cardano.Wallet.DB.MVar.MVarDBError


-- | Provides wallet layer functions that are used by API layer. Uses both
--   <a>Cardano.Wallet.DB</a> and <a>Cardano.Wallet.Network</a> to realize
--   its role as being intermediary between the three.
--   
--   Functions of the wallet layer are often parameterized with variables
--   following the convention below:
--   
--   <ul>
--   <li><tt>s</tt>: A <b>s</b>tate used to keep track of known addresses.
--   Typically, possible values for this parameter are described in
--   <a>AddressDiscovery</a> sub-modules. For instance <tt>SeqState</tt> or
--   <tt>Rnd State</tt>.</li>
--   <li><tt>t</tt>: A <b>t</b>arget backend which captures details
--   specific to a particular chain producer (binary formats, fee policy,
--   networking layer).</li>
--   <li><tt>k</tt>: A <b>k</b>ey derivation scheme intrisically connected
--   to the underlying discovery state <tt>s</tt>. This describes how the
--   hierarchical structure of a wallet is defined as well as the
--   relationship between secret keys and public addresses.</li>
--   </ul>
module Cardano.Wallet
data WalletLayer s t (k :: Depth -> * -> *)
WalletLayer :: Trace IO Text -> (Block, BlockchainParameters, SyncTolerance) -> NetworkLayer IO t Block -> TransactionLayer t k -> DBLayer IO s k -> WalletLayer s t
type HasDBLayer s k = HasType (DBLayer IO s k)
dbLayer :: forall s k ctx. HasDBLayer s k ctx => Lens' ctx (DBLayer IO s k)
type HasLogger = HasType (Trace IO Text)
logger :: forall ctx. HasLogger ctx => Lens' ctx (Trace IO Text)

-- | This module is only interested in one block-, and tx-type. This
--   constraint hides that choice, for some ease of use.
type HasNetworkLayer t = HasType (NetworkLayer IO t Block)
networkLayer :: forall t ctx. HasNetworkLayer t ctx => Lens' ctx (NetworkLayer IO t Block)
type HasTransactionLayer t k = HasType (TransactionLayer t k)
transactionLayer :: forall t k ctx. HasTransactionLayer t k ctx => Lens' ctx (TransactionLayer t k)
type HasGenesisData = HasType (Block, BlockchainParameters, SyncTolerance)
genesisData :: forall ctx. HasGenesisData ctx => Lens' ctx (Block, BlockchainParameters, SyncTolerance)

-- | Initialise and store a new wallet, returning its ID.
createWallet :: forall ctx s k. (HasGenesisData ctx, HasDBLayer s k ctx, Show s, NFData s, IsOurs s) => ctx -> WalletId -> WalletName -> s -> ExceptT ErrWalletAlreadyExists IO WalletId

-- | Attach a given private key to a wallet. The private key is necessary
--   for some operations like signing transactions, or generating new
--   accounts.
attachPrivateKey :: forall ctx s k. HasDBLayer s k ctx => ctx -> WalletId -> (k  'RootK XPrv, Passphrase "encryption") -> ExceptT ErrNoSuchWallet IO ()

-- | List the wallet's UTxO statistics.
listUtxoStatistics :: forall ctx s k. HasDBLayer s k ctx => ctx -> WalletId -> ExceptT ErrListUTxOStatistics IO UTxOStatistics

-- | Retrieve the wallet state for the wallet with the given ID.
readWallet :: forall ctx s k. HasDBLayer s k ctx => ctx -> WalletId -> ExceptT ErrNoSuchWallet IO (Wallet s, WalletMetadata, Set Tx)

-- | Remove an existing wallet. Note that there's no particular work to be
--   done regarding the restoration worker as it will simply terminate on
--   the next tick when noticing that the corresponding wallet is gone.
deleteWallet :: forall ctx s k. HasDBLayer s k ctx => ctx -> WalletId -> ExceptT ErrNoSuchWallet IO ()

-- | Restore a wallet from its current tip up to the network tip.
--   
--   This function returns immediately, starting a worker thread in the
--   background that will fetch and apply remaining blocks until the
--   network tip is reached or until failure.
restoreWallet :: forall ctx s t k. (HasLogger ctx, HasNetworkLayer t ctx, HasDBLayer s k ctx, HasGenesisData ctx) => ctx -> WalletId -> ExceptT ErrNoSuchWallet IO ()

-- | Update a wallet's metadata with the given update function.
updateWallet :: forall ctx s k. HasDBLayer s k ctx => ctx -> WalletId -> (WalletMetadata -> WalletMetadata) -> ExceptT ErrNoSuchWallet IO ()

-- | Change a wallet's passphrase to the given passphrase.
updateWalletPassphrase :: forall ctx s k. (HasDBLayer s k ctx, WalletKey k) => ctx -> WalletId -> (Passphrase "encryption-old", Passphrase "encryption-new") -> ExceptT ErrUpdatePassphrase IO ()
walletSyncProgress :: forall ctx s. HasGenesisData ctx => ctx -> Wallet s -> IO SyncProgress

-- | Forbidden operation was executed on an already existing wallet
newtype ErrWalletAlreadyExists
ErrWalletAlreadyExists :: WalletId -> ErrWalletAlreadyExists

-- | Can't perform given operation because there's no wallet
newtype ErrNoSuchWallet
ErrNoSuchWallet :: WalletId -> ErrNoSuchWallet

-- | Errors that can occur when listing UTxO statistics.
newtype ErrListUTxOStatistics
ErrListUTxOStatisticsNoSuchWallet :: ErrNoSuchWallet -> ErrListUTxOStatistics

-- | Errors that can occur when trying to change a wallet's passphrase.
data ErrUpdatePassphrase
ErrUpdatePassphraseNoSuchWallet :: ErrNoSuchWallet -> ErrUpdatePassphrase
ErrUpdatePassphraseWithRootKey :: ErrWithRootKey -> ErrUpdatePassphrase

-- | List all addresses of a wallet with their metadata. Addresses are
--   ordered from the most-recently-discovered to the oldest known.
listAddresses :: forall ctx s k. (HasDBLayer s k ctx, IsOurs s, CompareDiscovery s, KnownAddresses s) => ctx -> WalletId -> ExceptT ErrNoSuchWallet IO [(Address, AddressState)]

-- | Prepare a transaction and automatically select inputs from the wallet
--   to cover the requested outputs. Note that this only runs coin
--   selection for the given outputs. In order to construct (and sign) an
--   actual transaction, use <a>signTx</a>.
createUnsignedTx :: forall ctx s t k e. (HasTransactionLayer t k ctx, HasLogger ctx, HasDBLayer s k ctx, e ~ ErrValidateSelection t) => ctx -> WalletId -> NonEmpty TxOut -> ExceptT (ErrCreateUnsignedTx e) IO CoinSelection

-- | Estimate a transaction fee by automatically selecting inputs from the
--   wallet to cover the requested outputs.
estimateTxFee :: forall ctx s t k e. (HasTransactionLayer t k ctx, HasDBLayer s k ctx, e ~ ErrValidateSelection t) => ctx -> WalletId -> NonEmpty TxOut -> ExceptT (ErrEstimateTxFee e) IO Fee

-- | Forget pending transaction.
forgetPendingTx :: forall ctx s k. HasDBLayer s k ctx => ctx -> WalletId -> Hash "Tx" -> ExceptT ErrRemovePendingTx IO ()

-- | List all transactions and metadata from history for a given wallet.
listTransactions :: forall ctx s k. HasDBLayer s k ctx => ctx -> WalletId -> Maybe UTCTime -> Maybe UTCTime -> SortOrder -> ExceptT ErrListTransactions IO [TransactionInfo]

-- | Produce witnesses and construct a transaction from a given selection.
--   Requires the encryption passphrase in order to decrypt the root
--   private key. Note that this doesn't broadcast the transaction to the
--   network. In order to do so, use <a>submitTx</a>.
signTx :: forall ctx s t k. (HasTransactionLayer t k ctx, HasDBLayer s k ctx, Show s, NFData s, IsOwned s k, GenChange s) => ctx -> WalletId -> ArgGenChange s -> Passphrase "encryption" -> CoinSelection -> ExceptT ErrSignTx IO (Tx, TxMeta, UTCTime, [TxWitness])

-- | Broadcast an externally-signed transaction to the network.
submitExternalTx :: forall ctx t k. (HasNetworkLayer t ctx, HasTransactionLayer t k ctx) => ctx -> ByteString -> ExceptT ErrSubmitExternalTx IO Tx

-- | Broadcast a (signed) transaction to the network.
submitTx :: forall ctx s t k. (HasNetworkLayer t ctx, HasDBLayer s k ctx) => ctx -> WalletId -> (Tx, TxMeta, [TxWitness]) -> ExceptT ErrSubmitTx IO ()

-- | Constructs a set of coin selections that select all funds from the
--   given source wallet, returning them as change.
--   
--   If the coin selections returned by this function are used to create
--   transactions from the given wallet to a target wallet, executing those
--   transactions will have the effect of migrating all funds from the
--   given source wallet to the specified target wallet.
createMigrationSourceData :: forall ctx s t k. (HasTransactionLayer t k ctx, HasDBLayer s k ctx) => ctx -> WalletId -> ExceptT ErrNoSuchWallet IO [CoinSelection]

-- | Transform the given set of migration coin selections (for a source
--   wallet) into a set of coin selections that will migrate funds to the
--   specified target wallet.
--   
--   Each change entry in the specified set of coin selections is replaced
--   with a corresponding output entry in the returned set, where the
--   output entry has a address corresponding to the target wallet.
--   
--   All addresses generated by this function are also registered as
--   pending change addresses for the target wallet.
assignMigrationTargetAddresses :: forall ctx s k. (HasDBLayer s k ctx, GenChange s, IsOurs s, NFData s, Show s) => ctx -> WalletId -> ArgGenChange s -> [CoinSelection] -> ExceptT ErrNoSuchWallet IO [CoinSelection]

-- | Errors that can occur when creating an unsigned transaction.
data ErrCreateUnsignedTx e
ErrCreateUnsignedTxNoSuchWallet :: ErrNoSuchWallet -> ErrCreateUnsignedTx e
ErrCreateUnsignedTxCoinSelection :: ErrCoinSelection e -> ErrCreateUnsignedTx e
ErrCreateUnsignedTxFee :: ErrAdjustForFee -> ErrCreateUnsignedTx e

-- | Errors that can occur when estimating transaction fees.
data ErrEstimateTxFee e
ErrEstimateTxFeeNoSuchWallet :: ErrNoSuchWallet -> ErrEstimateTxFee e
ErrEstimateTxFeeCoinSelection :: ErrCoinSelection e -> ErrEstimateTxFee e

-- | Errors that can occur when signing a transaction.
data ErrSignTx
ErrSignTx :: ErrMkStdTx -> ErrSignTx
ErrSignTxNoSuchWallet :: ErrNoSuchWallet -> ErrSignTx
ErrSignTxWithRootKey :: ErrWithRootKey -> ErrSignTx

-- | Possible signing error
newtype ErrMkStdTx

-- | We tried to sign a transaction with inputs that are unknown to us?
ErrKeyNotFoundForAddress :: Address -> ErrMkStdTx
newtype ErrAdjustForFee

-- | UTxO exhausted during fee covering We record what amount missed to
--   cover the fee
ErrCannotCoverFee :: Word64 -> ErrAdjustForFee
data ErrCoinSelection e

-- | UTxO exhausted during input selection We record the balance of the
--   UTxO as well as the size of the payment we tried to make.
ErrNotEnoughMoney :: Word64 -> Word64 -> ErrCoinSelection e

-- | UTxO is not enough fragmented for the number of transaction outputs We
--   record the number of UTxO entries as well as the number of the outputs
--   of the transaction.
ErrUtxoNotEnoughFragmented :: Word64 -> Word64 -> ErrCoinSelection e

-- | When trying to construct a transaction, the max number of allowed
--   inputs was reached.
ErrMaximumInputsReached :: Word64 -> ErrCoinSelection e

-- | When trying to construct a transaction, the available inputs are
--   depleted even when UTxO is properly fragmented and with enough funds
--   to cover payment
ErrInputsDepleted :: ErrCoinSelection e

-- | Somewhat, we ended up generating an invalid coin selection because of
--   inputs passed down to the coin selection function, or because a target
--   backend has extra-limitations not covered by our coin selection
--   algorithm.
ErrInvalidSelection :: e -> ErrCoinSelection e

-- | Errors that can occur when submitting a signed transaction to the
--   network.
data ErrSubmitTx
ErrSubmitTxNetwork :: ErrPostTx -> ErrSubmitTx
ErrSubmitTxNoSuchWallet :: ErrNoSuchWallet -> ErrSubmitTx

-- | Errors that can occur when submitting an externally-signed transaction
--   to the network.
data ErrSubmitExternalTx
ErrSubmitExternalTxNetwork :: ErrPostTx -> ErrSubmitExternalTx
ErrSubmitExternalTxDecode :: ErrDecodeSignedTx -> ErrSubmitExternalTx

-- | Can't perform removing pending transaction
data ErrRemovePendingTx
ErrRemovePendingTxNoSuchWallet :: ErrNoSuchWallet -> ErrRemovePendingTx
ErrRemovePendingTxNoSuchTransaction :: Hash "Tx" -> ErrRemovePendingTx
ErrRemovePendingTxTransactionNoMorePending :: Hash "Tx" -> ErrRemovePendingTx

-- | Error while trying to send a transaction
data ErrPostTx
ErrPostTxNetworkUnreachable :: ErrNetworkUnavailable -> ErrPostTx
ErrPostTxBadRequest :: Text -> ErrPostTx
ErrPostTxProtocolFailure :: Text -> ErrPostTx

-- | Error while trying to decode externally signed transaction
data ErrDecodeSignedTx
ErrDecodeSignedTxWrongPayload :: Text -> ErrDecodeSignedTx
ErrDecodeSignedTxNotSupported :: ErrDecodeSignedTx

-- | A type family for validations that are specific to a particular
--   backend type. This demands an instantiation of the family for a
--   particular backend:
--   
--   type instance (ErrValidateSelection MyBackend) = MyCustomError
type family ErrValidateSelection t

-- | Errors that can occur when trying to perform an operation on a wallet
--   that requires a private key, but where none is attached to the wallet.
data ErrWithRootKey
ErrWithRootKeyNoRootKey :: WalletId -> ErrWithRootKey
ErrWithRootKeyWrongPassphrase :: WalletId -> ErrWrongPassphrase -> ErrWithRootKey

-- | Indicate a failure when checking for a given <a>Passphrase</a> match
data ErrWrongPassphrase
ErrWrongPassphrase :: ErrWrongPassphrase

-- | Errors that can occur when trying to list transactions.
data ErrListTransactions
ErrListTransactionsNoSuchWallet :: ErrNoSuchWallet -> ErrListTransactions
ErrListTransactionsStartTimeLaterThanEndTime :: ErrStartTimeLaterThanEndTime -> ErrListTransactions

-- | Network is unavailable
data ErrNetworkUnavailable

-- | Cannot connect to network backend.
ErrNetworkUnreachable :: Text -> ErrNetworkUnavailable

-- | Network backend reports that the requested network is invalid.
ErrNetworkInvalid :: Text -> ErrNetworkUnavailable

-- | Indicates that the specified start time is later than the specified
--   end time.
data ErrStartTimeLaterThanEndTime
ErrStartTimeLaterThanEndTime :: UTCTime -> UTCTime -> ErrStartTimeLaterThanEndTime
[$sel:errStartTime:ErrStartTimeLaterThanEndTime] :: ErrStartTimeLaterThanEndTime -> UTCTime
[$sel:errEndTime:ErrStartTimeLaterThanEndTime] :: ErrStartTimeLaterThanEndTime -> UTCTime

-- | Execute an action which requires holding a root XPrv.
withRootKey :: forall ctx s k e a. HasDBLayer s k ctx => ctx -> WalletId -> Passphrase "encryption" -> (ErrWithRootKey -> e) -> (k  'RootK XPrv -> ExceptT e IO a) -> ExceptT e IO a
instance GHC.Classes.Eq Cardano.Wallet.ErrListTransactions
instance GHC.Show.Show Cardano.Wallet.ErrListTransactions
instance GHC.Classes.Eq Cardano.Wallet.ErrStartTimeLaterThanEndTime
instance GHC.Show.Show Cardano.Wallet.ErrStartTimeLaterThanEndTime
instance GHC.Classes.Eq Cardano.Wallet.ErrSignTx
instance GHC.Show.Show Cardano.Wallet.ErrSignTx
instance GHC.Classes.Eq Cardano.Wallet.ErrUpdatePassphrase
instance GHC.Show.Show Cardano.Wallet.ErrUpdatePassphrase
instance GHC.Classes.Eq Cardano.Wallet.ErrWithRootKey
instance GHC.Show.Show Cardano.Wallet.ErrWithRootKey
instance GHC.Classes.Eq Cardano.Wallet.ErrSubmitExternalTx
instance GHC.Show.Show Cardano.Wallet.ErrSubmitExternalTx
instance GHC.Classes.Eq Cardano.Wallet.ErrSubmitTx
instance GHC.Show.Show Cardano.Wallet.ErrSubmitTx
instance GHC.Classes.Eq Cardano.Wallet.ErrListUTxOStatistics
instance GHC.Show.Show Cardano.Wallet.ErrListUTxOStatistics
instance GHC.Classes.Eq e => GHC.Classes.Eq (Cardano.Wallet.ErrEstimateTxFee e)
instance GHC.Show.Show e => GHC.Show.Show (Cardano.Wallet.ErrEstimateTxFee e)
instance GHC.Classes.Eq e => GHC.Classes.Eq (Cardano.Wallet.ErrCreateUnsignedTx e)
instance GHC.Show.Show e => GHC.Show.Show (Cardano.Wallet.ErrCreateUnsignedTx e)
instance GHC.Generics.Generic (Cardano.Wallet.WalletLayer s t k)

module Cardano.Wallet.Registry

-- | A registry to keep track of worker threads and acquired resources.
data WorkerRegistry key resource

-- | Construct a new empty registry
empty :: Ord key => IO (WorkerRegistry key resource)

-- | Register a new worker
insert :: Ord key => WorkerRegistry key resource -> Worker key resource -> IO ()

-- | Get all registered keys in the registry
keys :: WorkerRegistry key resource -> IO [key]

-- | Lookup the registry for a given worker
lookup :: (MonadIO m, Ord key) => WorkerRegistry key resource -> key -> m (Maybe (Worker key resource))

-- | Remove a worker from the registry (and cancel any running task)
remove :: Ord key => WorkerRegistry key resource -> key -> IO ()

-- | A worker which holds and manipulate a paticular acquired resource.
--   That resource can be, for example, a handle to a database connection.
data Worker key resource

-- | See <a>newWorker</a>
data MkWorker key resource ctx
MkWorker :: (WorkerCtx ctx -> key -> IO ()) -> (WorkerCtx ctx -> key -> IO ()) -> (Trace IO Text -> Either SomeException () -> IO ()) -> ((resource -> IO ()) -> IO ()) -> MkWorker key resource ctx

-- | A task to execute before the main worker's task. When creating a
--   worker, this task is guaranteed to have terminated once
--   <a>newWorker</a> returns.
[workerBefore] :: MkWorker key resource ctx -> WorkerCtx ctx -> key -> IO ()

-- | A task for the worker, possibly infinite
[workerMain] :: MkWorker key resource ctx -> WorkerCtx ctx -> key -> IO ()

-- | Action to run when the worker exits
[workerAfter] :: MkWorker key resource ctx -> Trace IO Text -> Either SomeException () -> IO ()

-- | A bracket-style factory to acquire a resource
[workerAcquire] :: MkWorker key resource ctx -> (resource -> IO ()) -> IO ()

-- | Create a new worker for a given key. Workers maintain an acquired
--   resource. They expect a task as argument and will terminate as soon as
--   their task is over; so in practice, we provide a never-ending task
--   that keeps the worker alive forever.
--   
--   Returns <a>Nothing</a> if the worker fails to acquire the necessary
--   resource or terminate unexpectedly before entering its <tt>main</tt>
--   action.
--   
--   <pre>
--   &gt;&gt;&gt; newWorker ctx k withDBLayer restoreWallet
--   worker&lt;thread#1234&gt;
--   </pre>
newWorker :: forall key resource ctx. (HasLogger ctx, HasWorkerCtx resource ctx, ToText key) => ctx -> key -> MkWorker key resource ctx -> IO (Maybe (Worker key resource))
workerThread :: Worker key resource -> ThreadId
workerId :: Worker key resource -> key
workerResource :: Worker key resource -> resource

-- | A class to link an existing context to a worker context.
class HasType resource (WorkerCtx ctx) => HasWorkerCtx resource ctx where {
    type family WorkerCtx ctx :: *;
}
hoistResource :: HasWorkerCtx resource ctx => resource -> ctx -> WorkerCtx ctx
instance GHC.Generics.Generic (Cardano.Wallet.Registry.Worker key resource)


-- | An implementation of the production pool database using only pure
--   functions.
--   
--   These functions and types model the behaviour of the SQLite database
--   backend, and are used for QuickCheck state machine testing, and the
--   MVar database backend.
module Cardano.Pool.DB.Model
data PoolDatabase
PoolDatabase :: !Map PoolId [BlockHeader] -> !Map EpochNo [(PoolId, Quantity "lovelace" Word64)] -> PoolDatabase

-- | Information of what blocks were produced by which stake pools
[$sel:pools:PoolDatabase] :: PoolDatabase -> !Map PoolId [BlockHeader]

-- | Store known stake distributions for epochs
[$sel:distributions:PoolDatabase] :: PoolDatabase -> !Map EpochNo [(PoolId, Quantity "lovelace" Word64)]

-- | Produces an empty model pool production database.
emptyPoolDatabase :: PoolDatabase
type ModelPoolOp a = PoolDatabase -> (Either PoolErr a, PoolDatabase)
newtype PoolErr
PointAlreadyExists :: BlockHeader -> PoolErr
mCleanPoolProduction :: ModelPoolOp ()
mPutPoolProduction :: BlockHeader -> PoolId -> ModelPoolOp ()
mReadPoolProduction :: EpochNo -> ModelPoolOp (Map PoolId [BlockHeader])
mPutStakeDistribution :: EpochNo -> [(PoolId, Quantity "lovelace" Word64)] -> ModelPoolOp ()
mReadStakeDistribution :: EpochNo -> ModelPoolOp [(PoolId, Quantity "lovelace" Word64)]
mRollbackTo :: SlotId -> ModelPoolOp ()
mReadCursor :: Int -> ModelPoolOp [BlockHeader]
instance GHC.Classes.Eq Cardano.Pool.DB.Model.PoolErr
instance GHC.Show.Show Cardano.Pool.DB.Model.PoolErr
instance GHC.Classes.Eq Cardano.Pool.DB.Model.PoolDatabase
instance GHC.Show.Show Cardano.Pool.DB.Model.PoolDatabase
instance GHC.Generics.Generic Cardano.Pool.DB.Model.PoolDatabase


-- | Database / Persistence layer for the pool production.
module Cardano.Pool.DB

-- | A Database interface for storing pool production in DB.
--   
--   To use it, you will need the NamedFieldPuns extension and wrap
--   operations with <tt>atomically</tt>:
--   
--   Example: &gt;&gt;&gt; :set -XNamedFieldPuns &gt;&gt;&gt;
--   DBLayer{atomically,putPoolProduction} = db &gt;&gt;&gt; atomically $
--   putPoolProduction blockHeader pool
--   
--   This gives you the power to also run <i>multiple</i> operations
--   atomically.
data DBLayer m
DBLayer :: (BlockHeader -> PoolId -> ExceptT ErrPointAlreadyExists stm ()) -> (EpochNo -> stm (Map PoolId [BlockHeader])) -> (EpochNo -> [(PoolId, Quantity "lovelace" Word64)] -> stm ()) -> (EpochNo -> stm [(PoolId, Quantity "lovelace" Word64)]) -> (Int -> stm [BlockHeader]) -> (SlotId -> stm ()) -> stm () -> (forall a. stm a -> m a) -> DBLayer m

-- | Write for a given slot id the id of stake pool that produced a a
--   corresponding block
[putPoolProduction] :: DBLayer m -> BlockHeader -> PoolId -> ExceptT ErrPointAlreadyExists stm ()

-- | Read the all stake pools together with corresponding slot ids for a
--   given epoch.
[readPoolProduction] :: DBLayer m -> EpochNo -> stm (Map PoolId [BlockHeader])

-- | Replace an existing distribution for the given epoch by the one given
--   as argument.
--   
--   If there's no existing distribution, simply inserts it.
[putStakeDistribution] :: DBLayer m -> EpochNo -> [(PoolId, Quantity "lovelace" Word64)] -> stm ()
[readStakeDistribution] :: DBLayer m -> EpochNo -> stm [(PoolId, Quantity "lovelace" Word64)]

-- | Read the latest <tt>k</tt> blockheaders in ascending order. The tip
--   will be the last element in the list.
--   
--   This is useful for the <tt>NetworkLayer</tt> to know how far we have
--   synced.
[readPoolProductionCursor] :: DBLayer m -> Int -> stm [BlockHeader]

-- | Remove all entries of slot ids newer than the argument
[rollbackTo] :: DBLayer m -> SlotId -> stm ()

-- | Clean a database
[cleanDB] :: DBLayer m -> stm ()

-- | Run an operation.
--   
--   For a Sqlite DB, this would be "run a query inside a transaction".
[atomically] :: DBLayer m -> forall a. stm a -> m a

-- | Forbidden operation was executed on an already existing slot
newtype ErrPointAlreadyExists
ErrPointAlreadyExists :: BlockHeader -> ErrPointAlreadyExists
instance GHC.Show.Show Cardano.Pool.DB.ErrPointAlreadyExists
instance GHC.Classes.Eq Cardano.Pool.DB.ErrPointAlreadyExists


-- | This module can fold over a blockchain to collect metrics about Stake
--   pools.
--   
--   It interacts with: - <a>Cardano.Wallet.Network</a> which provides the
--   chain - <a>Cardano.Pool.DB</a> - which can persist the metrics -
--   <a>Cardano.Wallet.Api.Server</a> - which presents the results in an
--   endpoint
module Cardano.Pool.Metrics
data Block
Block :: BlockHeader -> PoolId -> Block
[$sel:header:Block] :: Block -> BlockHeader
[$sel:producer:Block] :: Block -> PoolId
data StakePool
StakePool :: PoolId -> Quantity "lovelace" Word64 -> Quantity "block" Word64 -> Double -> StakePool
[$sel:poolId:StakePool] :: StakePool -> PoolId
[$sel:stake:StakePool] :: StakePool -> Quantity "lovelace" Word64
[$sel:production:StakePool] :: StakePool -> Quantity "block" Word64
[$sel:apparentPerformance:StakePool] :: StakePool -> Double

-- | <tt>StakePoolLayer</tt> is a thin layer ontop of the DB. It is
--   <i>one</i> value that can easily be passed to the API-server, where it
--   can be used in a simple way.
newtype StakePoolLayer m
StakePoolLayer :: ExceptT ErrListStakePools m [StakePool] -> StakePoolLayer m
[$sel:listStakePools:StakePoolLayer] :: StakePoolLayer m -> ExceptT ErrListStakePools m [StakePool]
newStakePoolLayer :: DBLayer IO -> NetworkLayer IO t block -> Trace IO Text -> StakePoolLayer IO
data ErrListStakePools
ErrMetricsIsUnsynced :: Quantity "percent" Percentage -> ErrListStakePools
ErrListStakePoolsMetricsInconsistency :: ErrMetricsInconsistency -> ErrListStakePools
ErrListStakePoolsErrNetworkTip :: ErrNetworkTip -> ErrListStakePools

-- | <a>monitorStakePools</a> follows the chain and puts pool productions
--   and stake distributions to a <a>DBLayer</a>, such that the data in the
--   database is always consistent.
--   
--   The pool productions and stake distrubtions in the db can <i>never</i>
--   be from different forks such that it's safe for readers to access it.
monitorStakePools :: Trace IO Text -> NetworkLayer IO t Block -> DBLayer IO -> IO ()

-- | Possible errors returned by <a>combineMetrics</a>.
newtype ErrMetricsInconsistency

-- | Somehow, we tried to combine invalid metrics together and passed a
--   passed a block production that doesn't match the producers found in
--   the stake activity.
--   
--   Note that the opposite case is okay as we only observe pools that have
--   produced blocks. So it could be the case that a pool exists in the
--   distribution but not in the production! (In which case, we'll assign
--   it a production of '0').
ErrProducerNotInDistribution :: PoolId -> ErrMetricsInconsistency

-- | Combines three different sources of data into one:
--   
--   <ol>
--   <li>A stake-distribution map</li>
--   <li>A pool-production map</li>
--   <li>A pool-performance map</li>
--   </ol>
--   
--   If a pool has produced a block without existing in the
--   stake-distribution, i.e it exists in (2) but not (1), this function
--   will return <tt>Left ErrMetricsInconsistency</tt>.
--   
--   If a pool is in (1) but not (2), it simply means it has produced 0
--   blocks so far.
--   
--   Similarly, if we do have metrics about a pool in (3), but this pool is
--   unknown from (1) &amp; (2), this function also returns <tt>Left
--   ErrMetricsInconsistency</tt>.
--   
--   If a pool is in (1+2) but not in (3), it simply means it has produced
--   0 blocks so far.
combineMetrics :: Map PoolId (Quantity "lovelace" Word64) -> Map PoolId (Quantity "block" Word64) -> Map PoolId Double -> Either ErrMetricsInconsistency (Map PoolId (Quantity "lovelace" Word64, Quantity "block" Word64, Double))

-- | Calculate pool apparent performance over the given data. The
--   performance is a <a>Double</a> between 0 and 1 as:
--   
--   <pre>
--     p = n <i> N * S </i> s
--   where
--     n = number of blocks produced in an epoch e
--     N = number of slots in e
--     s = stake owned by the pool in e
--     S = total stake delegated to pools in e
--   </pre>
--   
--   Note that, this apparent performance is clamped to [0,1] as it may in
--   practice, be greater than 1 if a stake pool produces more than it is
--   expected.
calculatePerformance :: Int -> Map PoolId (Quantity "lovelace" Word64) -> Map PoolId (Quantity "block" Word64) -> Map PoolId Double
instance GHC.Classes.Eq Cardano.Pool.Metrics.ErrMetricsInconsistency
instance GHC.Show.Show Cardano.Pool.Metrics.ErrMetricsInconsistency
instance GHC.Classes.Eq Cardano.Pool.Metrics.ErrMonitorStakePools
instance GHC.Show.Show Cardano.Pool.Metrics.ErrMonitorStakePools
instance GHC.Generics.Generic Cardano.Pool.Metrics.StakePool
instance GHC.Generics.Generic Cardano.Pool.Metrics.Block
instance GHC.Show.Show Cardano.Pool.Metrics.Block
instance GHC.Classes.Eq Cardano.Pool.Metrics.Block


-- | An implementation of the DBLayer which uses Persistent and SQLite.
module Cardano.Pool.DB.Sqlite

-- | Sets up a connection to the SQLite database.
--   
--   Database migrations are run to create tables if necessary.
--   
--   If the given file path does not exist, it will be created by the
--   sqlite library.
--   
--   <tt>getDBLayer</tt> will provide the actual <a>DBLayer</a>
--   implementation. The database should be closed with
--   <a>destroyDBLayer</a>. If you use <a>withDBLayer</a> then both of
--   these things will be handled for you.
newDBLayer :: Configuration -> Trace IO Text -> Maybe FilePath -> IO (SqliteContext, DBLayer IO)

-- | Runs an action with a connection to the SQLite database.
--   
--   Database migrations are run to create tables if necessary.
--   
--   If the given file path does not exist, it will be created by the
--   sqlite library.
withDBLayer :: Configuration -> Trace IO Text -> Maybe FilePath -> (DBLayer IO -> IO a) -> IO a

-- | Return the preferred <tt>FilePath</tt> for the stake pool .sqlite
--   file, given a parent directory.
defaultFilePath :: FilePath -> FilePath


-- | Dummy implementation of the database-layer, using <a>MVar</a>. This
--   may be good for testing to compare with an implementation on a real
--   data store, or to use when compiling the wallet for targets which
--   don't have SQLite.
module Cardano.Pool.DB.MVar

-- | Instantiate a new in-memory "database" layer that simply stores data
--   in a local MVar. Data vanishes if the software is shut down.
newDBLayer :: IO (DBLayer IO)
instance GHC.Show.Show Cardano.Pool.DB.MVar.MVarPoolDBError
instance GHC.Exception.Type.Exception Cardano.Pool.DB.MVar.MVarPoolDBError


-- | These are (partial) CBOR decoders for Byron binary types. Note that we
--   ignore most of the block's and header's content and only retrieve the
--   pieces of information relevant to us, wallet (we do assume a trusted
--   node and therefore, we needn't to care about verifying signatures and
--   blocks themselves).
--   
--   The format described in the decoders below are the one used in the
--   Byron era of Cardano and will endure in the first stages of Shelley.
--   They are also used by components like the Rust
--   <a>cardano-http-bridge</a>.
module Cardano.Byron.Codec.Cbor
decodeAddressDerivationPath :: Passphrase "addr-derivation-payload" -> Decoder s (Maybe (Index  'WholeDomain  'AccountK, Index  'WholeDomain  'AddressK))
decodeAddressPayload :: Decoder s ByteString

-- | The attributes are pairs of numeric tags and bytes, where the bytes
--   will be CBOR-encoded stuff. This decoder does not enforce "canonicity"
--   of entries.
decodeAllAttributes :: Decoder s [(Word8, ByteString)]
decodeBlockHeader :: Decoder s BlockHeader
decodeDerivationPathAttr :: Passphrase "addr-derivation-payload" -> [(Word8, ByteString)] -> Decoder s (Maybe (Index  'WholeDomain  'AccountK, Index  'WholeDomain  'AddressK))
decodeSignedTx :: Decoder s (([TxIn], [TxOut]), [TxWitness])
decodeTx :: Decoder s ([TxIn], [TxOut])
decodeTxWitness :: Decoder s TxWitness

-- | Encode a public key to a corresponding Cardano Address. The encoding
--   of the attributes part of an address is left out to the caller; This
--   allows for distinguishing between Sequential and Random addresses (the
--   former doesn't have any attributes to encode).
--   
--   <pre>
--   -- Old / Random Addresses
--   let encodeAddrAttributes = mempty
--        &lt;&gt; CBOR.encodeMapLen 1
--        &lt;&gt; CBOR.encodeWord8 1
--        &lt;&gt; encodeDerivationPath (hdPassphrase rootXPub) accIx addrIx
--   let addr = encodeAddress xpub encodeAddrAttributes
--   
--   -- New / Sequential Addresses
--   let encodeAddrAttributes = mempty &lt;&gt; CBOR.encodeMapLen 0
--   let addr = encodeAddress xpub encodeAddrAttributes
--   </pre>
--   
--   Note that we are passing the behavior to encode attributes as a
--   parameter here and do not handle multiple cases in
--   <a>encodeAddress</a> itself for multiple reasons:
--   
--   <ul>
--   <li>Inversion of control gives us a nicer implementation overall</li>
--   <li>Encoding attributes for Random addresses requires more context
--   than just the public key (like the wallet root id and some extra logic
--   for encoding passphrases). This is just scheme-specific and is better
--   left out of this particular function</li>
--   </ul>
encodeAddress :: XPub -> [Encoding] -> Encoding
encodeAttributes :: [Encoding] -> Encoding
encodeDerivationPathAttr :: Passphrase "addr-derivation-payload" -> Index  'WholeDomain  'AccountK -> Index  'WholeDomain  'AddressK -> Encoding
encodeProtocolMagicAttr :: ProtocolMagic -> Encoding
encodePublicKeyWitness :: XPub -> Hash "signature" -> Encoding
encodeTx :: ([TxIn], [TxOut]) -> Encoding

-- | Shortcut for deserialising a strict <tt>Bytestring</tt> with the given
--   decoder.
deserialiseCbor :: (forall s. Decoder s a) -> ByteString -> Maybe a

-- | Inspect the next token that has to be decoded and print it to the
--   console as a trace. Useful for debugging Decoders. Example:
--   
--   <pre>
--   myDecoder :: CBOR.Decoder s MyType
--   myDecoder = do
--       a &lt;- CBOR.decodeWord64
--       inspectNextToken
--       [...]
--   </pre>
inspectNextToken :: Decoder s ()

-- | Decode an list of known length. Very similar to
--   <tt>decodeListIndef</tt>.
--   
--   <pre>
--   myDecoder :: CBOR.Decoder s [MyType]
--   myDecoder = decodeList decodeOne
--     where
--       decodeOne :: CBOR.Decoder s MyType
--   </pre>
decodeList :: forall s a. Decoder s a -> Decoder s [a]

-- | Decode an arbitrary long list. CBOR introduce a "break" character to
--   mark the end of the list, so we simply decode each item until we
--   encounter a break character.
--   
--   <pre>
--   myDecoder :: CBOR.Decoder s [MyType]
--   myDecoder = decodeListIndef decodeOne
--     where
--       decodeOne :: CBOR.Decoder s MyType
--   </pre>
decodeListIndef :: forall s a. Decoder s a -> Decoder s [a]


-- | Implementation of address derivation for the random scheme, as
--   implemented by the legacy Cardano wallets.
--   
--   For full documentation of the key derivation schemes, see the
--   <a>Cardano.Crypto.Wallet</a> module, and the implementation in
--   <a>cardano-crypto</a>.
module Cardano.Wallet.Primitive.AddressDerivation.Byron

-- | Material for deriving HD random scheme keys, which can be used for
--   making addresses.
data ByronKey (depth :: Depth) key
ByronKey :: key -> DerivationPath depth -> Passphrase "addr-derivation-payload" -> ByronKey key

-- | The raw private or public key.
[getKey] :: ByronKey key -> key

-- | The address derivation indices for the level of this key.
[derivationPath] :: ByronKey key -> DerivationPath depth

-- | Used for encryption of payload containing address derivation path.
[payloadPassphrase] :: ByronKey key -> Passphrase "addr-derivation-payload"

-- | Generate a new key from seed. Note that the <tt>depth</tt> is left
--   open so that the caller gets to decide what type of key this is. This
--   is mostly for testing, in practice, seeds are used to represent root
--   keys, and one should use <a>generateKeyFromSeed</a>.
unsafeGenerateKeyFromSeed :: DerivationPath depth -> Passphrase "seed" -> Passphrase "encryption" -> ByronKey depth XPrv

-- | Generate a root key from a corresponding seed. The seed should be at
--   least 16 bytes.
generateKeyFromSeed :: Passphrase "seed" -> Passphrase "encryption" -> ByronKey  'RootK XPrv

-- | The amount of entropy carried by a BIP-39 12-word mnemonic is 16
--   bytes.
minSeedLengthBytes :: Int

-- | Derives account private key from the given root private key, using
--   derivation scheme 1.
--   
--   NOTE: The caller is expected to provide the corresponding passphrase
--   (and to have checked that the passphrase is valid). Providing a wrong
--   passphrase will not make the function fail but will instead, yield an
--   incorrect new key that doesn't belong to the wallet.
deriveAccountPrivateKey :: Passphrase "encryption" -> ByronKey  'RootK XPrv -> Index  'WholeDomain  'AccountK -> ByronKey  'AccountK XPrv

-- | Derives address private key from the given account private key, using
--   derivation scheme 1.
--   
--   NOTE: The caller is expected to provide the corresponding passphrase
--   (and to have checked that the passphrase is valid). Providing a wrong
--   passphrase will not make the function fail but will instead, yield an
--   incorrect new key that doesn't belong to the wallet.
deriveAddressPrivateKey :: Passphrase "encryption" -> ByronKey  'AccountK XPrv -> Index  'WholeDomain  'AddressK -> ByronKey  'AddressK XPrv

-- | Attempt decoding a <a>ByteString</a> into an <a>Address</a>. This
--   merely checks that the underlying bytestring has a "valid" structure /
--   format without doing much more.
decodeLegacyAddress :: ByteString -> Maybe Address
instance GHC.Generics.Generic (Cardano.Wallet.Primitive.AddressDerivation.Byron.ByronKey depth key)
instance (GHC.Show.Show key, GHC.Show.Show (Cardano.Wallet.Primitive.AddressDerivation.Byron.DerivationPath depth)) => GHC.Show.Show (Cardano.Wallet.Primitive.AddressDerivation.Byron.ByronKey depth key)
instance (GHC.Classes.Eq key, GHC.Classes.Eq (Cardano.Wallet.Primitive.AddressDerivation.Byron.DerivationPath depth)) => GHC.Classes.Eq (Cardano.Wallet.Primitive.AddressDerivation.Byron.ByronKey depth key)
instance (Control.DeepSeq.NFData key, Control.DeepSeq.NFData (Cardano.Wallet.Primitive.AddressDerivation.Byron.DerivationPath depth)) => Control.DeepSeq.NFData (Cardano.Wallet.Primitive.AddressDerivation.Byron.ByronKey depth key)
instance Cardano.Wallet.Primitive.AddressDerivation.WalletKey Cardano.Wallet.Primitive.AddressDerivation.Byron.ByronKey
instance Cardano.Wallet.Primitive.AddressDerivation.PaymentAddress 'Cardano.Wallet.Primitive.AddressDerivation.Testnet Cardano.Wallet.Primitive.AddressDerivation.Byron.ByronKey
instance Cardano.Wallet.Primitive.AddressDerivation.PaymentAddress 'Cardano.Wallet.Primitive.AddressDerivation.Mainnet Cardano.Wallet.Primitive.AddressDerivation.Byron.ByronKey
instance Cardano.Wallet.Primitive.AddressDerivation.MkKeyFingerprint Cardano.Wallet.Primitive.AddressDerivation.Byron.ByronKey
instance Cardano.Wallet.Primitive.AddressDerivation.PersistPrivateKey (Cardano.Wallet.Primitive.AddressDerivation.Byron.ByronKey 'Cardano.Wallet.Primitive.AddressDerivation.RootK)


-- | An implementation of address discovery for the random address scheme
--   as used by the legacy Cardano wallets.
module Cardano.Wallet.Primitive.AddressDiscovery.Random

-- | HD random address discovery state and key material for AD.
data RndState (network :: NetworkDiscriminant)
RndState :: Passphrase "addr-derivation-payload" -> Index  'WholeDomain  'AccountK -> Map DerivationPath Address -> Map DerivationPath Address -> StdGen -> RndState

-- | The HD derivation passphrase
[hdPassphrase] :: RndState -> Passphrase "addr-derivation-payload"

-- | The account index used for address _generation_ in this wallet. Note
--   that addresses will be _discovered_ from any and all account indices,
--   regardless of this value.
[accountIndex] :: RndState -> Index  'WholeDomain  'AccountK

-- | The addresses which have so far been discovered, and their derivation
--   paths.
[addresses] :: RndState -> Map DerivationPath Address

-- | The addresses which have been generated for use as change addresses,
--   and their derivation paths. Once addresses have been discovered they
--   are removed from this set and added to <a>addresses</a>.
[pendingAddresses] :: RndState -> Map DerivationPath Address

-- | The state of the RNG.
[gen] :: RndState -> StdGen

-- | Initialize the HD random address discovery state from a root key and
--   RNG seed.
mkRndState :: ByronKey  'RootK XPrv -> Int -> RndState n
instance GHC.Generics.Generic (Cardano.Wallet.Primitive.AddressDiscovery.Random.RndState network)
instance Control.DeepSeq.NFData (Cardano.Wallet.Primitive.AddressDiscovery.Random.RndState network)
instance GHC.Show.Show (Cardano.Wallet.Primitive.AddressDiscovery.Random.RndState network)
instance Formatting.Buildable.Buildable (Cardano.Wallet.Primitive.AddressDiscovery.Random.RndState network)
instance Cardano.Wallet.Primitive.AddressDiscovery.IsOurs (Cardano.Wallet.Primitive.AddressDiscovery.Random.RndState n)
instance Cardano.Wallet.Primitive.AddressDiscovery.IsOwned (Cardano.Wallet.Primitive.AddressDiscovery.Random.RndState n) Cardano.Wallet.Primitive.AddressDerivation.Byron.ByronKey
instance Cardano.Wallet.Primitive.AddressDerivation.PaymentAddress n Cardano.Wallet.Primitive.AddressDerivation.Byron.ByronKey => Cardano.Wallet.Primitive.AddressDiscovery.GenChange (Cardano.Wallet.Primitive.AddressDiscovery.Random.RndState n)
instance Cardano.Wallet.Primitive.AddressDiscovery.CompareDiscovery (Cardano.Wallet.Primitive.AddressDiscovery.Random.RndState n)
instance Cardano.Wallet.Primitive.AddressDiscovery.KnownAddresses (Cardano.Wallet.Primitive.AddressDiscovery.Random.RndState n)


-- | An implementation of the DBLayer which uses Persistent and SQLite.
module Cardano.Wallet.DB.Sqlite

-- | Sets up a connection to the SQLite database.
--   
--   Database migrations are run to create tables if necessary.
--   
--   If the given file path does not exist, it will be created by the
--   sqlite library.
--   
--   <tt>getDBLayer</tt> will provide the actual <a>DBLayer</a>
--   implementation. The database should be closed with
--   <a>destroyDBLayer</a>. If you use <a>withDBLayer</a> then both of
--   these things will be handled for you.
newDBLayer :: forall s k. (IsOurs s, NFData s, Show s, PersistState s, PersistPrivateKey (k  'RootK)) => Configuration -> Trace IO Text -> Maybe FilePath -> IO (SqliteContext, DBLayer IO s k)

-- | Instantiate a <a>DBFactory</a> from a given directory
mkDBFactory :: forall s k. (IsOurs s, NFData s, Show s, PersistState s, PersistPrivateKey (k  'RootK), WalletKey k) => Configuration -> Trace IO Text -> Maybe FilePath -> DBFactory IO s k

-- | Return all wallet databases that match the specified key type within
--   the specified directory.
findDatabases :: forall k. WalletKey k => Trace IO Text -> FilePath -> IO [WalletId]

-- | Runs an action with a connection to the SQLite database.
--   
--   Database migrations are run to create tables if necessary.
--   
--   If the given file path does not exist, it will be created by the
--   sqlite library.
withDBLayer :: forall s k a. (IsOurs s, NFData s, Show s, PersistState s, PersistPrivateKey (k  'RootK)) => Configuration -> Trace IO Text -> Maybe FilePath -> (DBLayer IO s k -> IO a) -> IO a

-- | Functions for saving/loading the wallet's address discovery state into
--   SQLite.
class PersistState s

-- | Store the state for a checkpoint.
insertState :: PersistState s => (WalletId, SlotId) -> s -> SqlPersistT IO ()

-- | Load the state for a checkpoint.
selectState :: PersistState s => (WalletId, SlotId) -> SqlPersistT IO (Maybe s)
instance GHC.Show.Show Cardano.Wallet.DB.Sqlite.ErrRollbackTo
instance (GHC.Classes.Eq (k 'Cardano.Wallet.Primitive.AddressDerivation.AccountK Cardano.Crypto.Wallet.XPub), Cardano.Wallet.Primitive.AddressDerivation.PersistPublicKey (k 'Cardano.Wallet.Primitive.AddressDerivation.AccountK), Cardano.Wallet.Primitive.AddressDerivation.PaymentAddress n k, Cardano.Wallet.Primitive.AddressDerivation.SoftDerivation k) => Cardano.Wallet.DB.Sqlite.PersistState (Cardano.Wallet.Primitive.AddressDiscovery.Sequential.SeqState n k)
instance Cardano.Wallet.DB.Sqlite.PersistState (Cardano.Wallet.Primitive.AddressDiscovery.Random.RndState t)
instance GHC.Exception.Type.Exception Cardano.Wallet.DB.Sqlite.ErrRollbackTo


-- | Utility functions for converting time values to and from text.
module Data.Time.Text

-- | Convert the specified time value to text, using the specified time
--   format.
utcTimeToText :: TimeFormat -> UTCTime -> Text

-- | Attempt to use each of the specified time formats to parse the given
--   text. Returns a time value that corresponds to the first matching
--   format, or <a>Nothing</a> if none of the formats matched.
utcTimeFromText :: [TimeFormat] -> Text -> Maybe UTCTime

-- | Represents a particular way of representing a moment in time in text.
data TimeFormat
TimeFormat :: String -> String -> TimeFormat
[timeFormatName] :: TimeFormat -> String
[timeFormatPattern] :: TimeFormat -> String

-- | Represents the ISO 8601 basic format (UTC).
iso8601BasicUtc :: TimeFormat

-- | Represents the ISO 8601 basic format (with local timezone).
iso8601BasicLocal :: TimeFormat

-- | Represents the ISO 8601 extended format (UTC).
iso8601ExtendedUtc :: TimeFormat

-- | Represents the ISO 8601 extended format (with local timezone).
iso8601ExtendedLocal :: TimeFormat

-- | Represents the ISO 8601 family of formats.
iso8601 :: [TimeFormat]

-- | Represents the ISO 8601 basic family of formats.
iso8601Basic :: [TimeFormat]

-- | Represents the ISO 8601 extended family of formats.
iso8601Extended :: [TimeFormat]
instance GHC.Classes.Eq Data.Time.Text.TimeFormat


-- | API type representations of various types. We define here pretty much
--   all our user-facing types that are mostly composed with internal /
--   primitive types.
--   
--   This module also define required API instances (JSON, HttpApiData...)
--   for all those types, making sure to match the specification document:
--   
--   <a>Wallet API Specification</a>
module Cardano.Wallet.Api.Types
data ApiAddress (n :: NetworkDiscriminant)
ApiAddress :: !(ApiT Address, Proxy n) -> !ApiT AddressState -> ApiAddress
[$sel:id:ApiAddress] :: ApiAddress -> !(ApiT Address, Proxy n)
[$sel:state:ApiAddress] :: ApiAddress -> !ApiT AddressState
data ApiStakePool
ApiStakePool :: !ApiT PoolId -> !ApiStakePoolMetrics -> !Double -> ApiStakePool
[$sel:id:ApiStakePool] :: ApiStakePool -> !ApiT PoolId
[$sel:metrics:ApiStakePool] :: ApiStakePool -> !ApiStakePoolMetrics
[$sel:apparentPerformance:ApiStakePool] :: ApiStakePool -> !Double
data ApiStakePoolMetrics
ApiStakePoolMetrics :: !Quantity "lovelace" Natural -> !Quantity "block" Natural -> ApiStakePoolMetrics
[$sel:controlledStake:ApiStakePoolMetrics] :: ApiStakePoolMetrics -> !Quantity "lovelace" Natural
[$sel:producedBlocks:ApiStakePoolMetrics] :: ApiStakePoolMetrics -> !Quantity "block" Natural
data ApiWallet
ApiWallet :: !ApiT WalletId -> !ApiT AddressPoolGap -> !ApiT WalletBalance -> !ApiT (WalletDelegation (ApiT PoolId)) -> !ApiT WalletName -> !Maybe (ApiT WalletPassphraseInfo) -> !Quantity "lovelace" Natural -> !ApiT SyncProgress -> !ApiBlockReference -> ApiWallet
[$sel:id:ApiWallet] :: ApiWallet -> !ApiT WalletId
[$sel:addressPoolGap:ApiWallet] :: ApiWallet -> !ApiT AddressPoolGap
[$sel:balance:ApiWallet] :: ApiWallet -> !ApiT WalletBalance
[$sel:delegation:ApiWallet] :: ApiWallet -> !ApiT (WalletDelegation (ApiT PoolId))
[$sel:name:ApiWallet] :: ApiWallet -> !ApiT WalletName
[$sel:passphrase:ApiWallet] :: ApiWallet -> !Maybe (ApiT WalletPassphraseInfo)
[$sel:reward:ApiWallet] :: ApiWallet -> !Quantity "lovelace" Natural
[$sel:state:ApiWallet] :: ApiWallet -> !ApiT SyncProgress
[$sel:tip:ApiWallet] :: ApiWallet -> !ApiBlockReference
newtype ApiWalletPassphrase
ApiWalletPassphrase :: ApiT (Passphrase "encryption") -> ApiWalletPassphrase
[$sel:passphrase:ApiWalletPassphrase] :: ApiWalletPassphrase -> ApiT (Passphrase "encryption")
data ApiUtxoStatistics
ApiUtxoStatistics :: !Quantity "lovelace" Natural -> !ApiT BoundType -> !Map Word64 Word64 -> ApiUtxoStatistics
[$sel:total:ApiUtxoStatistics] :: ApiUtxoStatistics -> !Quantity "lovelace" Natural
[$sel:scale:ApiUtxoStatistics] :: ApiUtxoStatistics -> !ApiT BoundType
[$sel:distribution:ApiUtxoStatistics] :: ApiUtxoStatistics -> !Map Word64 Word64
data WalletBalance
WalletBalance :: !Quantity "lovelace" Natural -> !Quantity "lovelace" Natural -> WalletBalance
[$sel:available:WalletBalance] :: WalletBalance -> !Quantity "lovelace" Natural
[$sel:total:WalletBalance] :: WalletBalance -> !Quantity "lovelace" Natural
data WalletPostData
WalletPostData :: !Maybe (ApiT AddressPoolGap) -> !ApiMnemonicT '[15, 18, 21, 24] "seed" -> !Maybe (ApiMnemonicT '[9, 12] "generation") -> !ApiT WalletName -> !ApiT (Passphrase "encryption") -> WalletPostData
[$sel:addressPoolGap:WalletPostData] :: WalletPostData -> !Maybe (ApiT AddressPoolGap)
[$sel:mnemonicSentence:WalletPostData] :: WalletPostData -> !ApiMnemonicT '[15, 18, 21, 24] "seed"
[$sel:mnemonicSecondFactor:WalletPostData] :: WalletPostData -> !Maybe (ApiMnemonicT '[9, 12] "generation")
[$sel:name:WalletPostData] :: WalletPostData -> !ApiT WalletName
[$sel:passphrase:WalletPostData] :: WalletPostData -> !ApiT (Passphrase "encryption")
newtype WalletPutData
WalletPutData :: Maybe (ApiT WalletName) -> WalletPutData
[$sel:name:WalletPutData] :: WalletPutData -> Maybe (ApiT WalletName)
data WalletPutPassphraseData
WalletPutPassphraseData :: !ApiT (Passphrase "encryption-old") -> !ApiT (Passphrase "encryption-new") -> WalletPutPassphraseData
[$sel:oldPassphrase:WalletPutPassphraseData] :: WalletPutPassphraseData -> !ApiT (Passphrase "encryption-old")
[$sel:newPassphrase:WalletPutPassphraseData] :: WalletPutPassphraseData -> !ApiT (Passphrase "encryption-new")
data PostTransactionData n
PostTransactionData :: !NonEmpty (AddressAmount n) -> !ApiT (Passphrase "encryption") -> PostTransactionData n
[$sel:payments:PostTransactionData] :: PostTransactionData n -> !NonEmpty (AddressAmount n)
[$sel:passphrase:PostTransactionData] :: PostTransactionData n -> !ApiT (Passphrase "encryption")
newtype PostTransactionFeeData n
PostTransactionFeeData :: NonEmpty (AddressAmount n) -> PostTransactionFeeData n
[$sel:payments:PostTransactionFeeData] :: PostTransactionFeeData n -> NonEmpty (AddressAmount n)
newtype PostExternalTransactionData
PostExternalTransactionData :: ByteString -> PostExternalTransactionData
[$sel:payload:PostExternalTransactionData] :: PostExternalTransactionData -> ByteString
data ApiTimeReference
ApiTimeReference :: !UTCTime -> !ApiBlockReference -> ApiTimeReference
[$sel:time:ApiTimeReference] :: ApiTimeReference -> !UTCTime
[$sel:block:ApiTimeReference] :: ApiTimeReference -> !ApiBlockReference
data ApiTransaction n
ApiTransaction :: !ApiT (Hash "Tx") -> !Quantity "lovelace" Natural -> !Maybe ApiTimeReference -> !Maybe ApiTimeReference -> !Quantity "block" Natural -> !ApiT Direction -> ![ApiTxInput n] -> !NonEmpty (AddressAmount n) -> !ApiT TxStatus -> ApiTransaction n
[$sel:id:ApiTransaction] :: ApiTransaction n -> !ApiT (Hash "Tx")
[$sel:amount:ApiTransaction] :: ApiTransaction n -> !Quantity "lovelace" Natural
[$sel:insertedAt:ApiTransaction] :: ApiTransaction n -> !Maybe ApiTimeReference
[$sel:pendingSince:ApiTransaction] :: ApiTransaction n -> !Maybe ApiTimeReference
[$sel:depth:ApiTransaction] :: ApiTransaction n -> !Quantity "block" Natural
[$sel:direction:ApiTransaction] :: ApiTransaction n -> !ApiT Direction
[$sel:inputs:ApiTransaction] :: ApiTransaction n -> ![ApiTxInput n]
[$sel:outputs:ApiTransaction] :: ApiTransaction n -> !NonEmpty (AddressAmount n)
[$sel:status:ApiTransaction] :: ApiTransaction n -> !ApiT TxStatus
newtype ApiFee
ApiFee :: Quantity "lovelace" Natural -> ApiFee
[$sel:amount:ApiFee] :: ApiFee -> Quantity "lovelace" Natural
newtype ApiTxId
ApiTxId :: ApiT (Hash "Tx") -> ApiTxId
[$sel:id:ApiTxId] :: ApiTxId -> ApiT (Hash "Tx")
data ApiTxInput n
ApiTxInput :: !Maybe (AddressAmount n) -> !ApiT TxIn -> ApiTxInput n
[$sel:source:ApiTxInput] :: ApiTxInput n -> !Maybe (AddressAmount n)
[$sel:input:ApiTxInput] :: ApiTxInput n -> !ApiT TxIn
data AddressAmount (n :: NetworkDiscriminant)
AddressAmount :: !(ApiT Address, Proxy n) -> !Quantity "lovelace" Natural -> AddressAmount
[$sel:address:AddressAmount] :: AddressAmount -> !(ApiT Address, Proxy n)
[$sel:amount:AddressAmount] :: AddressAmount -> !Quantity "lovelace" Natural

-- | Error codes returned by the API, in the form of snake_cased strings
data ApiErrorCode
NoSuchWallet :: ApiErrorCode
NoSuchTransaction :: ApiErrorCode
TransactionNotPending :: ApiErrorCode
WalletAlreadyExists :: ApiErrorCode
NoRootKey :: ApiErrorCode
WrongEncryptionPassphrase :: ApiErrorCode
MalformedTxPayload :: ApiErrorCode
KeyNotFoundForAddress :: ApiErrorCode
NotEnoughMoney :: ApiErrorCode
UtxoNotEnoughFragmented :: ApiErrorCode
TransactionIsTooBig :: ApiErrorCode
InputsDepleted :: ApiErrorCode
CannotCoverFee :: ApiErrorCode
InvalidCoinSelection :: ApiErrorCode
NetworkUnreachable :: ApiErrorCode
NetworkMisconfigured :: ApiErrorCode
NetworkTipNotFound :: ApiErrorCode
CreatedInvalidTransaction :: ApiErrorCode
RejectedByCoreNode :: ApiErrorCode
BadRequest :: ApiErrorCode
NotFound :: ApiErrorCode
MethodNotAllowed :: ApiErrorCode
NotAcceptable :: ApiErrorCode
StartTimeLaterThanEndTime :: ApiErrorCode
UnsupportedMediaType :: ApiErrorCode
UnexpectedError :: ApiErrorCode
NotSynced :: ApiErrorCode
NothingToMigrate :: ApiErrorCode
data ApiNetworkInformation
ApiNetworkInformation :: !ApiT SyncProgress -> !ApiBlockReference -> !ApiNetworkTip -> ApiNetworkInformation
[$sel:syncProgress:ApiNetworkInformation] :: ApiNetworkInformation -> !ApiT SyncProgress
[$sel:nodeTip:ApiNetworkInformation] :: ApiNetworkInformation -> !ApiBlockReference
[$sel:networkTip:ApiNetworkInformation] :: ApiNetworkInformation -> !ApiNetworkTip
data ApiBlockReference
ApiBlockReference :: !ApiT EpochNo -> !ApiT SlotNo -> !Quantity "block" Natural -> ApiBlockReference
[$sel:epochNumber:ApiBlockReference] :: ApiBlockReference -> !ApiT EpochNo
[$sel:slotNumber:ApiBlockReference] :: ApiBlockReference -> !ApiT SlotNo
[$sel:height:ApiBlockReference] :: ApiBlockReference -> !Quantity "block" Natural
data ApiNetworkTip
ApiNetworkTip :: !ApiT EpochNo -> !ApiT SlotNo -> ApiNetworkTip
[$sel:epochNumber:ApiNetworkTip] :: ApiNetworkTip -> !ApiT EpochNo
[$sel:slotNumber:ApiNetworkTip] :: ApiNetworkTip -> !ApiT SlotNo

-- | Defines a point in time that can be formatted as and parsed from an
--   ISO 8601-compliant string.
newtype Iso8601Time
Iso8601Time :: UTCTime -> Iso8601Time
[$sel:getIso8601Time:Iso8601Time] :: Iso8601Time -> UTCTime
data ApiByronWallet
ApiByronWallet :: !ApiT WalletId -> !ApiT WalletBalance -> !ApiT WalletName -> !Maybe (ApiT WalletPassphraseInfo) -> !ApiT SyncProgress -> !ApiBlockReference -> ApiByronWallet
[$sel:id:ApiByronWallet] :: ApiByronWallet -> !ApiT WalletId
[$sel:balance:ApiByronWallet] :: ApiByronWallet -> !ApiT WalletBalance
[$sel:name:ApiByronWallet] :: ApiByronWallet -> !ApiT WalletName
[$sel:passphrase:ApiByronWallet] :: ApiByronWallet -> !Maybe (ApiT WalletPassphraseInfo)
[$sel:state:ApiByronWallet] :: ApiByronWallet -> !ApiT SyncProgress
[$sel:tip:ApiByronWallet] :: ApiByronWallet -> !ApiBlockReference
newtype ApiByronWalletMigrationInfo
ApiByronWalletMigrationInfo :: Quantity "lovelace" Natural -> ApiByronWalletMigrationInfo
[$sel:migrationCost:ApiByronWalletMigrationInfo] :: ApiByronWalletMigrationInfo -> Quantity "lovelace" Natural
data ByronWalletPostData
ByronWalletPostData :: !ApiMnemonicT '[12] "seed" -> !ApiT WalletName -> !ApiT (Passphrase "encryption") -> ByronWalletPostData
[$sel:mnemonicSentence:ByronWalletPostData] :: ByronWalletPostData -> !ApiMnemonicT '[12] "seed"
[$sel:name:ByronWalletPostData] :: ByronWalletPostData -> !ApiT WalletName
[$sel:passphrase:ByronWalletPostData] :: ByronWalletPostData -> !ApiT (Passphrase "encryption")

-- | An abstract class to allow encoding of addresses depending on the
--   target backend used.
class EncodeAddress (n :: NetworkDiscriminant)
encodeAddress :: EncodeAddress n => Address -> Text

-- | An abstract class to allow decoding of addresses depending on the
--   target backend used.
class DecodeAddress (n :: NetworkDiscriminant)
decodeAddress :: DecodeAddress n => Text -> Either TextDecodingError Address

-- | Polymorphic wrapper type to put around primitive types and, 3rd party
--   lib types to avoid defining orphan instances and/or, undesirable
--   instances on primitive types. It helps to keep a nice separation of
--   concerns between the API layer and other modules.
newtype ApiT a
ApiT :: a -> ApiT a
[$sel:getApiT:ApiT] :: ApiT a -> a

-- | Representation of mnemonics at the API-level, using a polymorphic type
--   in the lengths of mnemonics that are supported (and an underlying
--   purpose). In practice, mnemonics correspond to passphrases or seeds,
--   and although they're nice to manipulate as mnemonics from a
--   user-perspective, carrying around a list of words doesn't really make
--   sense for the business logic, which prefers manipulating scrubbed
--   bytes directly.
--   
--   <pre>
--   data MyWallet
--       { mnemonic :: ApiMnemonicT '[15,18,21,24] "root-seed"
--       }
--   </pre>
--   
--   Note that the given <a>Nat</a>s **have** to be valid mnemonic sizes,
--   otherwise the underlying code won't even compile, with not-so-friendly
--   error messages.
--   
--   Also, the internal representation holds a <tt>[Text]</tt> which
--   contains the list of mnemonic words that was parsed. This is only to
--   be able to implement the <a>ToJSON</a> instances and roundtrip, which
--   is a very dubious argument. In practice, we'll NEVER peek at the
--   mnemonic, output them and whatnot.
newtype ApiMnemonicT (sizes :: [Nat]) (purpose :: Symbol)
ApiMnemonicT :: (Passphrase purpose, [Text]) -> ApiMnemonicT
getApiMnemonicT :: ApiMnemonicT sizes purpose -> Passphrase purpose
instance GHC.Show.Show Cardano.Wallet.Api.Types.WalletPostData
instance GHC.Generics.Generic Cardano.Wallet.Api.Types.WalletPostData
instance GHC.Classes.Eq Cardano.Wallet.Api.Types.WalletPostData
instance GHC.Show.Show Cardano.Wallet.Api.Types.ByronWalletPostData
instance GHC.Generics.Generic Cardano.Wallet.Api.Types.ByronWalletPostData
instance GHC.Classes.Eq Cardano.Wallet.Api.Types.ByronWalletPostData
instance GHC.Classes.Eq (Cardano.Wallet.Api.Types.ApiMnemonicT sizes purpose)
instance GHC.Show.Show (Cardano.Wallet.Api.Types.ApiMnemonicT sizes purpose)
instance GHC.Generics.Generic (Cardano.Wallet.Api.Types.ApiMnemonicT sizes purpose)
instance GHC.Show.Show (Cardano.Wallet.Api.Types.ApiAddress n)
instance GHC.Generics.Generic (Cardano.Wallet.Api.Types.ApiAddress n)
instance GHC.Classes.Eq (Cardano.Wallet.Api.Types.ApiAddress n)
instance GHC.Show.Show Cardano.Wallet.Api.Types.ApiWallet
instance GHC.Generics.Generic Cardano.Wallet.Api.Types.ApiWallet
instance GHC.Classes.Eq Cardano.Wallet.Api.Types.ApiWallet
instance GHC.Show.Show Cardano.Wallet.Api.Types.ApiWalletPassphrase
instance GHC.Generics.Generic Cardano.Wallet.Api.Types.ApiWalletPassphrase
instance GHC.Classes.Eq Cardano.Wallet.Api.Types.ApiWalletPassphrase
instance GHC.Show.Show Cardano.Wallet.Api.Types.ApiStakePool
instance GHC.Generics.Generic Cardano.Wallet.Api.Types.ApiStakePool
instance GHC.Classes.Eq Cardano.Wallet.Api.Types.ApiStakePool
instance GHC.Show.Show Cardano.Wallet.Api.Types.ApiUtxoStatistics
instance GHC.Generics.Generic Cardano.Wallet.Api.Types.ApiUtxoStatistics
instance GHC.Classes.Eq Cardano.Wallet.Api.Types.ApiUtxoStatistics
instance GHC.Show.Show Cardano.Wallet.Api.Types.WalletPutData
instance GHC.Generics.Generic Cardano.Wallet.Api.Types.WalletPutData
instance GHC.Classes.Eq Cardano.Wallet.Api.Types.WalletPutData
instance GHC.Show.Show Cardano.Wallet.Api.Types.WalletPutPassphraseData
instance GHC.Generics.Generic Cardano.Wallet.Api.Types.WalletPutPassphraseData
instance GHC.Classes.Eq Cardano.Wallet.Api.Types.WalletPutPassphraseData
instance GHC.Show.Show (Cardano.Wallet.Api.Types.PostTransactionData n)
instance GHC.Generics.Generic (Cardano.Wallet.Api.Types.PostTransactionData n)
instance GHC.Classes.Eq (Cardano.Wallet.Api.Types.PostTransactionData n)
instance GHC.Show.Show Cardano.Wallet.Api.Types.ApiTxId
instance GHC.Generics.Generic Cardano.Wallet.Api.Types.ApiTxId
instance GHC.Classes.Eq Cardano.Wallet.Api.Types.ApiTxId
instance GHC.Show.Show (Cardano.Wallet.Api.Types.ApiTransaction n)
instance GHC.Generics.Generic (Cardano.Wallet.Api.Types.ApiTransaction n)
instance GHC.Classes.Eq (Cardano.Wallet.Api.Types.ApiTransaction n)
instance GHC.Show.Show (Cardano.Wallet.Api.Types.ApiTxInput n)
instance GHC.Generics.Generic (Cardano.Wallet.Api.Types.ApiTxInput n)
instance GHC.Classes.Eq (Cardano.Wallet.Api.Types.ApiTxInput n)
instance GHC.Show.Show (Cardano.Wallet.Api.Types.PostTransactionFeeData n)
instance GHC.Generics.Generic (Cardano.Wallet.Api.Types.PostTransactionFeeData n)
instance GHC.Classes.Eq (Cardano.Wallet.Api.Types.PostTransactionFeeData n)
instance GHC.Show.Show (Cardano.Wallet.Api.Types.AddressAmount n)
instance GHC.Generics.Generic (Cardano.Wallet.Api.Types.AddressAmount n)
instance GHC.Classes.Eq (Cardano.Wallet.Api.Types.AddressAmount n)
instance GHC.Show.Show Cardano.Wallet.Api.Types.ApiTimeReference
instance GHC.Generics.Generic Cardano.Wallet.Api.Types.ApiTimeReference
instance GHC.Classes.Eq Cardano.Wallet.Api.Types.ApiTimeReference
instance GHC.Show.Show Cardano.Wallet.Api.Types.ApiNetworkInformation
instance GHC.Generics.Generic Cardano.Wallet.Api.Types.ApiNetworkInformation
instance GHC.Classes.Eq Cardano.Wallet.Api.Types.ApiNetworkInformation
instance GHC.Show.Show Cardano.Wallet.Api.Types.ApiByronWallet
instance GHC.Generics.Generic Cardano.Wallet.Api.Types.ApiByronWallet
instance GHC.Classes.Eq Cardano.Wallet.Api.Types.ApiByronWallet
instance GHC.Show.Show Cardano.Wallet.Api.Types.ApiBlockReference
instance GHC.Generics.Generic Cardano.Wallet.Api.Types.ApiBlockReference
instance GHC.Classes.Eq Cardano.Wallet.Api.Types.ApiBlockReference
instance GHC.Show.Show Cardano.Wallet.Api.Types.ApiNetworkTip
instance GHC.Generics.Generic Cardano.Wallet.Api.Types.ApiNetworkTip
instance GHC.Classes.Eq Cardano.Wallet.Api.Types.ApiNetworkTip
instance GHC.Classes.Eq a => GHC.Classes.Eq (Cardano.Wallet.Api.Types.ApiT a)
instance GHC.Show.Show a => GHC.Show.Show (Cardano.Wallet.Api.Types.ApiT a)
instance GHC.Generics.Generic (Cardano.Wallet.Api.Types.ApiT a)
instance GHC.Show.Show Cardano.Wallet.Api.Types.ApiByronWalletMigrationInfo
instance GHC.Generics.Generic Cardano.Wallet.Api.Types.ApiByronWalletMigrationInfo
instance GHC.Classes.Eq Cardano.Wallet.Api.Types.ApiByronWalletMigrationInfo
instance GHC.Show.Show Cardano.Wallet.Api.Types.Iso8601Time
instance GHC.Classes.Ord Cardano.Wallet.Api.Types.Iso8601Time
instance GHC.Classes.Eq Cardano.Wallet.Api.Types.Iso8601Time
instance GHC.Show.Show Cardano.Wallet.Api.Types.ApiErrorCode
instance GHC.Generics.Generic Cardano.Wallet.Api.Types.ApiErrorCode
instance GHC.Classes.Eq Cardano.Wallet.Api.Types.ApiErrorCode
instance GHC.Show.Show Cardano.Wallet.Api.Types.ApiFee
instance GHC.Generics.Generic Cardano.Wallet.Api.Types.ApiFee
instance GHC.Classes.Eq Cardano.Wallet.Api.Types.ApiFee
instance GHC.Show.Show Cardano.Wallet.Api.Types.PostExternalTransactionData
instance GHC.Generics.Generic Cardano.Wallet.Api.Types.PostExternalTransactionData
instance GHC.Classes.Eq Cardano.Wallet.Api.Types.PostExternalTransactionData
instance GHC.Show.Show Cardano.Wallet.Api.Types.ApiStakePoolMetrics
instance GHC.Generics.Generic Cardano.Wallet.Api.Types.ApiStakePoolMetrics
instance GHC.Classes.Eq Cardano.Wallet.Api.Types.ApiStakePoolMetrics
instance Cardano.Wallet.Api.Types.DecodeAddress n => Data.Aeson.Types.FromJSON.FromJSON (Cardano.Wallet.Api.Types.ApiAddress n)
instance Cardano.Wallet.Api.Types.DecodeAddress n => Data.Aeson.Types.FromJSON.FromJSON (Cardano.Wallet.Api.Types.ApiT Cardano.Wallet.Primitive.Types.Address, Data.Proxy.Proxy n)
instance Cardano.Wallet.Api.Types.DecodeAddress t => Data.Aeson.Types.FromJSON.FromJSON (Cardano.Wallet.Api.Types.PostTransactionData t)
instance Cardano.Wallet.Api.Types.DecodeAddress t => Data.Aeson.Types.FromJSON.FromJSON (Cardano.Wallet.Api.Types.PostTransactionFeeData t)
instance Cardano.Wallet.Api.Types.DecodeAddress n => Data.Aeson.Types.FromJSON.FromJSON (Cardano.Wallet.Api.Types.AddressAmount n)
instance Cardano.Wallet.Api.Types.DecodeAddress n => Data.Aeson.Types.FromJSON.FromJSON (Cardano.Wallet.Api.Types.ApiTransaction n)
instance Cardano.Wallet.Api.Types.DecodeAddress n => Data.Aeson.Types.FromJSON.FromJSON (Cardano.Wallet.Api.Types.ApiTxInput n)
instance Cardano.Wallet.Api.Types.DecodeAddress n => Data.Text.Class.FromText (Cardano.Wallet.Api.Types.AddressAmount n)
instance Cardano.Wallet.Api.Types.DecodeAddress 'Cardano.Wallet.Primitive.AddressDerivation.Mainnet
instance Cardano.Wallet.Api.Types.DecodeAddress 'Cardano.Wallet.Primitive.AddressDerivation.Testnet
instance Cardano.Wallet.Api.Types.EncodeAddress n => Data.Aeson.Types.ToJSON.ToJSON (Cardano.Wallet.Api.Types.ApiAddress n)
instance Cardano.Wallet.Api.Types.EncodeAddress n => Data.Aeson.Types.ToJSON.ToJSON (Cardano.Wallet.Api.Types.ApiT Cardano.Wallet.Primitive.Types.Address, Data.Proxy.Proxy n)
instance Cardano.Wallet.Api.Types.EncodeAddress t => Data.Aeson.Types.ToJSON.ToJSON (Cardano.Wallet.Api.Types.PostTransactionData t)
instance Cardano.Wallet.Api.Types.EncodeAddress t => Data.Aeson.Types.ToJSON.ToJSON (Cardano.Wallet.Api.Types.PostTransactionFeeData t)
instance Cardano.Wallet.Api.Types.EncodeAddress n => Data.Aeson.Types.ToJSON.ToJSON (Cardano.Wallet.Api.Types.AddressAmount n)
instance Cardano.Wallet.Api.Types.EncodeAddress n => Data.Aeson.Types.ToJSON.ToJSON (Cardano.Wallet.Api.Types.ApiTransaction n)
instance Cardano.Wallet.Api.Types.EncodeAddress n => Data.Aeson.Types.ToJSON.ToJSON (Cardano.Wallet.Api.Types.ApiTxInput n)
instance Cardano.Wallet.Api.Types.EncodeAddress n => Data.Text.Class.ToText (Cardano.Wallet.Api.Types.AddressAmount n)
instance Cardano.Wallet.Api.Types.EncodeAddress 'Cardano.Wallet.Primitive.AddressDerivation.Mainnet
instance Cardano.Wallet.Api.Types.EncodeAddress 'Cardano.Wallet.Primitive.AddressDerivation.Testnet
instance Data.Aeson.Types.FromJSON.FromJSON Cardano.Wallet.Api.Types.WalletPostData
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.Wallet.Api.Types.WalletPostData
instance Data.Aeson.Types.FromJSON.FromJSON Cardano.Wallet.Api.Types.ByronWalletPostData
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.Wallet.Api.Types.ByronWalletPostData
instance Cardano.Wallet.Primitive.AddressDerivation.FromMnemonic sizes purpose => Data.Aeson.Types.FromJSON.FromJSON (Cardano.Wallet.Api.Types.ApiMnemonicT sizes purpose)
instance Data.Aeson.Types.ToJSON.ToJSON (Cardano.Wallet.Api.Types.ApiMnemonicT sizes purpose)
instance Data.Aeson.Types.FromJSON.FromJSON Cardano.Wallet.Api.Types.ApiWallet
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.Wallet.Api.Types.ApiWallet
instance Data.Aeson.Types.FromJSON.FromJSON Cardano.Wallet.Api.Types.ApiWalletPassphrase
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.Wallet.Api.Types.ApiWalletPassphrase
instance Data.Aeson.Types.FromJSON.FromJSON Cardano.Wallet.Api.Types.ApiStakePool
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.Wallet.Api.Types.ApiStakePool
instance Data.Aeson.Types.FromJSON.FromJSON Cardano.Wallet.Api.Types.ApiUtxoStatistics
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.Wallet.Api.Types.ApiUtxoStatistics
instance Data.Aeson.Types.FromJSON.FromJSON Cardano.Wallet.Api.Types.WalletPutData
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.Wallet.Api.Types.WalletPutData
instance Data.Aeson.Types.FromJSON.FromJSON Cardano.Wallet.Api.Types.WalletPutPassphraseData
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.Wallet.Api.Types.WalletPutPassphraseData
instance Data.Aeson.Types.FromJSON.FromJSON Cardano.Wallet.Api.Types.ApiTxId
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.Wallet.Api.Types.ApiTxId
instance Web.Internal.HttpApiData.FromHttpApiData Cardano.Wallet.Api.Types.ApiTxId
instance Web.Internal.HttpApiData.ToHttpApiData Cardano.Wallet.Api.Types.ApiTxId
instance Data.Aeson.Types.FromJSON.FromJSON Cardano.Wallet.Api.Types.ApiTimeReference
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.Wallet.Api.Types.ApiTimeReference
instance Data.Aeson.Types.FromJSON.FromJSON Cardano.Wallet.Api.Types.ApiNetworkInformation
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.Wallet.Api.Types.ApiNetworkInformation
instance Data.Aeson.Types.FromJSON.FromJSON Cardano.Wallet.Api.Types.ApiByronWallet
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.Wallet.Api.Types.ApiByronWallet
instance Data.Aeson.Types.FromJSON.FromJSON Cardano.Wallet.Api.Types.ApiBlockReference
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.Wallet.Api.Types.ApiBlockReference
instance Data.Aeson.Types.FromJSON.FromJSON Cardano.Wallet.Api.Types.ApiNetworkTip
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.Wallet.Api.Types.ApiNetworkTip
instance Data.Aeson.Types.FromJSON.FromJSON (Cardano.Wallet.Api.Types.ApiT Cardano.Wallet.Primitive.Types.AddressState)
instance Data.Aeson.Types.ToJSON.ToJSON (Cardano.Wallet.Api.Types.ApiT Cardano.Wallet.Primitive.Types.AddressState)
instance (Cardano.Wallet.Primitive.AddressDerivation.PassphraseMaxLength purpose, Cardano.Wallet.Primitive.AddressDerivation.PassphraseMinLength purpose) => Data.Aeson.Types.FromJSON.FromJSON (Cardano.Wallet.Api.Types.ApiT (Cardano.Wallet.Primitive.AddressDerivation.Passphrase purpose))
instance Data.Aeson.Types.ToJSON.ToJSON (Cardano.Wallet.Api.Types.ApiT (Cardano.Wallet.Primitive.AddressDerivation.Passphrase purpose))
instance Data.Aeson.Types.FromJSON.FromJSON (Cardano.Wallet.Api.Types.ApiT Cardano.Wallet.Primitive.Types.WalletId)
instance Data.Aeson.Types.ToJSON.ToJSON (Cardano.Wallet.Api.Types.ApiT Cardano.Wallet.Primitive.Types.WalletId)
instance Data.Aeson.Types.FromJSON.FromJSON (Cardano.Wallet.Api.Types.ApiT Cardano.Wallet.Primitive.AddressDiscovery.Sequential.AddressPoolGap)
instance Data.Aeson.Types.ToJSON.ToJSON (Cardano.Wallet.Api.Types.ApiT Cardano.Wallet.Primitive.AddressDiscovery.Sequential.AddressPoolGap)
instance Data.Aeson.Types.FromJSON.FromJSON (Cardano.Wallet.Api.Types.ApiT Cardano.Wallet.Primitive.Types.WalletBalance)
instance Data.Aeson.Types.ToJSON.ToJSON (Cardano.Wallet.Api.Types.ApiT Cardano.Wallet.Primitive.Types.WalletBalance)
instance Data.Aeson.Types.FromJSON.FromJSON (Cardano.Wallet.Api.Types.ApiT Cardano.Wallet.Primitive.Types.PoolId)
instance Data.Aeson.Types.ToJSON.ToJSON (Cardano.Wallet.Api.Types.ApiT Cardano.Wallet.Primitive.Types.PoolId)
instance Data.Aeson.Types.FromJSON.FromJSON (Cardano.Wallet.Api.Types.ApiT (Cardano.Wallet.Primitive.Types.WalletDelegation (Cardano.Wallet.Api.Types.ApiT Cardano.Wallet.Primitive.Types.PoolId)))
instance Data.Aeson.Types.ToJSON.ToJSON (Cardano.Wallet.Api.Types.ApiT (Cardano.Wallet.Primitive.Types.WalletDelegation (Cardano.Wallet.Api.Types.ApiT Cardano.Wallet.Primitive.Types.PoolId)))
instance Data.Aeson.Types.FromJSON.FromJSON (Cardano.Wallet.Api.Types.ApiT Cardano.Wallet.Primitive.Types.WalletName)
instance Data.Aeson.Types.ToJSON.ToJSON (Cardano.Wallet.Api.Types.ApiT Cardano.Wallet.Primitive.Types.WalletName)
instance Data.Aeson.Types.FromJSON.FromJSON (Cardano.Wallet.Api.Types.ApiT Cardano.Wallet.Primitive.Types.WalletPassphraseInfo)
instance Data.Aeson.Types.ToJSON.ToJSON (Cardano.Wallet.Api.Types.ApiT Cardano.Wallet.Primitive.Types.WalletPassphraseInfo)
instance Data.Aeson.Types.FromJSON.FromJSON (Cardano.Wallet.Api.Types.ApiT Cardano.Wallet.Primitive.Types.SyncProgress)
instance Data.Aeson.Types.ToJSON.ToJSON (Cardano.Wallet.Api.Types.ApiT Cardano.Wallet.Primitive.Types.SyncProgress)
instance Data.Aeson.Types.ToJSON.ToJSON (Cardano.Wallet.Api.Types.ApiT Cardano.Wallet.Primitive.Types.BoundType)
instance Data.Aeson.Types.FromJSON.FromJSON (Cardano.Wallet.Api.Types.ApiT Cardano.Wallet.Primitive.Types.BoundType)
instance Data.Aeson.Types.FromJSON.FromJSON (Cardano.Wallet.Api.Types.ApiT Cardano.Wallet.Primitive.Types.EpochNo)
instance Data.Aeson.Types.ToJSON.ToJSON (Cardano.Wallet.Api.Types.ApiT Cardano.Wallet.Primitive.Types.EpochNo)
instance Data.Aeson.Types.FromJSON.FromJSON (Cardano.Wallet.Api.Types.ApiT Cardano.Wallet.Primitive.Types.SlotNo)
instance Data.Aeson.Types.ToJSON.ToJSON (Cardano.Wallet.Api.Types.ApiT Cardano.Wallet.Primitive.Types.SlotNo)
instance Data.Aeson.Types.FromJSON.FromJSON (Cardano.Wallet.Api.Types.ApiT Cardano.Wallet.Primitive.Types.TxIn)
instance Data.Aeson.Types.ToJSON.ToJSON (Cardano.Wallet.Api.Types.ApiT Cardano.Wallet.Primitive.Types.TxIn)
instance Data.Aeson.Types.FromJSON.FromJSON (Cardano.Wallet.Api.Types.ApiT (Cardano.Wallet.Primitive.Types.Hash "Tx"))
instance Data.Aeson.Types.ToJSON.ToJSON (Cardano.Wallet.Api.Types.ApiT (Cardano.Wallet.Primitive.Types.Hash "Tx"))
instance Data.Aeson.Types.FromJSON.FromJSON (Cardano.Wallet.Api.Types.ApiT Cardano.Wallet.Primitive.Types.Direction)
instance Data.Aeson.Types.ToJSON.ToJSON (Cardano.Wallet.Api.Types.ApiT Cardano.Wallet.Primitive.Types.Direction)
instance Data.Aeson.Types.FromJSON.FromJSON (Cardano.Wallet.Api.Types.ApiT Cardano.Wallet.Primitive.Types.TxStatus)
instance Data.Aeson.Types.ToJSON.ToJSON (Cardano.Wallet.Api.Types.ApiT Cardano.Wallet.Primitive.Types.TxStatus)
instance Data.Text.Class.FromText a => Web.Internal.HttpApiData.FromHttpApiData (Cardano.Wallet.Api.Types.ApiT a)
instance Data.Text.Class.ToText a => Web.Internal.HttpApiData.ToHttpApiData (Cardano.Wallet.Api.Types.ApiT a)
instance Data.Aeson.Types.FromJSON.FromJSON Cardano.Wallet.Api.Types.ApiByronWalletMigrationInfo
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.Wallet.Api.Types.ApiByronWalletMigrationInfo
instance Data.Text.Class.ToText Cardano.Wallet.Api.Types.Iso8601Time
instance Data.Text.Class.FromText Cardano.Wallet.Api.Types.Iso8601Time
instance Web.Internal.HttpApiData.FromHttpApiData Cardano.Wallet.Api.Types.Iso8601Time
instance Web.Internal.HttpApiData.ToHttpApiData Cardano.Wallet.Api.Types.Iso8601Time
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.Wallet.Api.Types.ApiErrorCode
instance Data.Aeson.Types.FromJSON.FromJSON Cardano.Wallet.Api.Types.ApiFee
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.Wallet.Api.Types.ApiFee
instance Data.Text.Class.FromText Cardano.Wallet.Api.Types.PostExternalTransactionData
instance Servant.API.ContentTypes.MimeUnrender Servant.API.ContentTypes.OctetStream Cardano.Wallet.Api.Types.PostExternalTransactionData
instance Servant.API.ContentTypes.MimeRender Servant.API.ContentTypes.OctetStream Cardano.Wallet.Api.Types.PostExternalTransactionData
instance Data.Aeson.Types.FromJSON.FromJSON Cardano.Wallet.Api.Types.ApiStakePoolMetrics
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.Wallet.Api.Types.ApiStakePoolMetrics

module Cardano.Wallet.Unsafe

-- | Decode an hex-encoded <a>ByteString</a> into raw bytes, or fail.
unsafeFromHex :: HasCallStack => ByteString -> ByteString

-- | Decode a bech32-encoded <a>Text</a> into an <a>Address</a>, or fail.
unsafeDecodeAddress :: forall n. (HasCallStack, DecodeAddress n) => Text -> Address

-- | Run a decoder on a hex-encoded <a>ByteString</a>, or fail.
unsafeDecodeHex :: HasCallStack => Get a -> ByteString -> a

-- | Decode the given data-type from a textual representation, or fail.
unsafeFromText :: (FromText a, HasCallStack) => Text -> a

-- | Run an <a>ExceptT</a> and throws the error if any. This makes sense
--   only if called after checking for an invariant or, after ensuring that
--   preconditions for meeting the underlying error have been discarded.
unsafeRunExceptT :: (MonadFail m, Show e) => ExceptT e m a -> m a

-- | Build a <a>XPrv</a> from an hex-encoded bytestring
unsafeXPrv :: HasCallStack => ByteString -> XPrv

-- | Build <a>Mnemonic</a> from literals
unsafeMkMnemonic :: forall mw n csz. (ConsistentEntropy n mw csz, EntropySize mw ~ n, HasCallStack) => [Text] -> Mnemonic mw

-- | CBOR deserialise without error handling - handy for prototypes or
--   testing.
unsafeDeserialiseCbor :: HasCallStack => (forall s. Decoder s a) -> ByteString -> a

module Cardano.Wallet.Api
type Api t = CoreApi t :<|> CompatibilityApi t :<|> StakePoolApi t
type CoreApi t = Addresses t :<|> Wallets :<|> Transactions t :<|> Network
type Addresses t = ListAddresses t
type Wallets = DeleteWallet :<|> GetWallet :<|> ListWallets :<|> PostWallet :<|> PutWallet :<|> PutWalletPassphrase :<|> GetUTxOsStatistics
type Transactions n = CreateTransaction n :<|> ListTransactions n :<|> PostTransactionFee n :<|> PostExternalTransaction :<|> DeleteTransaction
type StakePoolApi t = ListStakePools :<|> JoinStakePool t :<|> QuitStakePool t
type CompatibilityApi n = DeleteByronWallet :<|> GetByronWallet :<|> GetByronWalletMigrationInfo :<|> ListByronWallets :<|> ListByronTransactions n :<|> MigrateByronWallet n :<|> PostByronWallet :<|> DeleteByronTransaction
data ApiLayer s t (k :: Depth -> * -> *)
ApiLayer :: Trace IO Text -> (Block, BlockchainParameters, SyncTolerance) -> NetworkLayer IO t Block -> TransactionLayer t k -> DBFactory IO s k -> WorkerRegistry WalletId (DBLayer IO s k) -> ApiLayer s t
type HasWorkerRegistry s k ctx = (HasType (WorkerRegistry WalletId (DBLayer IO s k)) ctx, HasWorkerCtx (DBLayer IO s k) ctx)
workerRegistry :: forall s k ctx. HasWorkerRegistry s k ctx => Lens' ctx (WorkerRegistry WalletId (DBLayer IO s k))
type HasDBFactory s k = HasType (DBFactory IO s k)
dbFactory :: forall s k ctx. HasDBFactory s k ctx => Lens' ctx (DBFactory IO s k)

-- | Any media type
data Any
instance GHC.Generics.Generic (Cardano.Wallet.Api.ApiLayer s t k)
instance Cardano.Wallet.Registry.HasWorkerCtx (Cardano.Wallet.DB.DBLayer GHC.Types.IO s k) (Cardano.Wallet.Api.ApiLayer s t k)
instance Servant.API.ContentTypes.Accept Cardano.Wallet.Api.Any


-- | Utility functions for manipulating time values.
module Data.Time.Utils

-- | For a given time <tt>t0</tt>, get the closest representable time
--   <tt>t1</tt> to <tt>t0</tt> for which 't1 &lt; t0'.
utcTimePred :: UTCTime -> UTCTime

-- | For a given time <tt>t0</tt>, get the closest representable time
--   <tt>t1</tt> to <tt>t0</tt> for which 't0 &lt; t1'.
utcTimeSucc :: UTCTime -> UTCTime

module Network.Wai.Middleware.Logging

-- | Installs a request &amp; response logger on a Wai application.
--   
--   The logger logs requests' and responses' bodies along with a few other
--   useful piece of information.
withApiLogger :: Trace IO Text -> ApiLoggerSettings -> Middleware

-- | Create a new opaque <a>ApiLoggerSettings</a>
newApiLoggerSettings :: IO ApiLoggerSettings

-- | API logger settings
data ApiLoggerSettings

-- | Define a set of top-level object keys that should be obfuscated for a
--   given request in a JSON format.
obfuscateKeys :: (Request -> [Text]) -> ApiLoggerSettings -> ApiLoggerSettings


-- | Middleware between Wai <a>-</a> Servant to accommodate raw error
--   responses returned by servant. See also <a>handleRawError</a>.
module Network.Wai.Middleware.ServantError

-- | Make sure every error is converted to a suitable application-level
--   error.
--   
--   There are many cases where Servant will handle errors itself and reply
--   to a client without even disturbing the application. This is both
--   handy and clunky since our application return errors in a specific
--   format (e.g. JSON, XML ...).
--   
--   This is the case for instance if the client hits a non-exiting
--   endpoint of the API, or if the client requests an invalid
--   content-type, etc ...
--   
--   Ideally, we would like clients to be able to expect one and only one
--   format, so this middleware allows for manipulating the response
--   returned by a Wai application (what servant boils down to) and adjust
--   the response when necessary. So, any response with or without payload
--   but no content-type will trigger the <tt>convert</tt> function and
--   offer the caller to adjust the response as needed.
handleRawError :: (Request -> ServantErr -> ServantErr) -> Middleware


-- | API handlers and server using the underlying wallet layer to provide
--   endpoints reachable through HTTP.
module Cardano.Wallet.Api.Server

-- | How the server should listen for incoming requests.
data Listen

-- | Listen on given TCP port
ListenOnPort :: Port -> Listen

-- | Listen on an unused TCP port, selected at random
ListenOnRandomPort :: Listen
data ListenError
ListenErrorAddressAlreadyInUse :: Maybe Port -> ListenError
ListenErrorOperationNotPermitted :: ListenError
ListenErrorHostDoesNotExist :: HostPreference -> ListenError
ListenErrorInvalidAddress :: HostPreference -> ListenError
data HostPreference

-- | Start the application server, using the given settings and a bound
--   socket.
start :: forall t (n :: NetworkDiscriminant). (Buildable (ErrValidateSelection t), DecodeAddress n, EncodeAddress n, PaymentAddress n ShelleyKey, PaymentAddress n ByronKey) => Settings -> Trace IO Text -> Socket -> ApiLayer (RndState  'Mainnet) t ByronKey -> ApiLayer (SeqState n ShelleyKey) t ShelleyKey -> StakePoolLayer IO -> IO ()

-- | Create a new instance of the wallet layer.
newApiLayer :: forall ctx s t k. ctx ~ ApiLayer s t k => Trace IO Text -> (Block, BlockchainParameters, SyncTolerance) -> NetworkLayer IO t Block -> TransactionLayer t k -> DBFactory IO s k -> [WalletId] -> IO ctx

-- | Run an action with a TCP socket bound to a port specified by the
--   <a>Listen</a> parameter.
withListeningSocket :: HostPreference -> Listen -> (Either ListenError (Port, Socket) -> IO a) -> IO a
defaultWorkerAfter :: Trace IO Text -> Either SomeException a -> IO ()
instance GHC.Show.Show Cardano.Wallet.Api.Server.ErrMigrateWallet
instance GHC.Classes.Eq Cardano.Wallet.Api.Server.ErrMigrateWallet
instance GHC.Show.Show Cardano.Wallet.Api.Server.ErrCreateWallet
instance GHC.Classes.Eq Cardano.Wallet.Api.Server.ErrCreateWallet
instance GHC.Classes.Eq Cardano.Wallet.Api.Server.ListenError
instance GHC.Show.Show Cardano.Wallet.Api.Server.ListenError
instance GHC.Classes.Eq Cardano.Wallet.Api.Server.Listen
instance GHC.Show.Show Cardano.Wallet.Api.Server.Listen
instance Cardano.Wallet.Api.Server.LiftHandler Cardano.Wallet.Api.Server.ErrMigrateWallet
instance Cardano.Wallet.Api.Server.LiftHandler Cardano.Wallet.Api.Server.ErrCreateWallet
instance Cardano.Wallet.Api.Server.LiftHandler Cardano.Wallet.DB.ErrNoSuchWallet
instance Cardano.Wallet.Api.Server.LiftHandler Cardano.Wallet.DB.ErrWalletAlreadyExists
instance Cardano.Wallet.Api.Server.LiftHandler Cardano.Wallet.ErrWithRootKey
instance Formatting.Buildable.Buildable e => Cardano.Wallet.Api.Server.LiftHandler (Cardano.Wallet.Primitive.CoinSelection.ErrCoinSelection e)
instance Cardano.Wallet.Api.Server.LiftHandler Cardano.Wallet.Primitive.Fee.ErrAdjustForFee
instance Formatting.Buildable.Buildable e => Cardano.Wallet.Api.Server.LiftHandler (Cardano.Wallet.ErrCreateUnsignedTx e)
instance Formatting.Buildable.Buildable e => Cardano.Wallet.Api.Server.LiftHandler (Cardano.Wallet.ErrEstimateTxFee e)
instance Cardano.Wallet.Api.Server.LiftHandler Cardano.Wallet.ErrListUTxOStatistics
instance Cardano.Wallet.Api.Server.LiftHandler Cardano.Wallet.ErrSignTx
instance Cardano.Wallet.Api.Server.LiftHandler Cardano.Wallet.Transaction.ErrDecodeSignedTx
instance Cardano.Wallet.Api.Server.LiftHandler Cardano.Wallet.ErrSubmitExternalTx
instance Cardano.Wallet.Api.Server.LiftHandler Cardano.Wallet.DB.ErrRemovePendingTx
instance Cardano.Wallet.Api.Server.LiftHandler Cardano.Wallet.ErrSubmitTx
instance Cardano.Wallet.Api.Server.LiftHandler Cardano.Wallet.Network.ErrNetworkUnavailable
instance Cardano.Wallet.Api.Server.LiftHandler Cardano.Wallet.ErrUpdatePassphrase
instance Cardano.Wallet.Api.Server.LiftHandler Cardano.Wallet.ErrListTransactions
instance Cardano.Wallet.Api.Server.LiftHandler Cardano.Wallet.ErrStartTimeLaterThanEndTime
instance Cardano.Wallet.Api.Server.LiftHandler Cardano.Wallet.Network.ErrNetworkTip
instance Cardano.Wallet.Api.Server.LiftHandler Cardano.Pool.Metrics.ErrListStakePools
instance Cardano.Wallet.Api.Server.LiftHandler Cardano.Pool.Metrics.ErrMetricsInconsistency
instance Cardano.Wallet.Api.Server.LiftHandler (Network.Wai.Internal.Request, Servant.Server.Internal.ServantErr.ServantErr)


-- | Provides the package version and git revision which this was compiled
--   from.
--   
--   It is assumed that all cardano-wallet packages have the same version,
--   that of the core package.
--   
--   Stack builds will have the <tt>git</tt> command available to run
--   during compilation.
--   
--   Nix builds will inject the git revision into the executables after
--   compiling. If the git revision has changed but the sources have not,
--   then no haskell packages will be rebuilt, but the embedded git
--   revision will be updated.
module Cardano.Wallet.Version
version :: Version

-- | The Git revision ID (40 character hex string) of this build.
--   
--   This requires <tt>git</tt> do be available when building.
--   Alternatively, the git revision of the <tt>cardano-wallet</tt> binary
--   can be updated post-build using "Data.FileEmbed.injectWith".
gitRevision :: GitRevision

-- | Provides one possible concrete representation for <a>Version</a>. For
--   a version with <a>versionBranch</a> <tt>= [1,2,3]</tt> and
--   <a>versionTags</a> <tt>= ["tag1","tag2"]</tt>, the output will be
--   <tt>1.2.3-tag1-tag2</tt>.
showVersion :: Version -> String

-- | Like <a>showVersion</a>, but also show the git revision.
showFullVersion :: Version -> GitRevision -> String
