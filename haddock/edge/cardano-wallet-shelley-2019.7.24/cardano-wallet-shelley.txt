-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Wallet backend protocol-specific bits implemented using Shelley nodes
--   
--   Please see README.md
@package cardano-wallet-shelley
@version 2019.7.24

module Cardano.Wallet.Shelley.Network

-- | A stateless interface for dealing with the Haskell
--   <a>NetworkClient</a>
--   
--   See <a>newNetworkClient</a> and <a>connectClient</a> methods to
--   construct a <a>NetworkLayer</a>:
--   
--   let nodeId = CoreNodeId 0 let addr = localSocketAddrInfo
--   (localSocketFilePath nodeId) let params = ChainParameters { epochSlots
--   = EpochSlots 21600 , protocolMagic = ProtocolMagicId 1097911063 }
--   (client, network) &lt;- newNetworkClient nullTracer params
--   
--   <ul>
--   <li>- Launch the stateful connection in a separate thread void $
--   forkIO $ connectClient client dummyNodeToClientVersion addr</li>
--   <li>- Use the network layer to send requests to the node response
--   &lt;- runExceptT $ nextBlocks network genesisPoint point &lt;-
--   networkTip network response' &lt;- runExceptT $ nextBlocks network
--   point</li>
--   </ul>
data NetworkLayer m
NetworkLayer :: (Point -> ExceptT ErrNextBlocks m [Block]) -> m Point -> NetworkLayer m
[nextBlocks] :: NetworkLayer m -> Point -> ExceptT ErrNextBlocks m [Block]
[networkTip] :: NetworkLayer m -> m Point

-- | What is considered errors in the <a>NetworkLayer</a>
data ErrNextBlocks
ErrNextBlocksNoIntersection :: ErrNextBlocks
ErrNextBlocksRollBack :: ErrNextBlocks
data ChainParameters
ChainParameters :: EpochSlots -> ProtocolMagicId -> ChainParameters

-- | Number of slots per epoch.
[epochSlots] :: ChainParameters -> EpochSlots

-- | Protocol magic (e.g. mainnet=764824073, testnet=1097911063)
[protocolMagic] :: ChainParameters -> ProtocolMagicId
newtype EpochSlots
EpochSlots :: Word64 -> EpochSlots
[unEpochSlots] :: EpochSlots -> Word64
newtype ProtocolMagicId
ProtocolMagicId :: Word32 -> ProtocolMagicId
[unProtocolMagicId] :: ProtocolMagicId -> Word32

-- | Construct a new network client handling <a>ChainSync</a> and
--   <a>LocalTxSubmission</a> mini-protocols.
newNetworkClient :: forall m. (MonadThrow m, MonadST m, MonadTimer m) => Tracer m String -> ChainParameters -> m (NetworkClient m, NetworkLayer m)
connectClient :: forall vData. vData ~ NodeToClientVersionData => NetworkClient IO -> (vData, CodecCBORTerm Text vData) -> AddrInfo -> IO ()

-- | A dummy network magic for a local cluster. When connecting to mainnet
--   or testnet, this should match the underlying network's configuration.
dummyNodeToClientVersion :: (NodeToClientVersionData, CodecCBORTerm Text NodeToClientVersionData)

-- | Construct an <a>AddrInfo</a> from a <a>FilePath</a>. This caracterises
--   a unix domain socket than serves as transport for the mini-protocols.
localSocketAddrInfo :: FilePath -> AddrInfo

-- | Sockets are named after a particular convention using a core node id.
localSocketFilePath :: CoreNodeId -> FilePath
instance GHC.Show.Show Cardano.Wallet.Shelley.Network.ErrNextBlocks
