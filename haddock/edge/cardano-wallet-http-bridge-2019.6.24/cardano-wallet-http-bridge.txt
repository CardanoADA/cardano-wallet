-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Wallet backend protocol-specific bits implemented using the cardano-http-bridge
--   
--   Please see README.md
@package cardano-wallet-http-bridge
@version 2019.6.24


-- | This module contains static configuration parameters. Rather than
--   providing and carrying around a configuration file through the
--   application, we resolve configuration data at runtime using the
--   available environment.
--   
--   This gives us a flexible and portable approach to software
--   configuration, and remove some pain from the development perspective.
--   Prior to starting, the wallet is expected to have a few configuration
--   parameter available. One may rely on a `.env` file to bundle
--   configuration settings together for a given target environment.
module Cardano.Wallet.HttpBridge.Environment

-- | Available network options.
data Network
Mainnet :: Network
Testnet :: Network
class KnownNetwork (n :: Network)
networkVal :: KnownNetwork n => Network
protocolMagic :: KnownNetwork n => ProtocolMagic

-- | Magic constant associated to a given network
newtype ProtocolMagic
ProtocolMagic :: Int32 -> ProtocolMagic
instance GHC.Show.Show Cardano.Wallet.HttpBridge.Environment.ProtocolMagic
instance GHC.Generics.Generic Cardano.Wallet.HttpBridge.Environment.ProtocolMagic
instance GHC.Enum.Enum Cardano.Wallet.HttpBridge.Environment.Network
instance GHC.Enum.Bounded Cardano.Wallet.HttpBridge.Environment.Network
instance GHC.Classes.Eq Cardano.Wallet.HttpBridge.Environment.Network
instance GHC.Show.Show Cardano.Wallet.HttpBridge.Environment.Network
instance GHC.Generics.Generic Cardano.Wallet.HttpBridge.Environment.Network
instance Cardano.Wallet.HttpBridge.Environment.KnownNetwork 'Cardano.Wallet.HttpBridge.Environment.Mainnet
instance Cardano.Wallet.HttpBridge.Environment.KnownNetwork 'Cardano.Wallet.HttpBridge.Environment.Testnet
instance Data.Text.Class.FromText Cardano.Wallet.HttpBridge.Environment.Network
instance Data.Text.Class.ToText Cardano.Wallet.HttpBridge.Environment.Network


-- | Declaration of primitive types that are specific to a particular
--   backend. Likely, the shape of all types is similar and will eventually
--   converge to one unified design. Though, in the meantime, we have to
--   support different primitive representations for some of them.
module Cardano.Wallet.HttpBridge.Primitive.Types
data Tx
Tx :: ![TxIn] -> ![TxOut] -> Tx

-- | NOTE: Order of inputs matters in the transaction representation. The
--   transaction id is computed from the binary representation of a tx, for
--   which inputs are serialized in a specific order.
[inputs] :: Tx -> ![TxIn]

-- | NOTE: Order of outputs matter in the transaction representations.
--   Outputs are used as inputs for next transactions which refer to them
--   using their indexes. It matters also for serialization.
[outputs] :: Tx -> ![TxOut]
instance GHC.Classes.Eq Cardano.Wallet.HttpBridge.Primitive.Types.Tx
instance GHC.Classes.Ord Cardano.Wallet.HttpBridge.Primitive.Types.Tx
instance GHC.Generics.Generic Cardano.Wallet.HttpBridge.Primitive.Types.Tx
instance GHC.Show.Show Cardano.Wallet.HttpBridge.Primitive.Types.Tx
instance Control.DeepSeq.NFData Cardano.Wallet.HttpBridge.Primitive.Types.Tx
instance Formatting.Buildable.Buildable Cardano.Wallet.HttpBridge.Primitive.Types.Tx


-- | These are (partial) CBOR decoders for blocks and block headers. Note
--   that we ignore most of the block's and header's content and only
--   retrieve the pieces of information relevant to us, wallet (we do
--   assume a trusted node and therefore, we needn't to care about
--   verifying signatures and blocks themselves).
--   
--   The format described in the decoders below are the one used in the
--   Byron era of Cardano and will endure in the first stages of Shelley.
--   They are also used by components like the Rust
--   <a>cardano-http-bridge</a>.
module Cardano.Wallet.HttpBridge.Binary
decodeBlock :: Decoder s (Block Tx)
decodeBlockHeader :: Decoder s BlockHeader
decodeTx :: Decoder s Tx
decodeTxWitness :: Decoder s TxWitness
decodeSignedTx :: Decoder s (Tx, [TxWitness])
decodeAddressPayload :: Decoder s ByteString
encodeTx :: Tx -> Encoding

-- | Encode a public key to a corresponding Cardano Address. The encoding
--   of the attributes part of an address is left out to the caller; This
--   allows for distinguishing between Sequential and Random addresses (the
--   former doesn't have any attributes to encode).
--   
--   <pre>
--   -- Old / Random Addresses
--   let encodeAttributes = mempty
--        &lt;&gt; CBOR.encodeMapLen 1
--        &lt;&gt; CBOR.encodeWord8 1
--        &lt;&gt; encodeDerivationPath (hdPassphrase rootXPub) accIx addrIx
--   let addr = encodeAddress xpub encodeAttributes
--   
--   -- New / Sequential Addresses
--   let encodeAttributes = mempty &lt;&gt; CBOR.encodeMapLen 0
--   let addr = encodeAddress xpub encodeAttributes
--   </pre>
--   
--   Note that we are passing the behavior to encode attributes as a
--   parameter here and do not handle multiple cases in
--   <a>encodeAddress</a> itself for multiple reasons:
--   
--   <ul>
--   <li>Inversion of control gives us a nicer implementation overall</li>
--   <li>Encoding attributes for Random addresses requires more context
--   than just the public key (like the wallet root id and some extra logic
--   for encoding passphrases). This is just scheme-specific and is better
--   left out of this particular function</li>
--   </ul>
encodeAddress :: XPub -> Encoding -> Encoding
encodeTxWitness :: TxWitness -> Encoding
encodePublicKeyWitness :: XPub -> Hash "signature" -> Encoding
encodeSignedTx :: (Tx, [TxWitness]) -> Encoding
encodeProtocolMagic :: ProtocolMagic -> Encoding

-- | Inspect the next token that has to be decoded and print it to the
--   console as a trace. Useful for debugging Decoders. Example:
--   
--   <pre>
--   myDecoder :: CBOR.Decoder s MyType
--   myDecoder = do
--       a &lt;- CBOR.decodeWord64
--       inspectNextToken
--       [...]
--   </pre>
inspectNextToken :: Decoder s ()

-- | Decode an list of known length. Very similar to
--   <tt>decodeListIndef</tt>.
--   
--   <pre>
--   myDecoder :: CBOR.Decoder s [MyType]
--   myDecoder = decodeList decodeOne
--     where
--       decodeOne :: CBOR.Decoder s MyType
--   </pre>
decodeList :: forall s a. Decoder s a -> Decoder s [a]

-- | Decode an arbitrary long list. CBOR introduce a "break" character to
--   mark the end of the list, so we simply decode each item until we
--   encounter a break character.
--   
--   <pre>
--   myDecoder :: CBOR.Decoder s [MyType]
--   myDecoder = decodeListIndef decodeOne
--     where
--       decodeOne :: CBOR.Decoder s MyType
--   </pre>
decodeListIndef :: forall s a. Decoder s a -> Decoder s [a]
toByteString :: Encoding -> ByteString

-- | This provides network encoding specific variables to be used by the
--   <tt>estimateMaxNumberOfInputs</tt> function.
estimateMaxNumberOfInputsParams :: EstimateMaxNumberOfInputsParams t


-- | Contains various implementation decision that are specific to a
--   particular network / protocol. This allows us to easily select a
--   particular backend (Byron, Shelley-Rust, Shelley-Haskell) and isolate
--   the bits that vary between those backends.
module Cardano.Wallet.HttpBridge.Compatibility

-- | A type representing the http-bridge as a network target. This has an
--   influence on binary serializer &amp; network primitives. See also
--   <tt>TxId</tt>
data HttpBridge (network :: Network)

-- | Available network options.
data Network
Mainnet :: Network
Testnet :: Network

-- | An initial first block to initialize a chain using the http-bridge. We
--   do not use the <tt>blockHash</tt> and, do only use the
--   <a>$sel:prevBlockHash:BlockHeader</a> to catch up with unstable epoch
--   and therefore, the very first <a>$sel:prevBlockHash:BlockHeader</a>
--   matters not.
--   
--   It isn't impossible to retrieve the <tt>blockHash</tt> by computing a
--   blake2b 256 of the CBOR-serialized full block header, but this
--   requires us to write the full CBOR decoders (and encoders) for the all
--   BlockHeader which is, for the http-brdige implementation, a waste of
--   time at the moment.
block0 :: Block Tx

-- | Hard-coded fee policy for Cardano on Byron
byronFeePolicy :: FeePolicy

-- | Hard-coded slot duration
byronSlotLength :: SlotLength

-- | Hard-coded max transaction size
byronTxMaxSize :: Quantity "byte" Word16
byronBlockchainParameters :: forall n. KnownNetwork n => BlockchainParameters (HttpBridge n)
instance Cardano.Wallet.Primitive.Types.DefineTx (Cardano.Wallet.HttpBridge.Compatibility.HttpBridge network)
instance Cardano.Wallet.DB.Sqlite.PersistTx (Cardano.Wallet.HttpBridge.Compatibility.HttpBridge network)
instance Cardano.Wallet.Primitive.AddressDerivation.KeyToAddress (Cardano.Wallet.HttpBridge.Compatibility.HttpBridge 'Cardano.Wallet.HttpBridge.Environment.Testnet)
instance Cardano.Wallet.Primitive.AddressDerivation.KeyToAddress (Cardano.Wallet.HttpBridge.Compatibility.HttpBridge 'Cardano.Wallet.HttpBridge.Environment.Mainnet)
instance Cardano.Wallet.Primitive.Types.EncodeAddress (Cardano.Wallet.HttpBridge.Compatibility.HttpBridge network)
instance Cardano.Wallet.Primitive.Types.DecodeAddress (Cardano.Wallet.HttpBridge.Compatibility.HttpBridge network)

module Cardano.Wallet.HttpBridge.Transaction

-- | Construct a <a>TransactionLayer</a> compatible with Byron and the
--   <a>HttpBridge</a>
newTransactionLayer :: forall n t. (KnownNetwork n, t ~ HttpBridge n, KeyToAddress t) => TransactionLayer t
instance Formatting.Buildable.Buildable Cardano.Wallet.HttpBridge.Transaction.ErrInvalidTxOutAmount


-- | Decoder for the rust-cardano packfile format.
--   
--   A pack file is a collection of bytestring blobs.
--   
--   The reference implementation is in <a>packfile.rs</a>.
module Data.Packfile

-- | Decode a Cardano version 1 pack file. The blobs are returned as a
--   list. Decoding is not incremental, and all data is stored in memory.
decodePackfile :: ByteString -> Either PackfileError [ByteString]

-- | Things related to the file format that can go wrong when decoding a
--   pack file.
data PackfileError
MissingMagicError :: PackfileError
WrongFileTypeError :: PackfileError
VersionTooOldError :: PackfileError
VersionTooNewError :: PackfileError
BlobDecodeError :: String -> PackfileError
instance GHC.Classes.Eq Data.Packfile.PackfileError
instance GHC.Show.Show Data.Packfile.PackfileError


-- | Extra content types for Servant.
module Servant.Extra.ContentTypes

-- | Represents a piece of binary data for which a hash value should be
--   calculated before performing any further deserialization.
data ComputeHash algorithm a

-- | Represents a CBOR (Concise Binary Object Representation) object.
--   
--   See RFC 7049 (http:/<i>cbor.io</i>) for further details.
data CBOR

-- | The class of types that can be converted to from CBOR.
class FromCBOR a
fromCBOR :: FromCBOR a => Decoder s a

-- | Represents the result of hashing a piece of data.
newtype Hash algorithm a
Hash :: Digest algorithm -> Hash algorithm a

-- | Represents something that has been packed with the Cardano packfile
--   format.
data Packed a

-- | Represents a piece of data with an accompanying hash value.
data WithHash algorithm a
WithHash :: Digest algorithm -> a -> WithHash algorithm a
[getHash] :: WithHash algorithm a -> Digest algorithm
[getValue] :: WithHash algorithm a -> a
instance GHC.Show.Show a => GHC.Show.Show (Servant.Extra.ContentTypes.WithHash algorithm a)
instance Servant.API.ContentTypes.Accept a => Servant.API.ContentTypes.Accept (Servant.Extra.ContentTypes.Packed a)
instance Servant.API.ContentTypes.MimeUnrender a b => Servant.API.ContentTypes.MimeUnrender (Servant.Extra.ContentTypes.Packed a) [b]
instance (Servant.API.ContentTypes.MimeUnrender a b, Crypto.Hash.Types.HashAlgorithm alg) => Servant.API.ContentTypes.MimeUnrender (Servant.Extra.ContentTypes.ComputeHash alg a) (Servant.Extra.ContentTypes.WithHash alg b)
instance Web.Internal.HttpApiData.ToHttpApiData (Servant.Extra.ContentTypes.Hash algorithm a)
instance Servant.API.ContentTypes.Accept a => Servant.API.ContentTypes.Accept (Servant.Extra.ContentTypes.ComputeHash algorithm a)
instance Servant.Extra.ContentTypes.FromCBOR a => Servant.API.ContentTypes.MimeUnrender Servant.Extra.ContentTypes.CBOR a
instance Servant.API.ContentTypes.Accept Servant.Extra.ContentTypes.CBOR


-- | An API specification for the Cardano HTTP Bridge.
module Cardano.Wallet.HttpBridge.Api
type Api = GetBlockByHash :<|> GetEpochById :<|> GetTipBlockHeader :<|> PostSignedTx

-- | Retrieve a block identified by the unique hash of its header.
type GetBlockByHash = Capture "networkName" NetworkName :> "block" :> Capture "blockHeaderHash" (Hash Blake2b_256 (ApiT BlockHeader)) :> Get '[CBOR] (ApiT (Block Tx))

-- | Retrieve the header of the latest known block.
type GetTipBlockHeader = Capture "networkName" NetworkName :> "tip" :> Get '[ComputeHash Blake2b_256 CBOR] (WithHash Blake2b_256 (ApiT BlockHeader))

-- | Retrieve all the blocks for the epoch identified by the given integer
--   ID.
type GetEpochById = Capture "networkName" NetworkName :> "epoch" :> Capture "epochId" EpochIndex :> Get '[Packed CBOR] [ApiT (Block Tx)]
type PostSignedTx = Capture "networkName" NetworkName :> "txs" :> "signed" :> ReqBody '[JSON] (ApiT (Tx, [TxWitness])) :> Post '[NoContent] NoContent
api :: Proxy Api
newtype ApiT a
ApiT :: a -> ApiT a
[getApiT] :: ApiT a -> a

-- | Represents a unique epoch.
newtype EpochIndex
EpochIndex :: Word64 -> EpochIndex
[getEpochIndex] :: EpochIndex -> Word64

-- | Represents the name of a Cardano network.
newtype NetworkName
NetworkName :: Text -> NetworkName
[getNetworkName] :: NetworkName -> Text
instance GHC.Show.Show Cardano.Wallet.HttpBridge.Api.NetworkName
instance GHC.Classes.Eq Cardano.Wallet.HttpBridge.Api.NetworkName
instance GHC.Show.Show Cardano.Wallet.HttpBridge.Api.EpochIndex
instance GHC.Classes.Eq Cardano.Wallet.HttpBridge.Api.EpochIndex
instance GHC.Show.Show a => GHC.Show.Show (Cardano.Wallet.HttpBridge.Api.ApiT a)
instance Web.Internal.HttpApiData.ToHttpApiData Cardano.Wallet.HttpBridge.Api.NetworkName
instance Web.Internal.HttpApiData.ToHttpApiData Cardano.Wallet.HttpBridge.Api.EpochIndex
instance Servant.Extra.ContentTypes.FromCBOR (Cardano.Wallet.HttpBridge.Api.ApiT (Cardano.Wallet.Primitive.Types.Block Cardano.Wallet.HttpBridge.Primitive.Types.Tx))
instance Servant.Extra.ContentTypes.FromCBOR (Cardano.Wallet.HttpBridge.Api.ApiT Cardano.Wallet.Primitive.Types.BlockHeader)
instance Data.Aeson.Types.ToJSON.ToJSON (Cardano.Wallet.HttpBridge.Api.ApiT (Cardano.Wallet.HttpBridge.Primitive.Types.Tx, [Cardano.Wallet.Primitive.Types.TxWitness]))
instance Data.Aeson.Types.FromJSON.FromJSON (Cardano.Wallet.HttpBridge.Api.ApiT (Cardano.Wallet.HttpBridge.Primitive.Types.Tx, [Cardano.Wallet.Primitive.Types.TxWitness]))


-- | This module contains the necessary logic to talk to implement the
--   network layer using the cardano-http-bridge as a chain producer.
module Cardano.Wallet.HttpBridge.Network

-- | Endpoints of the cardano-http-bridge API.
data HttpBridgeLayer m
HttpBridgeLayer :: (Hash "BlockHeader" -> ExceptT ErrNetworkUnavailable m (Block Tx)) -> (Word64 -> ExceptT ErrNetworkUnavailable m [Block Tx]) -> ExceptT ErrNetworkTip m (Hash "BlockHeader", BlockHeader) -> ((Tx, [TxWitness]) -> ExceptT ErrPostTx m ()) -> HttpBridgeLayer m
[$sel:getBlock:HttpBridgeLayer] :: HttpBridgeLayer m -> Hash "BlockHeader" -> ExceptT ErrNetworkUnavailable m (Block Tx)
[$sel:getEpoch:HttpBridgeLayer] :: HttpBridgeLayer m -> Word64 -> ExceptT ErrNetworkUnavailable m [Block Tx]
[$sel:getNetworkTip:HttpBridgeLayer] :: HttpBridgeLayer m -> ExceptT ErrNetworkTip m (Hash "BlockHeader", BlockHeader)
[$sel:postSignedTx:HttpBridgeLayer] :: HttpBridgeLayer m -> (Tx, [TxWitness]) -> ExceptT ErrPostTx m ()

-- | Constructs a network layer with the given cardano-http-bridge API.
mkNetworkLayer :: Monad m => HttpBridgeLayer m -> NetworkLayer (HttpBridge n) m

-- | Creates a cardano-http-bridge <a>NetworkLayer</a> using the given
--   connection settings.
newNetworkLayer :: forall n. KnownNetwork (n :: Network) => Int -> IO (NetworkLayer (HttpBridge n) IO)

-- | Construct a new network layer
mkHttpBridgeLayer :: Manager -> BaseUrl -> NetworkName -> HttpBridgeLayer IO
instance GHC.Show.Show Cardano.Wallet.HttpBridge.Network.ErrUnexpectedNetworkFailure
instance GHC.Exception.Type.Exception Cardano.Wallet.HttpBridge.Network.ErrUnexpectedNetworkFailure
