-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Wallet backend protocol-specific bits implemented using the cardano-http-bridge
--   
--   Please see README.md
@package cardano-wallet-http-bridge
@version 2019.9.13


-- | This module contains static configuration parameters. Rather than
--   providing and carrying around a configuration file through the
--   application, we resolve configuration data at runtime using the
--   available environment.
--   
--   This gives us a flexible and portable approach to software
--   configuration, and remove some pain from the development perspective.
--   Prior to starting, the wallet is expected to have a few configuration
--   parameter available. One may rely on a `.env` file to bundle
--   configuration settings together for a given target environment.
module Cardano.Wallet.HttpBridge.Environment

-- | Available network options.
data Network
Mainnet :: Network
Testnet :: Network
class Typeable n => KnownNetwork (n :: Network)
networkVal :: KnownNetwork n => Network
protocolMagic :: KnownNetwork n => ProtocolMagic
data Local
Local :: Local
instance GHC.Classes.Eq Cardano.Wallet.HttpBridge.Environment.Local
instance GHC.Show.Show Cardano.Wallet.HttpBridge.Environment.Local
instance GHC.Enum.Enum Cardano.Wallet.HttpBridge.Environment.Network
instance GHC.Enum.Bounded Cardano.Wallet.HttpBridge.Environment.Network
instance GHC.Classes.Eq Cardano.Wallet.HttpBridge.Environment.Network
instance GHC.Show.Show Cardano.Wallet.HttpBridge.Environment.Network
instance GHC.Generics.Generic Cardano.Wallet.HttpBridge.Environment.Network
instance Cardano.Wallet.HttpBridge.Environment.KnownNetwork 'Cardano.Wallet.HttpBridge.Environment.Mainnet
instance Cardano.Wallet.HttpBridge.Environment.KnownNetwork 'Cardano.Wallet.HttpBridge.Environment.Testnet
instance Data.Text.Class.FromText Cardano.Wallet.HttpBridge.Environment.Network
instance Data.Text.Class.ToText Cardano.Wallet.HttpBridge.Environment.Network


-- | Declaration of primitive types that are specific to a particular
--   backend. Likely, the shape of all types is similar and will eventually
--   converge to one unified design. Though, in the meantime, we have to
--   support different primitive representations for some of them.
module Cardano.Wallet.HttpBridge.Primitive.Types
data Tx
Tx :: ![TxIn] -> ![TxOut] -> Tx

-- | NOTE: Order of inputs matters in the transaction representation. The
--   transaction id is computed from the binary representation of a tx, for
--   which inputs are serialized in a specific order.
[inputs] :: Tx -> ![TxIn]

-- | NOTE: Order of outputs matter in the transaction representations.
--   Outputs are used as inputs for next transactions which refer to them
--   using their indexes. It matters also for serialization.
[outputs] :: Tx -> ![TxOut]
instance GHC.Classes.Eq Cardano.Wallet.HttpBridge.Primitive.Types.Tx
instance GHC.Classes.Ord Cardano.Wallet.HttpBridge.Primitive.Types.Tx
instance GHC.Generics.Generic Cardano.Wallet.HttpBridge.Primitive.Types.Tx
instance GHC.Show.Show Cardano.Wallet.HttpBridge.Primitive.Types.Tx
instance Control.DeepSeq.NFData Cardano.Wallet.HttpBridge.Primitive.Types.Tx
instance Formatting.Buildable.Buildable Cardano.Wallet.HttpBridge.Primitive.Types.Tx


-- | Contains various implementation decision that are specific to a
--   particular network / protocol. This allows us to easily select a
--   particular backend (Byron, Shelley-Rust, Shelley-Haskell) and isolate
--   the bits that vary between those backends.
module Cardano.Wallet.HttpBridge.Compatibility

-- | A type representing the http-bridge as a network target. This has an
--   influence on binary serializer &amp; network primitives. See also
--   <tt>TxId</tt>
data HttpBridge (network :: Network)

-- | Available network options.
data Network
Mainnet :: Network
Testnet :: Network

-- | An initial first block to initialize a chain using the http-bridge. We
--   do not use the <tt>blockHash</tt> and, do only use the
--   <a>$sel:prevBlockHash:BlockHeader</a> to catch up with unstable epoch
--   and therefore, the very first <a>$sel:prevBlockHash:BlockHeader</a>
--   matters not.
--   
--   It isn't impossible to retrieve the <tt>blockHash</tt> by computing a
--   blake2b 256 of the CBOR-serialized full block header, but this
--   requires us to write the full CBOR decoders (and encoders) for the all
--   BlockHeader which is, for the http-brdige implementation, a waste of
--   time at the moment.
block0 :: Block Tx

-- | Hard-coded fee policy for Cardano on Byron
byronFeePolicy :: FeePolicy

-- | Hard-coded slot duration
byronSlotLength :: SlotLength

-- | Hard-coded max transaction size
byronTxMaxSize :: Quantity "byte" Word16
byronBlockchainParameters :: forall n. KnownNetwork n => BlockchainParameters
instance Cardano.Wallet.Primitive.Types.DefineTx (Cardano.Wallet.HttpBridge.Compatibility.HttpBridge network)
instance Cardano.Wallet.DB.Sqlite.PersistTx (Cardano.Wallet.HttpBridge.Compatibility.HttpBridge network)
instance Cardano.Wallet.Primitive.AddressDerivation.KeyToAddress (Cardano.Wallet.HttpBridge.Compatibility.HttpBridge 'Cardano.Wallet.HttpBridge.Environment.Testnet) Cardano.Wallet.Primitive.AddressDerivation.Sequential.SeqKey
instance Cardano.Wallet.Primitive.AddressDerivation.KeyToAddress (Cardano.Wallet.HttpBridge.Compatibility.HttpBridge 'Cardano.Wallet.HttpBridge.Environment.Mainnet) Cardano.Wallet.Primitive.AddressDerivation.Sequential.SeqKey
instance Cardano.Wallet.Primitive.AddressDerivation.KeyToAddress (Cardano.Wallet.HttpBridge.Compatibility.HttpBridge 'Cardano.Wallet.HttpBridge.Environment.Testnet) Cardano.Wallet.Primitive.AddressDerivation.Random.RndKey
instance Cardano.Wallet.Primitive.AddressDerivation.KeyToAddress (Cardano.Wallet.HttpBridge.Compatibility.HttpBridge 'Cardano.Wallet.HttpBridge.Environment.Mainnet) Cardano.Wallet.Primitive.AddressDerivation.Random.RndKey
instance Cardano.Wallet.Primitive.Types.EncodeAddress (Cardano.Wallet.HttpBridge.Compatibility.HttpBridge network)
instance Cardano.Wallet.Primitive.Types.DecodeAddress (Cardano.Wallet.HttpBridge.Compatibility.HttpBridge network)

module Cardano.Wallet.HttpBridge.Transaction

-- | Construct a <a>TransactionLayer</a> compatible with Byron and the
--   <a>HttpBridge</a>
newTransactionLayer :: forall n k t. (KnownNetwork n, t ~ HttpBridge n, KeyToAddress t k) => TransactionLayer t k
instance Formatting.Buildable.Buildable Cardano.Wallet.HttpBridge.Transaction.ErrInvalidTxOutAmount


-- | Decoder for the rust-cardano packfile format.
--   
--   A pack file is a collection of bytestring blobs.
--   
--   The reference implementation is in <a>packfile.rs</a>.
module Data.Packfile

-- | Decode a Cardano version 1 pack file. The blobs are returned as a
--   list. Decoding is not incremental, and all data is stored in memory.
decodePackfile :: ByteString -> Either PackfileError [ByteString]

-- | Things related to the file format that can go wrong when decoding a
--   pack file.
data PackfileError
MissingMagicError :: PackfileError
WrongFileTypeError :: PackfileError
VersionTooOldError :: PackfileError
VersionTooNewError :: PackfileError
BlobDecodeError :: String -> PackfileError
instance GHC.Classes.Eq Data.Packfile.PackfileError
instance GHC.Show.Show Data.Packfile.PackfileError


-- | Extra content types for Servant.
module Servant.Extra.ContentTypes

-- | Represents a piece of binary data for which a hash value should be
--   calculated before performing any further deserialization.
data ComputeHash algorithm a

-- | Represents a CBOR (Concise Binary Object Representation) object.
--   
--   See RFC 7049 (http:/<i>cbor.io</i>) for further details.
data CBOR

-- | The class of types that can be converted to from CBOR.
class FromCBOR a
fromCBOR :: FromCBOR a => Decoder s a

-- | Represents the result of hashing a piece of data.
newtype Hash algorithm a
Hash :: Digest algorithm -> Hash algorithm a

-- | Represents something that has been packed with the Cardano packfile
--   format.
data Packed a

-- | Represents a piece of data with an accompanying hash value.
data WithHash algorithm a
WithHash :: Digest algorithm -> a -> WithHash algorithm a
[getHash] :: WithHash algorithm a -> Digest algorithm
[getValue] :: WithHash algorithm a -> a
instance GHC.Show.Show a => GHC.Show.Show (Servant.Extra.ContentTypes.WithHash algorithm a)
instance Servant.API.ContentTypes.Accept a => Servant.API.ContentTypes.Accept (Servant.Extra.ContentTypes.Packed a)
instance Servant.API.ContentTypes.MimeUnrender a b => Servant.API.ContentTypes.MimeUnrender (Servant.Extra.ContentTypes.Packed a) [b]
instance (Servant.API.ContentTypes.MimeUnrender a b, Crypto.Hash.Types.HashAlgorithm alg) => Servant.API.ContentTypes.MimeUnrender (Servant.Extra.ContentTypes.ComputeHash alg a) (Servant.Extra.ContentTypes.WithHash alg b)
instance Web.Internal.HttpApiData.ToHttpApiData (Servant.Extra.ContentTypes.Hash algorithm a)
instance Servant.API.ContentTypes.Accept a => Servant.API.ContentTypes.Accept (Servant.Extra.ContentTypes.ComputeHash algorithm a)
instance Servant.Extra.ContentTypes.FromCBOR a => Servant.API.ContentTypes.MimeUnrender Servant.Extra.ContentTypes.CBOR a
instance Servant.API.ContentTypes.Accept Servant.Extra.ContentTypes.CBOR


-- | An API specification for the Cardano HTTP Bridge.
module Cardano.Wallet.HttpBridge.Api
type Api = GetBlockByHash :<|> GetEpochById :<|> GetTipBlockHeader :<|> PostSignedTx

-- | Retrieve a block identified by the unique hash of its header.
type GetBlockByHash = Capture "networkName" NetworkName :> "block" :> Capture "blockHeaderHash" (Hash Blake2b_256 (ApiT BlockHeader)) :> Get '[CBOR] (ApiT (Block Tx))

-- | Retrieve the header of the latest known block.
type GetTipBlockHeader = Capture "networkName" NetworkName :> "tip" :> Get '[ComputeHash Blake2b_256 CBOR] (WithHash Blake2b_256 (ApiT BlockHeader))

-- | Retrieve all the blocks for the epoch identified by the given integer
--   ID.
type GetEpochById = Capture "networkName" NetworkName :> "epoch" :> Capture "epochId" EpochIndex :> Get '[Packed CBOR] [ApiT (Block Tx)]
type PostSignedTx = Capture "networkName" NetworkName :> "txs" :> "signed" :> ReqBody '[JSON] (ApiT (Tx, [TxWitness])) :> Post '[NoContent] NoContent
api :: Proxy Api
newtype ApiT a
ApiT :: a -> ApiT a
[getApiT] :: ApiT a -> a

-- | Represents a unique epoch.
newtype EpochIndex
EpochIndex :: Word64 -> EpochIndex
[getEpochIndex] :: EpochIndex -> Word64

-- | Represents the name of a Cardano network.
newtype NetworkName
NetworkName :: Text -> NetworkName
[getNetworkName] :: NetworkName -> Text
instance GHC.Show.Show Cardano.Wallet.HttpBridge.Api.NetworkName
instance GHC.Classes.Eq Cardano.Wallet.HttpBridge.Api.NetworkName
instance GHC.Show.Show Cardano.Wallet.HttpBridge.Api.EpochIndex
instance GHC.Classes.Eq Cardano.Wallet.HttpBridge.Api.EpochIndex
instance GHC.Show.Show a => GHC.Show.Show (Cardano.Wallet.HttpBridge.Api.ApiT a)
instance Web.Internal.HttpApiData.ToHttpApiData Cardano.Wallet.HttpBridge.Api.NetworkName
instance Web.Internal.HttpApiData.ToHttpApiData Cardano.Wallet.HttpBridge.Api.EpochIndex
instance Servant.Extra.ContentTypes.FromCBOR (Cardano.Wallet.HttpBridge.Api.ApiT (Cardano.Wallet.Primitive.Types.Block Cardano.Wallet.HttpBridge.Primitive.Types.Tx))
instance Servant.Extra.ContentTypes.FromCBOR (Cardano.Wallet.HttpBridge.Api.ApiT Cardano.Wallet.Primitive.Types.BlockHeader)
instance Data.Aeson.Types.ToJSON.ToJSON (Cardano.Wallet.HttpBridge.Api.ApiT (Cardano.Wallet.HttpBridge.Primitive.Types.Tx, [Cardano.Wallet.Primitive.Types.TxWitness]))
instance Data.Aeson.Types.FromJSON.FromJSON (Cardano.Wallet.HttpBridge.Api.ApiT (Cardano.Wallet.HttpBridge.Primitive.Types.Tx, [Cardano.Wallet.Primitive.Types.TxWitness]))


-- | This module contains the necessary logic to talk to implement the
--   network layer using the cardano-http-bridge as a chain producer.
module Cardano.Wallet.HttpBridge.Network

-- | Endpoints of the cardano-http-bridge API.
data HttpBridgeLayer m
HttpBridgeLayer :: (Hash "BlockHeader" -> ExceptT ErrNetworkUnavailable m (Block Tx)) -> (Word64 -> ExceptT ErrNetworkUnavailable m [Block Tx]) -> ExceptT ErrNetworkTip m (Hash "BlockHeader", BlockHeader) -> ((Tx, [TxWitness]) -> ExceptT ErrPostTx m ()) -> HttpBridgeLayer m
[$sel:getBlock:HttpBridgeLayer] :: HttpBridgeLayer m -> Hash "BlockHeader" -> ExceptT ErrNetworkUnavailable m (Block Tx)
[$sel:getEpoch:HttpBridgeLayer] :: HttpBridgeLayer m -> Word64 -> ExceptT ErrNetworkUnavailable m [Block Tx]
[$sel:getNetworkTip:HttpBridgeLayer] :: HttpBridgeLayer m -> ExceptT ErrNetworkTip m (Hash "BlockHeader", BlockHeader)
[$sel:postSignedTx:HttpBridgeLayer] :: HttpBridgeLayer m -> (Tx, [TxWitness]) -> ExceptT ErrPostTx m ()

-- | Constructs a network layer with the given cardano-http-bridge API.
mkNetworkLayer :: forall n m t. (Monad m, KnownNetwork (n :: Network), t ~ HttpBridge n) => HttpBridgeLayer m -> NetworkLayer m t (Block Tx)

-- | Creates a cardano-http-bridge <a>NetworkLayer</a> using the given
--   connection settings.
newNetworkLayer :: forall n t. (KnownNetwork (n :: Network), t ~ HttpBridge n) => PortNumber -> IO (NetworkLayer IO t (Block Tx))

-- | Construct a new network layer
mkHttpBridgeLayer :: Manager -> BaseUrl -> NetworkName -> HttpBridgeLayer IO
withNetworkLayer :: forall n a t. (KnownNetwork n, t ~ HttpBridge n) => Trace IO Text -> HttpBridgeBackend -> (Either ErrStartup (PortNumber, NetworkLayer IO t (Block Tx)) -> IO a) -> IO a
data HttpBridgeBackend
UseRunning :: PortNumber -> HttpBridgeBackend
Launch :: HttpBridgeConfig -> HttpBridgeBackend
data HttpBridgeConfig
HttpBridgeConfig :: Either Local Network -> Maybe FilePath -> Maybe PortNumber -> [String] -> StdStream -> HttpBridgeConfig
[$sel:_networkName:HttpBridgeConfig] :: HttpBridgeConfig -> Either Local Network
[$sel:_stateDir:HttpBridgeConfig] :: HttpBridgeConfig -> Maybe FilePath
[$sel:_restApiPort:HttpBridgeConfig] :: HttpBridgeConfig -> Maybe PortNumber
[$sel:_extraArgs:HttpBridgeConfig] :: HttpBridgeConfig -> [String]
[$sel:_outputStream:HttpBridgeConfig] :: HttpBridgeConfig -> StdStream
data ErrStartup
ErrStartupNodeNotListening :: ErrStartup
ErrStartupCommandExited :: ProcessHasExited -> ErrStartup
instance GHC.Classes.Eq Cardano.Wallet.HttpBridge.Network.ErrStartup
instance GHC.Show.Show Cardano.Wallet.HttpBridge.Network.ErrStartup
instance GHC.Show.Show Cardano.Wallet.HttpBridge.Network.ErrUnexpectedNetworkFailure
instance GHC.Classes.Eq Cardano.Wallet.HttpBridge.Network.HttpBridgeBackend
instance GHC.Show.Show Cardano.Wallet.HttpBridge.Network.HttpBridgeBackend
instance GHC.Classes.Eq Cardano.Wallet.HttpBridge.Network.HttpBridgeConfig
instance GHC.Show.Show Cardano.Wallet.HttpBridge.Network.HttpBridgeConfig
instance GHC.Exception.Type.Exception Cardano.Wallet.HttpBridge.Network.ErrStartup
instance GHC.Exception.Type.Exception Cardano.Wallet.HttpBridge.Network.ErrUnexpectedNetworkFailure


-- | This module provides the main wallet server function for the
--   <tt>cardano-http-bridge</tt> backend.
module Cardano.Wallet.HttpBridge

-- | The <tt>cardano-wallet-http-bridge</tt> main function.
serveWallet :: forall t k n s a. (t ~ HttpBridge n, s ~ SeqState t, k ~ SeqKey) => (KeyToAddress t k, KnownNetwork n) => (Configuration, Switchboard Text, Trace IO Text) -> Maybe FilePath -> Listen -> HttpBridgeBackend -> Maybe (PortNumber -> PortNumber -> NetworkLayer IO t (Block Tx) -> IO a) -> IO ExitCode
