-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Shared utilities for writing unit and property tests.
--   
--   Shared utilities for writing unit and property tests.
@package cardano-wallet-test-utils
@version 2019.6.24


-- | Helper functions for testing.
module Test.Hspec.Extra

-- | Run a <tt>bracket</tt> resource acquisition function around all the
--   specs. The bracket opens before the first test case and closes after
--   the last test case.
aroundAll :: forall a. HasCallStack => (ActionWith a -> IO ()) -> SpecWith a -> Spec


-- | Utility function for finding the package test data directory.
module Test.Utils.Paths

-- | A TH function to get the test data directory.
--   
--   It combines the current source file location and cabal file to locate
--   the package directory in such a way that works in both the stack/cabal
--   package build and ghci.
--   
--   For the Nix build, rather than baking in a path that starts with
--   <tt>/build</tt>, it makes the test data path relative to the current
--   directory.
getTestData :: Q Exp


-- | Provides functions for checking if TCP ports are available to listen
--   on. These can be used to start servers for testing when there may be
--   multiple test suites running in parallel.
--   
--   Includes code from nh2: <a>https://stackoverflow.com/a/57022572</a>
module Test.Utils.Ports

-- | Get a list of random TCPv4 ports that currently do not have any
--   servers listening on them. It may return less than the requested
--   number of ports.
--   
--   Note that this method of allocating ports is subject to race
--   conditions. Production code should use better methods such as passing
--   a listening socket to the child process.
randomUnusedTCPPorts :: Int -> IO [Int]

-- | Returen a single TCP port that was unused at the time this function
--   was called.
findPort :: IO Int

-- | Checks whether <tt>connect()</tt> to a given TCPv4 <a>SockAddr</a>
--   succeeds or returns <a>eCONNREFUSED</a>.
--   
--   Rethrows connection exceptions in all other cases (e.g. when the host
--   is unroutable).
isPortOpen :: SockAddr -> IO Bool

-- | Creates a <tt>SockAttr</tt> from host IP and port number.
--   
--   Example: &gt; simpleSockAddr (127,0,0,1) 8000
simpleSockAddr :: (Word8, Word8, Word8, Word8) -> PortNumber -> SockAddr


-- | Provides a simple static files web server to be used as a fixture in
--   tests which need a HTTP server.
module Test.Utils.StaticServer

-- | Run a localhost HTTP file server on any free port, while executing the
--   given action.
withStaticServer :: FilePath -> (String -> IO a) -> IO a


-- | Provides utility functions relating to testing with times and dates.
module Test.Utils.Time

-- | A wrapper for <a>UTCTime</a> whose <a>Arbitrary</a> instance spans a
--   uniform range of dates and a mixture of time precisions.
data UniformTime

-- | Generate <a>UTCTime</a> values over a uniform range of dates and a
--   mixture of time precisions.
--   
--   Dates will be generated in a range that's bounded by
--   <a>defaultLowerBound</a> and <a>defaultUpperBound</a>.
genUniformTime :: Gen UTCTime

-- | Generate <a>UTCTime</a> values over a uniform range of dates and a
--   mixture of time precisions.
--   
--   Dates will be generated in a range that's bounded by the given minimum
--   and maximum Julian day arguments.
genUniformTimeWithinRange :: Day -> Day -> Gen UTCTime
getUniformTime :: UniformTime -> UTCTime
instance GHC.Show.Show Test.Utils.Time.UniformTime
instance GHC.Classes.Ord Test.Utils.Time.UniformTime
instance GHC.Classes.Eq Test.Utils.Time.UniformTime
instance Test.QuickCheck.Arbitrary.Arbitrary Test.Utils.Time.UniformTime


-- | Provides functions for setting up and capturing logging so that
--   expectations about logging can be asserted in test scenarios.
module Test.Utils.Trace

-- | Run an action with a logging <a>Trace</a> object, and a function to
--   get all messages that have been traced.
withLogging :: ((Trace IO msg, IO [msg]) -> IO a) -> IO a

-- | Run an action with a <a>Trace</a>, returning captured log messages
--   along with the result of the action.
captureLogging :: (Trace IO msg -> IO a) -> IO ([msg], a)


-- | Utility function for making test suites pass on Windows.
module Test.Utils.Windows
skipOnWindows :: HasCallStack => String -> Expectation
pendingOnWindows :: HasCallStack => String -> Expectation
whenWindows :: IO () -> IO ()
isWindows :: Bool
