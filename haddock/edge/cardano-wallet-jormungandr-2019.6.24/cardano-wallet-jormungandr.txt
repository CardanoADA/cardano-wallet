-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Wallet backend protocol-specific bits implemented using Jörmungandr
--   
--   Please see README.md
@package cardano-wallet-jormungandr
@version 2019.6.24


-- | This module contains static configuration parameters. Rather than
--   providing and carrying around a configuration file through the
--   application, we resolve configuration data at runtime using the
--   available environment.
--   
--   This gives us a flexible and portable approach to software
--   configuration, and remove some pain from the development perspective.
--   Prior to starting, the wallet is expected to have a few configuration
--   parameter available. One may rely on a `.env` file to bundle
--   configuration settings together for a given target environment.
module Cardano.Wallet.Jormungandr.Environment

-- | Available network options.
data Network
Mainnet :: Network
Testnet :: Network

-- | Embed some constants into a network type.
class KnownNetwork (n :: Network)
networkVal :: KnownNetwork n => Network
hrp :: KnownNetwork n => HumanReadablePart
single :: KnownNetwork n => Word8
grouped :: KnownNetwork n => Word8
instance GHC.Enum.Enum Cardano.Wallet.Jormungandr.Environment.Network
instance GHC.Enum.Bounded Cardano.Wallet.Jormungandr.Environment.Network
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Environment.Network
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Environment.Network
instance GHC.Generics.Generic Cardano.Wallet.Jormungandr.Environment.Network
instance Cardano.Wallet.Jormungandr.Environment.KnownNetwork 'Cardano.Wallet.Jormungandr.Environment.Mainnet
instance Cardano.Wallet.Jormungandr.Environment.KnownNetwork 'Cardano.Wallet.Jormungandr.Environment.Testnet
instance Data.Text.Class.FromText Cardano.Wallet.Jormungandr.Environment.Network
instance Data.Text.Class.ToText Cardano.Wallet.Jormungandr.Environment.Network


-- | Declaration of primitive types that are specific to a particular
--   backend. Likely, the shape of all types is similar and will eventually
--   converge to one unified design. Though, in the meantime, we have to
--   support different primitive representations for some of them.
--   
--   In the case of <tt>Jormungandr</tt> at the moment, inputs also holds
--   their corresponding resolved value as <a>Coin</a>.
module Cardano.Wallet.Jormungandr.Primitive.Types
data Tx
Tx :: ![(TxIn, Coin)] -> ![TxOut] -> Tx

-- | NOTE: Order of inputs matters in the transaction representation. The
--   transaction id is computed from the binary representation of a tx, for
--   which inputs are serialized in a specific order.
[inputs] :: Tx -> ![(TxIn, Coin)]

-- | NOTE: Order of outputs matter in the transaction representations.
--   Outputs are used as inputs for next transactions which refer to them
--   using their indexes. It matters also for serialization.
[outputs] :: Tx -> ![TxOut]
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Primitive.Types.Tx
instance GHC.Classes.Ord Cardano.Wallet.Jormungandr.Primitive.Types.Tx
instance GHC.Generics.Generic Cardano.Wallet.Jormungandr.Primitive.Types.Tx
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Primitive.Types.Tx
instance Control.DeepSeq.NFData Cardano.Wallet.Jormungandr.Primitive.Types.Tx
instance Formatting.Buildable.Buildable Cardano.Wallet.Jormungandr.Primitive.Types.Tx


-- | The format is for the Shelley era as implemented by the Jörmungandr
--   node.
--   
--   It is described <a>here</a>
module Cardano.Wallet.Jormungandr.Binary
data Block
Block :: BlockHeader -> [Message] -> Block
data BlockHeader
BlockHeader :: Word16 -> Word32 -> SlotId -> Word32 -> Hash "content" -> Hash "BlockHeader" -> BlockHeader
[version] :: BlockHeader -> Word16
[contentSize] :: BlockHeader -> Word32
[slot] :: BlockHeader -> SlotId
[chainLength] :: BlockHeader -> Word32
[contentHash] :: BlockHeader -> Hash "content"
[parentHeaderHash] :: BlockHeader -> Hash "BlockHeader"
data ConfigParam

-- | The official start time of the blockchain, in seconds since the Unix
--   epoch.
Block0Date :: Word64 -> ConfigParam

-- | Address discrimination. Testnet / Mainnet.
Discrimination :: Network -> ConfigParam

-- | Consensus version. BFT / Genesis Praos.
Consensus :: ConsensusVersion -> ConfigParam

-- | Number of slots in an epoch.
SlotsPerEpoch :: Quantity "slot/epoch" Word32 -> ConfigParam

-- | Slot duration in seconds.
SlotDuration :: Quantity "second/slot" Word8 -> ConfigParam

-- | The length of the suffix of the chain (in blocks) considered unstable.
EpochStabilityDepth :: Quantity "block" Word32 -> ConfigParam

-- | Determines maximum probability of a stakeholder being elected as
--   leader in a slot.
ConsensusGenesisPraosParamF :: Milli -> ConfigParam

-- | Maximum number of transactions in a block.
MaxNumberOfTransactionsPerBlock :: Word32 -> ConfigParam

-- | Fraction of blocks to be created by BFT leaders.
BftSlotsRatio :: Milli -> ConfigParam

-- | Add a BFT Leader
AddBftLeader :: LeaderId -> ConfigParam

-- | Remove a BFT Leader
RemoveBftLeader :: LeaderId -> ConfigParam

-- | Enable/disable account creation.
AllowAccountCreation :: Bool -> ConfigParam

-- | Coefficients for fee calculations.
ConfigLinearFee :: LinearFee -> ConfigParam

-- | Number of epochs until an update proposal expires.
ProposalExpiration :: Quantity "epoch" Word32 -> ConfigParam

-- | Maximum number of seconds per update for KES keys known by the system
--   after start time.
KesUpdateSpeed :: Quantity "second/update" Word32 -> ConfigParam
data ConsensusVersion
BFT :: ConsensusVersion
GenesisPraos :: ConsensusVersion
newtype LeaderId
LeaderId :: ByteString -> LeaderId
data LinearFee
LinearFee :: Quantity "lovelace" Word64 -> Quantity "lovelace/byte" Word64 -> Quantity "lovelace/cert" Word64 -> LinearFee
[constant] :: LinearFee -> Quantity "lovelace" Word64
[perByte] :: LinearFee -> Quantity "lovelace/byte" Word64
[perCert] :: LinearFee -> Quantity "lovelace/cert" Word64

-- | The block-body consists of messages. There are several types of
--   messages.
--   
--   Following, as closely as possible:
--   <a>https://github.com/input-output-hk/rust-cardano/blob/e0616f13bebd6b908320bddb1c1502dea0d3305a/chain-impl-mockchain/src/message/mod.rs#L22-L29</a>
data Message

-- | Found in the genesis block.
Initial :: [ConfigParam] -> Message

-- | A standard signed transaction
Transaction :: (Tx, [TxWitness]) -> Message
UnimplementedMessage :: Int -> Message

-- | Used to represent (&gt;= 0) rational numbers as (&gt;= 0) integers, by
--   just multiplying by 1000. For instance: '3.141592' is represented as
--   'Milli 3142'.
newtype Milli
Milli :: Word64 -> Milli
getBlock :: Get Block
getBlockHeader :: Get BlockHeader

-- | Decode a message (header + contents).
getMessage :: Get Message

-- | Decode the contents of a <tt>Transaction</tt>-message.
getTransaction :: Get (Tx, [TxWitness])
putSignedTx :: (Tx, [TxWitness]) -> Put
putTx :: Tx -> Put
coerceBlock :: Block -> Block Tx
putAddress :: Address -> Put
getAddress :: Get Address
singleAddressFromKey :: forall n. KnownNetwork n => Proxy n -> XPub -> Address

-- | Attempt decoding a <a>ByteString</a> into an <a>Address</a>. This
--   merely checks that the underlying bytestring has a "valid" structure /
--   format without doing much more.
decodeLegacyAddress :: ByteString -> Maybe Address
data Get a

-- | The simplest interface to run a <a>Get</a> decoder. If the decoder
--   runs into an error, calls <a>fail</a>, or runs out of input, it will
--   call <a>error</a>.
runGet :: () => Get a -> ByteString -> a

-- | Put merely lifts Builder into a Writer monad, applied to ().
type Put = PutM ()

-- | Run the <a>PutM</a> monad with a serialiser
runPut :: Put -> ByteString
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Binary.Block
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Binary.Block
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Binary.Message
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Binary.Message
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Binary.ConfigParam
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Binary.ConfigParam
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Binary.ConsensusVersion
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Binary.ConsensusVersion
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Binary.LinearFee
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Binary.LinearFee
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Binary.LeaderId
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Binary.LeaderId
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Binary.Milli
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Binary.Milli
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Binary.BlockHeader
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Binary.BlockHeader


-- | Contains various implementation decision that are specific to a
--   particular network / protocol. This allows us to easily select a
--   particular backend (Byron, Shelley-Rust, Shelley-Haskell) and isolate
--   the bits that vary between those backends.
module Cardano.Wallet.Jormungandr.Compatibility

-- | A type representing the Jormungandr as a network target. This has an
--   influence on binary serializer &amp; network primitives. See also
--   <tt>TxId</tt>
data Jormungandr (network :: Network)

-- | Available network options.
data Network
Mainnet :: Network
Testnet :: Network

-- | Genesis block header, i.e. very first block header of the chain
block0 :: BlockHeader
instance Cardano.Wallet.Primitive.Types.DefineTx (Cardano.Wallet.Jormungandr.Compatibility.Jormungandr network)
instance Cardano.Wallet.DB.Sqlite.PersistTx (Cardano.Wallet.Jormungandr.Compatibility.Jormungandr network)
instance Cardano.Wallet.Jormungandr.Environment.KnownNetwork n => Cardano.Wallet.Primitive.AddressDerivation.KeyToAddress (Cardano.Wallet.Jormungandr.Compatibility.Jormungandr n)
instance Cardano.Wallet.Jormungandr.Environment.KnownNetwork n => Cardano.Wallet.Primitive.Types.EncodeAddress (Cardano.Wallet.Jormungandr.Compatibility.Jormungandr n)
instance Cardano.Wallet.Jormungandr.Environment.KnownNetwork n => Cardano.Wallet.Primitive.Types.DecodeAddress (Cardano.Wallet.Jormungandr.Compatibility.Jormungandr n)


-- | An specification for the Jörmungandr REST API.
module Cardano.Wallet.Jormungandr.Api
type Api = GetTipId :<|> GetBlock :<|> GetBlockDescendantIds :<|> PostMessage

-- | Retrieve a block by its id.
type GetBlock = "v0" :> "block" :> Capture "blockHeaderHash" BlockId :> Get '[JormungandrBinary] (Block Tx)

-- | Retrieve the header of the latest known block.
type GetTipId = "v0" :> "tip" :> Get '[Hex] BlockId

-- | Retrieve <tt>n</tt> descendants of a given block, sorted from closest
--   to farthest.
--   
--   There might also exist fewer than <tt>n</tt> descendants.
--   
--   For n=3 we might have:
--   
--   <pre>
--   [genesis] ... -- [b] -- [b+1] -- [b+2] -- [b+3] -- ... -- [tip]
--                     \       \                  \
--                    parent    +--- descendants ---+
--   </pre>
type GetBlockDescendantIds = "v0" :> "block" :> Capture "blockId" BlockId :> "next_id" :> QueryParam "count" Word :> Get '[JormungandrBinary] [BlockId]
type PostMessage = "v0" :> "message" :> ReqBody '[JormungandrBinary] (Tx, [TxWitness]) :> Post '[NoContent] NoContent
newtype BlockId
BlockId :: Hash "BlockHeader" -> BlockId
[getBlockId] :: BlockId -> Hash "BlockHeader"
api :: Proxy Api
instance Servant.API.ContentTypes.MimeUnrender Cardano.Wallet.Jormungandr.Api.Hex Cardano.Wallet.Jormungandr.Api.BlockId
instance Servant.API.ContentTypes.Accept Cardano.Wallet.Jormungandr.Api.Hex
instance Servant.API.ContentTypes.MimeUnrender Cardano.Wallet.Jormungandr.Api.JormungandrBinary [Cardano.Wallet.Jormungandr.Api.BlockId]
instance Servant.API.ContentTypes.Accept Cardano.Wallet.Jormungandr.Api.JormungandrBinary
instance Servant.API.ContentTypes.MimeUnrender Cardano.Wallet.Jormungandr.Api.JormungandrBinary (Cardano.Wallet.Primitive.Types.Block Cardano.Wallet.Jormungandr.Primitive.Types.Tx)
instance Servant.API.ContentTypes.MimeRender Cardano.Wallet.Jormungandr.Api.JormungandrBinary (Cardano.Wallet.Jormungandr.Primitive.Types.Tx, [Cardano.Wallet.Primitive.Types.TxWitness])
instance Web.Internal.HttpApiData.ToHttpApiData Cardano.Wallet.Jormungandr.Api.BlockId


-- | This module allows the wallet to retrieve blocks from a known
--   <tt>Jormungandr</tt> node. This is done by providing a
--   <tt>NetworkLayer</tt> with some logic building on top of an underlying
--   <tt>JormungandrLayer</tt> HTTP client.
module Cardano.Wallet.Jormungandr.Network

-- | Creates a new <a>NetworkLayer</a> connecting to an underlying
--   <a>Jormungandr</a> backend target.
newNetworkLayer :: forall n. () => BaseUrl -> IO (NetworkLayer (Jormungandr n) IO)

-- | Wrap a Jormungandr client into a <a>NetworkLayer</a> common interface.
mkNetworkLayer :: Monad m => JormungandrLayer m -> NetworkLayer (Jormungandr n) m

-- | Endpoints of the jormungandr REST API.
data JormungandrLayer m
JormungandrLayer :: ExceptT ErrNetworkUnreachable m (Hash "BlockHeader") -> (Hash "BlockHeader" -> ExceptT ErrGetBlock m (Block Tx)) -> (Hash "BlockHeader" -> Word -> ExceptT ErrGetDescendants m [Hash "BlockHeader"]) -> ((Tx, [TxWitness]) -> ExceptT ErrPostTx m ()) -> JormungandrLayer m
[$sel:getTipId:JormungandrLayer] :: JormungandrLayer m -> ExceptT ErrNetworkUnreachable m (Hash "BlockHeader")
[$sel:getBlock:JormungandrLayer] :: JormungandrLayer m -> Hash "BlockHeader" -> ExceptT ErrGetBlock m (Block Tx)
[$sel:getDescendantIds:JormungandrLayer] :: JormungandrLayer m -> Hash "BlockHeader" -> Word -> ExceptT ErrGetDescendants m [Hash "BlockHeader"]
[$sel:postMessage:JormungandrLayer] :: JormungandrLayer m -> (Tx, [TxWitness]) -> ExceptT ErrPostTx m ()

-- | Construct a <a>JormungandrLayer</a>-client
--   
--   <pre>
--   &gt;&gt;&gt; mgr &lt;- newManager defaultManagerSettings
--   
--   &gt;&gt;&gt; j = mkJormungandrLayer mgr (BaseUrl Http "localhost" 8080 "")
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; (Right tip) &lt;- runExceptT $ getTipId j
--   
--   &gt;&gt;&gt; tip
--   BlockId (Hash {getHash = "26c640a3de09b74398c14ca0a137ec78"})
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; (Right block) &lt;- runExceptT $ getBlock j t
--   
--   &gt;&gt;&gt; block
--   
--   &gt;&gt;&gt; Block {header = BlockHeader {slotId = SlotId {epochNumber = 0, slotNumber = 0}, prevBlockHash = Hash {getHash = "\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL"}}, transactions = [Tx {inputs = [], outputs = [TxOut {address = Address {unAddress = "3$\195xi\193\"h\154\&amp;5\145}\245:O\"\148\163\165/h^\ENQ\245\248\229;\135\231\234E/"}, coin = Coin {getCoin = 14}}]}]}
--   </pre>
--   
--   At the time of writing, we only have the genesis-block, but we should
--   be able to get its descendants.
--   
--   <pre>
--   &gt;&gt;&gt; let genesisHash = BlockId (Hash {getHash = "&amp;\198@\163\222\t\183C\152\193L\160\161\&amp;7\236x\245\229\EOT\175\177\167\131\190\b\b/\174\212\177:\179"})
--   
--   &gt;&gt;&gt; runExceptT $ getDescendantIds j t 4
--   Right []
--   </pre>
mkJormungandrLayer :: Manager -> BaseUrl -> JormungandrLayer IO
data ErrUnexpectedNetworkFailure
ErrUnexpectedNetworkFailure :: Link -> ServantError -> ErrUnexpectedNetworkFailure
data BaseUrl
BaseUrl :: Scheme -> String -> Int -> String -> BaseUrl
[baseUrlScheme] :: BaseUrl -> Scheme
[baseUrlHost] :: BaseUrl -> String
[baseUrlPort] :: BaseUrl -> Int
[baseUrlPath] :: BaseUrl -> String
newManager :: ManagerSettings -> IO Manager
defaultManagerSettings :: ManagerSettings
data Scheme
Http :: Scheme
Https :: Scheme
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Network.ErrGetDescendants
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Network.ErrGetDescendants
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Network.ErrUnexpectedNetworkFailure
instance GHC.Exception.Type.Exception Cardano.Wallet.Jormungandr.Network.ErrUnexpectedNetworkFailure

module Cardano.Wallet.Jormungandr.Transaction

-- | Construct a <a>TransactionLayer</a> compatible with Shelley and
--   <tt>Jörmungandr</tt>
newTransactionLayer :: forall n. () => Hash "Genesis" -> TransactionLayer (Jormungandr n)
