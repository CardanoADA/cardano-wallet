-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Wallet backend protocol-specific bits implemented using byron nodes
--   
--   Please see README.md
@package cardano-wallet-byron
@version 2020.1.21


-- | Conversion functions and static chain settings for Byron.
module Cardano.Wallet.Byron.Compatibility
data Byron
data ByronBlock

-- | Embed some constants into a network type.
class KnownNetwork (n :: NetworkDiscriminant)
blockchainParameters :: KnownNetwork n => BlockchainParameters
versionData :: KnownNetwork n => (NodeToClientVersionData, CodecCBORTerm Text NodeToClientVersionData)
mainnetParameters :: BlockchainParameters

-- | Hard-coded mainnet genesis hash
mainnetGenesisHash :: Hash "Genesis"

-- | Hard-coded mainnet start time
mainnetStartTime :: StartTime

-- | Hard-coded fee policy for Cardano on Byron
byronFeePolicy :: FeePolicy

-- | Hard-coded slot duration
byronSlotLength :: SlotLength

-- | Hard-coded byron epoch length
byronEpochLength :: EpochLength

-- | Hard-coded max transaction size
byronTxMaxSize :: Quantity "byte" Word16

-- | Hard-coded epoch stability (a.k.a <tt>k</tt>)
byronEpochStability :: Quantity "block" Word32

-- | Hard-coded active slot coefficient (a.k.a <tt>f</tt> in
--   Ouroboros/Praos)
byronActiveSlotCoefficient :: ActiveSlotCoefficient
genesisTip :: Tip ByronBlock
genesisBlock :: ByronHash -> ByronBlock

-- | Settings for configuring a MainNet network client
mainnetVersionData :: (NodeToClientVersionData, CodecCBORTerm Text NodeToClientVersionData)

-- | Settings
testnetVersionData :: (NodeToClientVersionData, CodecCBORTerm Text NodeToClientVersionData)
toByronHash :: Hash "BlockHeader" -> ByronHash
toEpochSlots :: EpochLength -> EpochSlots
toPoint :: BlockHeader -> Point ByronBlock
toSlotNo :: SlotId -> SlotNo
fromByronBlock :: Hash "Genesis" -> ByronBlock -> Block
fromTxAux :: TxAux -> Tx
fromTxIn :: TxIn -> TxIn
fromTxOut :: TxOut -> TxOut
fromByronHash :: ByronHash -> Hash "BlockHeader"
fromChainHash :: Hash "Genesis" -> ChainHash ByronBlock -> Hash "BlockHeader"
fromSlotNo :: SlotNo -> SlotId
fromBlockNo :: BlockNo -> Quantity "block" Word32
fromTip :: Hash "Genesis" -> Tip ByronBlock -> BlockHeader
instance Cardano.Wallet.Byron.Compatibility.KnownNetwork 'Cardano.Wallet.Primitive.AddressDerivation.Mainnet


-- | Network Layer for talking to Haskell re-written nodes.
--   
--   Good to read before / additional resources:
--   
--   <ul>
--   <li>Module's documentation in
--   `ouroboros-network/typed-protocols/src/Network/TypedProtocols.hs`</li>
--   <li>Data Diffusion and Peer Networking in Shelley (see:
--   <a>https://raw.githubusercontent.com/wiki/input-output-hk/cardano-wallet/data_diffusion_and_peer_networking_in_shelley.pdf)</a></li>
--   <li>In particular sections 4.1, 4.2, 4.6 and 4.8</li>
--   </ul>
module Cardano.Wallet.Byron.Network
pattern Cursor :: () => Point ByronBlock -> TQueue m (NetworkClientCmd m) -> Cursor (m Byron)

-- | Create an instance of the network layer
newNetworkLayer :: Trace IO Text -> BlockchainParameters -> AddrInfo -> (NodeToClientVersionData, CodecCBORTerm Text NodeToClientVersionData) -> NetworkLayer IO (IO Byron) ByronBlock
data AddrInfo
localSocketAddrInfo :: FilePath -> AddrInfo


-- | Size estimation of cbor-encoded transactions in Byron
module Cardano.Wallet.Byron.Transaction.Size
sizeOfTxIn :: TxIn -> Int
sizeOfSignedTx :: [TxIn] -> [TxOut] -> Int
sizeOfTxWitness :: Int
sizeOfTxOut :: TxOut -> Int
sizeOfCoin :: Coin -> Int
worstSizeOf :: WorstSizeOf t n k => Int
class WorstSizeOf (t :: *) (n :: NetworkDiscriminant) (k :: Depth -> * -> *)
instance Cardano.Wallet.Byron.Transaction.Size.WorstSizeOf Cardano.Wallet.Primitive.Types.Address 'Cardano.Wallet.Primitive.AddressDerivation.Mainnet Cardano.Wallet.Primitive.AddressDerivation.Icarus.IcarusKey
instance Cardano.Wallet.Byron.Transaction.Size.WorstSizeOf Cardano.Wallet.Primitive.Types.Address 'Cardano.Wallet.Primitive.AddressDerivation.Testnet Cardano.Wallet.Primitive.AddressDerivation.Icarus.IcarusKey
instance Cardano.Wallet.Byron.Transaction.Size.WorstSizeOf Cardano.Wallet.Primitive.Types.Address 'Cardano.Wallet.Primitive.AddressDerivation.Mainnet Cardano.Wallet.Primitive.AddressDerivation.Byron.ByronKey
instance Cardano.Wallet.Byron.Transaction.Size.WorstSizeOf Cardano.Wallet.Primitive.Types.Address 'Cardano.Wallet.Primitive.AddressDerivation.Testnet Cardano.Wallet.Primitive.AddressDerivation.Byron.ByronKey


-- | Working with Byron transactions.
module Cardano.Wallet.Byron.Transaction
newTransactionLayer :: forall (n :: NetworkDiscriminant) k t. (t ~ IO Byron, WalletKey k, WorstSizeOf Address n k) => TransactionLayer t k
instance Formatting.Buildable.Buildable Cardano.Wallet.Byron.Transaction.ErrInvalidTxOutAmount


-- | This module provides the main wallet server function for the
--   Byron-rewrite Haskell node backend.
--   
--   The <a>Cardano.Wallet.Byron.Network</a> uses the mini-protocols
--   (ChainSync and TxSubmission) to talk with a core node and synchronize
--   with the network.
--   
--   Functionality specific to this backend for creating transactions is in
--   <a>Cardano.Wallet.Byron.Transaction</a>
module Cardano.Wallet.Byron

-- | The <tt>cardano-wallet-shelley</tt> main function. It takes the
--   configuration which was passed from the CLI and environment and starts
--   all components of the wallet.
serveWallet :: forall (n :: NetworkDiscriminant) t. (NetworkDiscriminantVal n, KnownNetwork n, DecodeAddress n, EncodeAddress n, WorstSizeOf Address n IcarusKey, WorstSizeOf Address n ByronKey, t ~ IO Byron) => Tracers IO -> SyncTolerance -> Maybe FilePath -> HostPreference -> Listen -> AddrInfo -> (SockAddr -> IO ()) -> IO ExitCode

-- | The types of trace events produced by the Byron API server.
data Tracers' f
Tracers :: f ApplicationLog -> f ApiLog -> f (WorkerLog WalletId WalletLog) -> f DBLog -> Tracers' f
[applicationTracer] :: Tracers' f -> f ApplicationLog
[apiServerTracer] :: Tracers' f -> f ApiLog
[walletEngineTracer] :: Tracers' f -> f (WorkerLog WalletId WalletLog)
[walletDbTracer] :: Tracers' f -> f DBLog

-- | All of the Byron <a>Tracer</a>s.
type Tracers m = Tracers' (Tracer m)

-- | The minimum severities for <a>Tracers'</a>. <a>Nothing</a> indicates
--   that tracing is completely disabled.
type TracerSeverities = Tracers' (Const (Maybe Severity))

-- | Strings that the user can refer to tracers by.
tracerLabels :: Tracers' (Const Text)

-- | Names and descriptions of the tracers, for user documentation.
tracerDescriptions :: [(String, String)]

-- | Set up tracing with textual log messages.
setupTracers :: TracerSeverities -> Trace IO Text -> Tracers IO

-- | Construct a <a>TracerSeverities</a> record with all tracers set to the
--   given severity.
tracerSeverities :: Maybe Severity -> TracerSeverities

-- | Log messages related to application startup and shutdown.
data ApplicationLog
MsgStarting :: AddrInfo -> ApplicationLog
MsgNetworkName :: NetworkDiscriminant -> ApplicationLog
MsgSigTerm :: ApplicationLog
MsgServerStartupError :: ListenError -> ApplicationLog
MsgDatabaseStartup :: DatabasesStartupLog -> ApplicationLog
instance GHC.Classes.Eq Cardano.Wallet.Byron.ApplicationLog
instance GHC.Show.Show Cardano.Wallet.Byron.ApplicationLog
instance GHC.Generics.Generic Cardano.Wallet.Byron.ApplicationLog
instance GHC.Show.Show (Cardano.Wallet.Byron.Tracers' (Data.Functor.Const.Const (GHC.Maybe.Maybe Cardano.BM.Data.Severity.Severity)))
instance GHC.Classes.Eq (Cardano.Wallet.Byron.Tracers' (Data.Functor.Const.Const (GHC.Maybe.Maybe Cardano.BM.Data.Severity.Severity)))
instance Data.Text.Class.ToText Cardano.Wallet.Byron.ApplicationLog
instance Cardano.BM.Data.Tracer.DefinePrivacyAnnotation Cardano.Wallet.Byron.ApplicationLog
instance Cardano.BM.Data.Tracer.DefineSeverity Cardano.Wallet.Byron.ApplicationLog
